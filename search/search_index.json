{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<ul> <li>Git-inspired data version control</li> <li>Cross-table transactions and visibility</li> <li>Open data lake approach, supporting Hive, Spark, Dremio, AWS Athena, etc.</li> <li>Works with Apache Iceberg and Delta Lake tables</li> <li>Run as a docker image, AWS Lambda or fork it on GitHub</li> </ul> <p>Get in touch via our Google Group and our Slack Channel and follow us on Twitter. Nessie source code, code contributions and bug reports are on GitHub.</p>"},{"location":"community/","title":"Community","text":"<p>Nessie is developed as a consensus-driven open source product under the Apache 2.0 license. Development is done in the open leveraging GitHub issues, PRs and using Google Groups as a mailing list.</p>"},{"location":"community/#get-in-touch","title":"Get In Touch","text":"Slack Channel The developers on Nessie frequent the nessie-public Slack channel. You can get an   invite to the channel by emailing slack-subscribe@projectnessie.org.   If you want your organization invited to the channel, please state that in the request.   Whether you\u2019re super excited about development or just want to hear what is happening,   everyone is welcome to join. Google Group If long form is more your thing, we also have created a mailing list on Google groups   that you can subscribe to. GitHub Issues Nessie is developed via GitHub issues and pull requests. If you see a problem   or want to enhance the product, we suggest you file a GitHub issue for developers to   review. Twitter The @projectnessie account on Twitter is our official account. Follow-up to keep   to date on what is happening with Project Nessie! YouTube Channel Video content for Nessie will be hosted on our YouTube channel. Docs Our website is all maintained in our source repository. If there is something you think   can be improved, feel free to fork our repository and post a pull request."},{"location":"community/#contribution","title":"Contribution","text":"<p>All contributors are welcome to Project Nessie. To get started, feel free to introduce yourself on Slack or our Google Group. Nessie is open to everyone!</p> <p>Please see the CONTRIBUTING.md guide for more information on how to contribute.</p>"},{"location":"blog/","title":"Nessie Blog","text":"<p>Highlights</p> <ul> <li>Rolling upgrade issue to 0.26.0 (May 2022)</li> </ul>"},{"location":"blog/incident-2022-05/","title":"Rolling upgrade issue to 0.26.0","text":""},{"location":"blog/incident-2022-05/#symptom","title":"Symptom","text":"<p>During or after a rolling upgrade from Nessie version &lt;= 0.25.0 to &gt;= 0.26.0, exceptions/errors like <code>org.projectnessie.versioned.ReferenceNotFoundException: Global log entry '&lt;hex&gt;\u2019 not does not exist.</code> and/or <code>Iceberg content from reference must have global state, but has none</code> may occur.</p>"},{"location":"blog/incident-2022-05/#background","title":"Background","text":"<p>When Nessie runs against non-transactional databases, it uses a \u201cglobal pointer\u201d, which holds the mapping of all named references to their HEAD commit IDs, the HEAD of the ref-log and the HEAD of the global-log. Every update to the Nessie repository ends in a CAS1 on that single global pointer. If the CAS is successful, the change, for example a commit or merge operation, was atomically &amp; consistently applied.2</p> <p>The approach to maintain these three HEADs in a single \u201crow\u201d works, but it does not scale well. This \u201csingle point of contention\u201d was never meant to stay forever, just as long as we need it and/or do not have a better solution for it.</p> <p>We implemented Nessie using this concrete global pointer mechanism, because certain decisions haven\u2019t been made at that time, and we wanted to be on the \u201csafe side\u201d and then see what can be improved.</p>"},{"location":"blog/incident-2022-05/#analysis","title":"Analysis","text":"<p>Recently we were certain that having the so-called \u201cglobal state\u201d for Iceberg tables and views is actually not such a great thing. So the team decided that the \u201cglobal state\u201d can go away. This was implemented in the Nessie PR #3866. Since that change reduced the amount of global-log-entries to nearly 0, we could also get rid of the fact that every single change to the Nessie repository, even creating a branch or tag, creates a potentially empty global-log-entry. Not writing unnecessary global-log-entries was implemented in the Nessie PR #3909. Both PRs, 3866 and 3909, were released together as Nessie 0.26.0. All Nessie tests were passing and nobody realised that a little devil sneaked into these code changes, waiting to be woken up in production.</p> <p>The situation that the global-pointer contains a \u201cbroken\u201d list of global-log parent IDs is definitely confusing and cannot be explained by only looking at the code base of the target 0.26.0 release. It does not even help to only look at the code base of the source 0.25.0 release. Both code bases are completely fine, when only considering those in isolation.</p> <p>The \u201cfun part\u201d happens, when both versions are active at the same time and requests against the same Nessie repository are served by both versions.</p>"},{"location":"blog/incident-2022-05/#involved-parts-in-the-code-base","title":"Involved parts in the code base","text":"<p>The <code>GlobalStatePointer</code> before PR #3909 has a single field called <code>global_id</code>, which served two purposes. First, it served as the \u201ccondition field\u201d for the CAS1 operation. The same field <code>global_id</code> also pointed to the HEAD of the global-log. PR #3909 changed this. The <code>global_id</code> field only serves as the \u201ccondition field\u201d for the CAS operation, the HEAD of the global log is held in <code>global_log_head</code>. Since <code>global_id</code> is no longer related to the HEAD of the global log, its value is a random value.</p> <p>As you may already guess, if a Nessie version before PR #3909 performs an update, it interprets the value of <code>global_id</code> as the HEAD of the global log. The linked part of the code then evaluates this if-condition to true, which is some other backwards compatibility code, and fills the list of global-log parents only with the value of <code>global_id</code>, because <code>currentEntry</code> is always <code>null</code>, because <code>global_id</code> does not point to a global log entry.</p> <p>Later, the function updateGlobalStatePointer populates the list of global-log-entries with the ID of the new global-log-entry and the collected parents, which is just that random global-id. So the list of global-log IDs in the global-pointer contains two entries - one that points to a \u201cvalid\u201d global log entry and one that does not seem to exist. This is exactly what has been seen.</p>"},{"location":"blog/incident-2022-05/#identification-of-the-issue-and-mitigation-in-the-live-system","title":"Identification of the issue and mitigation in the live system","text":"<p>Whether the symptom is actually caused by Nessie global pointer corruption can be validated by  accessing the Nessie storage data directly.</p> <p>Some tooling is required for this because Nessie stores its data as binary blobs.  The <code>servers/quarkus-cli</code> module is to be enhanced (in a follow-up PR) with additional commands so that these operations could be performed without additional coding work.</p> <p>Meanwhile, here\u2019s the outline of how to confirm and fix the problem in a live system.</p> <p>How to confirm the symptom:</p> <ol> <li>Fetch the Nessie Global Pointer</li> <li>For each global_log_head</li> </ol> <ul> <li>Parse it as a Nessie hash</li> <li>Check whether there\u2019s an entry in the Global Log table keyed by this hash</li> </ul> <ol> <li>If at least one of the parent hashes does not have a corresponding global log entry, that will mean that     the Global Pointer data has been corrupted</li> </ol> <p>How to fix the problem:</p> <ol> <li>Do a full scan of the Global Log table</li> <li>Find the last good Global Log entry</li> </ol> <ul> <li>Normally, if Nessie has substantial history good global log entries will have 20 parents       (or whatever was configured)</li> <li>Use log entry timestamps and common sense to identify the last good entry</li> </ul> <ol> <li>Check all global log entries referred to from the Global Pointer directly</li> </ol> <ul> <li>Check whether they have any \u201cputs\u201d,       i.e. contain Iceberg metadata information</li> </ul> <ol> <li>If those entries have \u201cputs\u201d construct a new entry that collectively contains their \u201cput\u201d data    and refers to the last good parent as its parent. Now this new entry becomes the last good log entry.</li> <li>If the entries from step 4 do not have \u201cputs\u201d they can be ignored.</li> <li>Construct a new Global Pointer using its all of its current data, but put the hash of the last    good global log entry as the only element in the  global_log_head list.</li> <li>Store the new Global Pointer overwriting the old (broken) Global Pointer data.</li> <li>Re-run the verification procedure (above) to validate the new Global Pointer and Global Log.</li> </ol>"},{"location":"blog/incident-2022-05/#additional-testing-effort","title":"Additional testing effort","text":"<p>Nessie already had a bunch of tests regarding compatibility and upgrades. There are tests exercising older Nessie API versions against current in-tree Nessie server, current in-tree Nessie API against older Nessie server versions, and tests exercising single-instance upgrade paths.</p> <p>Sadly, there were no tests that exercised rolling upgrade scenarios, especially none that exercised the case that hit both the old and new versions for multiple requests. For example, create a branch against the server running the \u201cold\u201d Nessie version, then a commit to that branch against the server running the \u201cnew\u201d Nessie version, and other situations.</p> <p>Today, Nessie has a test suite to validate rolling upgrades, implemented via Nessie PR #4350. As all compatibility tests, the new rolling upgrade tests are now part of the normal CI workflows for all PRs and the main branch.</p> <p>Upgrade paths are now documented on projectnessie.org here Nessie Server upgrade notes (via PR #4364 + issue #4348).</p>"},{"location":"blog/incident-2022-05/#big-changes-in-upcoming-releases","title":"Big changes in upcoming releases","text":"<p>Heads up: there will be more big changes coming in the next releases, that are already known to be not safe for a rolling upgrade. The Nessie PR #4234 eliminates the remaining contention issues in the global pointer. Because it does fundamentally change how named references and the ref-log are maintained, a rolling upgrade from Nessie &lt;= 0.30.0 would definitely cause issues and is therefore not supported.</p>"},{"location":"blog/incident-2022-05/#future-releases","title":"Future releases","text":"<p>The actual problem at play was not really the fact that upgrading Nessie &lt;= 0.25.0 to  Nessie &gt;= 0.26.0 can cause global-pointer corruption, which is bad, no question. The actual issue is that this fact was not noticed earlier.</p> <p>Learnings from this escalation:</p> <ul> <li>Implement regularly run rolling-upgrade tests in CI (#4350)</li> <li>Clearly document which versions do support rolling upgrades and which   combinations do not work</li> </ul> <ol> <li> <p>CAS means \u201ccompare and swap\u201d. See Wikipedia article \u21a9\u21a9</p> </li> <li> <p>If the CAS operation was not successful, Nessie will retry using a exponential backoff,   configured here.\u00a0\u21a9</p> </li> </ol>"},{"location":"develop/","title":"Architecture","text":"<p>Nessie builds on the recent ecosystem developments around table formats. The rise of very large metadata and eventually consistent cloud data lakes (S3 specifically) drove the need for an updated model around metadata management. Where consistent directory listings in HDFS used to be sufficient, there were many features lacking. This includes snapshotting, consistency and fast planning. Apache Iceberg and Delta Lake were both created to help alleviate those problems.</p> <p>For more insight into why we created Nessie, you can read the founding blog post by one of Nessie\u2019s creators.</p>"},{"location":"develop/#inspiration","title":"Inspiration","text":"<p>The Iceberg format (as well as the Delta Lake format) relies on a set of metadata files stored with (or near) the actual data tables. This allows Iceberg to fulfill the same role as the Hive Metastore for transactions without the need for expensive metadata scans or centralized planning (see Iceberg performance). This includes things such as partitioning (including hidden partitions), schema migrations, appends and deletes.  It does however require a pointer to the active metadata set to function. This pointer allows the Iceberg client to acquire and read the current schema, files and partitions in the dataset. Iceberg currently relies on the Hive metastore or hdfs to perform this role. The requirements for this root pointer store is it must hold (at least) information about the location of the current up-to-date metadata file, and it must be able to update this location atomically. In Hive this is accomplished by locks and in hdfs by using atomic file swap operations. These operations don\u2019t exist in eventually consistent cloud object stores, necessitating a Hive metastore for cloud data lakes. The Nessie system is designed to store the root metadata pointer and perform atomic updates to this pointer, obviating the need for a Hive metastore. Removing the need for a Hive metastore simplifies deployment and broadens the reach of tools that can work with Iceberg tables. The above is specific to how Iceberg behaves however Delta Lake operates in a near identical way.</p> <p>The Nessie service is a lightweight Java-based REST API server. It uses a standard optimistic locking strategy to ensure atomic transactions. This relies on every operation carrying an expected hash state for the store and allows for a very light weight and scalable implementation. The implementation uses configurable authentication (e.g. IAM on AWS, JWT elsewhere) and a configurable backend (currently supporting RocksDB for single-node, and DynamoDB or MongoDB) and uses the optimistic locking features of cloud based key value stores to ensure scalability across servers. This architecture allows for Nessie to run in a docker container, as a Lambda function or in a number of other configurations.</p>"},{"location":"develop/java/","title":"Java","text":""},{"location":"develop/java/#java-client","title":"Java Client","text":"<p>Nessie has a thin client designed to be incorporated into existing projects with minimum  difficulty. The client is a thin layer over Nessie\u2019s openapi Rest APIs.</p> <p>To use the Nessie client, you can add it as a dependency to your Java project using  Maven. The coordinates are:</p> <pre><code>&lt;dependency&gt;\n  &lt;groupId&gt;org.projectnessie&lt;/groupId&gt;\n  &lt;artifactId&gt;nessie-client&lt;/artifactId&gt;\n  &lt;version&gt;0.48.2&lt;/version&gt;\n&lt;/dependency&gt; \n</code></pre> <p>For ease of integration with tools that carry many dependencies, the Nessie client\u2019s  dependencies are declared as <code>optional</code>. It is designed to work with  any recent version of JAX-RS client (Jersey and Resteasy are both tested inside Nessie\u2019s  tests) + Jackson\u2019s DataBinding and JAX-RS modules (any version from the last ~3+ years).</p>"},{"location":"develop/java/#api","title":"API","text":"<p>The <code>NessieClientBuilder</code> and concrete builder implementations (such as <code>HttpClientBuilder</code>) provide an easy way of configuring and building a <code>NessieApi</code>. The currently stable API that should be used is <code>NessieApiV1</code>, which can be instantiated as shown below:</p> <pre><code>import java.net.URI;\nimport java.util.List;\nimport org.projectnessie.client.api.NessieApiV1;\nimport org.projectnessie.client.http.HttpClientBuilder;\nimport org.projectnessie.model.Reference;\n\nNessieApiV1 api = HttpClientBuilder.builder()\n.withUri(URI.create(\"http://localhost:19121/api/v1\"))\n.build(NessieApiV1.class);\n\nList&lt;Reference&gt; references = api.getAllReferences().get();\nreferences.stream()\n.map(Reference::getName)\n.forEach(System.out::println);\n</code></pre> <p>The following subsections will outline how different actions can be done via that Nessie API.</p>"},{"location":"develop/java/#fetching-details-about-a-particular-reference","title":"Fetching details about a particular Reference","text":"<p>Fetches the <code>Reference</code> object of the <code>main</code> branch and then gets its hash <pre><code>api.getReference().refName(\"main\").get().getHash();\n</code></pre></p>"},{"location":"develop/java/#creating-a-reference","title":"Creating a Reference","text":"<p>Creates a new branch <code>dev</code> that points to the <code>main</code> branch <pre><code>Reference main = api.getReference().refName(\"main\").get();\nReference branch =\napi.createReference()\n.sourceRefName(main.getName())\n.reference(Branch.of(\"dev\", main.getHash()))\n.create();\n</code></pre></p> <p>Creates a new tag <code>dev-tag</code> that points to the <code>main</code> branch <pre><code>Reference main = api.getReference().refName(\"main\").get();\nReference tag =\napi.createReference()\n.sourceRefName(main.getName())\n.reference(Tag.of(\"dev-tag\", main.getHash()))\n.create();\n</code></pre></p>"},{"location":"develop/java/#assigning-a-reference","title":"Assigning a Reference","text":"<p>Assigns a previously created <code>devBranch2</code> to the <code>dev</code> branch <pre><code>Reference dev = api.getReference().refName(\"dev\").get();\napi.assignBranch()\n.branchName(\"devBranch2\")\n.hash(dev.getHash())\n.assignTo(dev)\n.assign();\n</code></pre></p> <p>Assigns a previously created <code>dev-tag</code> to the <code>dev</code> branch <pre><code>Reference dev = api.getReference().refName(\"dev\").get();\napi.assignTag()\n.tagName(\"dev-tag\")\n.hash(dev.getHash())\n.assignTo(dev)\n.assign();\n</code></pre></p>"},{"location":"develop/java/#deleting-a-reference","title":"Deleting a Reference","text":"<p>Deletes a previously created branch <pre><code>api.deleteBranch()\n.branchName(dev.getName())\n.hash(dev.getHash())\n.delete();\n</code></pre></p> <p>Deletes a previously created tag <pre><code>api.deleteTag()\n.tagName(devTag.getName())\n.hash(devTag.getHash())\n.delete();\n</code></pre></p>"},{"location":"develop/java/#fetching-the-server-configuration","title":"Fetching the Server Configuration","text":"<pre><code>NessieConfiguration config = api.getConfig();\nconfig.getDefaultBranch();\nconfig.getVersion();\n</code></pre>"},{"location":"develop/java/#committing","title":"Committing","text":"<p>Creates a new commit by adding metadata for an <code>IcebergTable</code> under the specified <code>ContentKey</code> instance represented by <code>key</code> and deletes content represented by <code>key2</code></p> <pre><code>ContentKey key = ContentKey.of(\"table.name.space\", \"name\");\nContentKey key2 = ContentKey.of(\"other.name.space\", \"name2\");\nIcebergTable icebergTable = IcebergTable.of(\"path1\", 42L);\napi.commitMultipleOperations()\n.branchName(branch)\n.hash(main.getHash())\n.operation(Put.of(key, icebergTable))\n.operation(Delete.of(key2))\n.commitMeta(CommitMeta.fromMessage(\"commit 1\"))\n.commit();\n</code></pre>"},{"location":"develop/java/#fetching-content","title":"Fetching Content","text":"<p>Fetches the content for a single <code>ContentKey</code> <pre><code>ContentKey key = ContentKey.of(\"table.name.space\", \"name\");\nMap&lt;ContentKey, Content&gt; map = api.getContent().key(key).refName(\"dev\").get();\n</code></pre></p> <p>Fetches the content for multiple <code>ContentKey</code> instances <pre><code>List&lt;ContentKey&gt; keys =\nArrays.asList(\nContentKey.of(\"table.name.space\", \"name1\"),\nContentKey.of(\"table.name.space\", \"name2\"),\nContentKey.of(\"table.name.space\", \"name3\"));\nMap&lt;ContentKey, Content&gt; allContent = api.getContent().keys(keys).refName(\"dev\").get();\n</code></pre></p>"},{"location":"develop/java/#fetching-the-commit-log","title":"Fetching the Commit Log","text":"<p>Fetches the commit log for the <code>dev</code> reference <pre><code>LogResponse log = api.getCommitLog().refName(\"dev\").get();\n</code></pre></p>"},{"location":"develop/java/#fetching-entries","title":"Fetching Entries","text":"<p>Fetches the entries for the <code>dev</code> reference <pre><code>EntriesResponse entries = api.getEntries().refName(\"dev\").get();\n</code></pre></p>"},{"location":"develop/java/#merging","title":"Merging","text":"<p>This merges <code>fromBranch</code> into the given <code>intoBranch</code> <pre><code>api.mergeRefIntoBranch()\n.branchName(\"intoBranch\")\n.hash(intoBranchHash)\n.fromRefName(\"fromBranch\")\n.fromHash(fromHash)\n.merge();\n</code></pre></p>"},{"location":"develop/java/#transplanting","title":"Transplanting","text":"<p>Transplant/cherry-pick a bunch of commits from <code>main</code> into the <code>dev</code> branch <pre><code>Branch dev = ...\napi.transplantCommitsIntoBranch()\n.branchName(dev.getName())\n.hash(dev.getHash())\n.fromRefName(\"main\")\n.hashesToTransplant(Collections.singletonList(api.getReference().refName(\"main\").get().getHash()))\n.transplant()\n</code></pre></p>"},{"location":"develop/java/#authentication","title":"Authentication","text":"<p>Nessie has multiple <code>NessieAuthenticationProvider</code> implementations that allow different client authentication mechanisms as can be seen below. The documentation for how to configure Nessie server authentication can be found here.</p> <p>The <code>BasicAuthenticationProvider</code> allows connecting to a Nessie server that has <code>BASIC</code> authentication enabled. Note that <code>BASIC</code> is not supported in production and should only be used for development/testing. <pre><code>NessieApiV1 api =\nHttpClientBuilder.builder()\n.withUri(URI.create(\"http://localhost:19121/api/v1\"))\n.withAuthentication(BasicAuthenticationProvider.create(\"my_username\", \"very_secret\"))\n.build(NessieApiV1.class);\n</code></pre></p> <p>The <code>BearerAuthenticationProvider</code> allows connecting to a Nessie server that has <code>BEARER</code> authentication enabled. <pre><code>NessieApiV1 api =\nHttpClientBuilder.builder()\n.withUri(URI.create(\"http://localhost:19121/api/v1\"))\n.withAuthentication(BearerAuthenticationProvider.create(\"bearerToken\"))\n.build(NessieApiV1.class);\n</code></pre></p>"},{"location":"develop/kernel/","title":"Commit Kernel","text":"<p>Nessie\u2019s production commit kernel is optimized to provide high commit throughput against a distributed key value store that provides record level CAS (compare-and-swap) capability or transactional/relational databases. The commit kernel is the heart of Nessie\u2019s operations and enables it to provide lightweight creation of new tags/branches, merges, and rebases, all with very high concurrent commit rate.</p>"},{"location":"develop/kernel/#high-level-abstract","title":"High level abstract","text":"<p>Nessie 1.0 comes with a version store (aka commit kernel) implementation that is different from both Git and older Nessie version store implementations in Nessie versions before 1.0 and is abstracted as illustrated below. Nessie generally supports both non-transactional key-value databases and transactional databases (relational).</p> <p>The goal of all implementations is to spread the keys as much as possible, so data can be properly distributed, and to keep the number of operations against a database low to reduce operation time.</p> <p>Contention by itself is not avoidable, because operations against Nessie are guaranteed to be atomic and consistent.</p>"},{"location":"develop/kernel/#nessie-content-types","title":"Nessie Content Types","text":"<p>The state of so called <code>Content</code> objects like <code>IcebergTable</code> or <code>DeltaLakeTable</code> represents the current state of a table in a data lake. Whenever a table has changed via for example Iceberg, a so-called commit operation instructs Nessie to record the new state in a Nessie commit, which carries the <code>Content</code> object(s).</p> <p><code>IcebergTable</code> contains the pointer to Iceberg\u2019s table metadata plus the IDs of the snapshot, schema, partition spec, sort order defined in the table metadata. - Iceberg\u2019s table metadata manages information is stored in the Nessie commit. - The value of the snapshot-ID, schema-ID, partition-spec-ID, sort-order-ID is stored per Nessie named reference (branch or tag). For more information, please refer the spec On Reference State vs Global State</p> <p>Updating global-state and on-reference-state are technically operations against two different entities in Nessie\u2019s backend database. Classic, relational databases (usually) come with a transaction manager, which ensures that changes to different tables appear atomically to other users. Much more scalable key-value stores do not have a transaction manager, but usually only provide so-called \u201cCompare-and-Swap\u201d (CAS) operations, which conditionally update a single key-value pair. This means, that the data model has to be fundamentally different for non-transactional key-value stores and transactional databases. Support for non-transactional databases, the data model, is designed in a way that only requires a single CAS operation to ensure atomicity and consistency even when committing two logical entities, namely the global-state and the on-reference-state, respectively the update to the \u201cHEAD\u201d of the updated branch. Some more details are outlined below.</p>"},{"location":"develop/kernel/#version-store-and-database-adapters","title":"Version Store and Database Adapters","text":"<p>Nessie\u2019s REST API implementation works against the <code>VersionStore</code> interface, which defines the contract for the REST API, deals with concrete contents objects like <code>IcebergTable</code> or <code>DeltaLakeTable</code>.</p> <p><code>PersistVersionStore</code> is an implementation of <code>VersionStore</code> and translates between the content type objects like <code>IcebergTable</code> or <code>DeltaLakeTable</code> and the \u201cbinary\u201d (think: \u201cBLOB\u201d) representation in the database adapters.</p> <p><code>DatabaseAdapter</code> interface defining the content type independent mechanisms to perform Nessie operations like commit, transplants and merges as well as retrieving data.</p> <p><code>AbstractDatabaseAdapter</code> implements the commit logic, commit conflict detection and operations to retrieve information. There are these subclasses: </p> <ul> <li><code>NonTransactionalDatabaseAdapter</code> is used as a base for key-value stores.</li> <li>Implementation for DynamoDB</li> <li>Implementation for MongoDB</li> <li>Implementation for RocksDB</li> <li>Implementation for InMemory</li> <li><code>TransactionalDatabaseAdapter</code> JDBC based implementation relying on relational database   transactions for conflict resolution (rollback).</li> <li>SQL/DDL/type definitions for Postgres, Cockroach, H2</li> </ul>"},{"location":"develop/kernel/#non-transactional-key-value-databases","title":"Non-transactional key-value databases","text":"<p>The data model for non-transactional key-value databases relies on a single global-state-pointer, which is technically a table with a single row pointing to the current entry in the global-log, current entry in the ref-log and the \u201cHEAD\u201ds of all named references (branches and tags).</p> <p>The global-log contains changes to global-state, which is needed for backwards compatibility.</p> <p>The ref-log contains the history with details of operations  like COMMIT, MERGE, TRANSPLANT, CREATE_REFERENCE, DELETE_REFERENCE, ASSIGN_REFERENCE.</p> <p>The commit-log contains the individual Nessie commits.</p> <p>All commit, transplant and merge operations as well as other write operations like creating, reassigning or deleting a named reference work inside a so-called \u201cCAS loop\u201d, which technically works like the following pseudocode. A CAS operation can be imagined as an SQL like <code>UPDATE global_pointer SET value = :new_value WHERE primary_key = 1 AND value = :expected_value</code>.</p> <pre><code>// Pseudo definition of a Nessie write operation like a commit, merge, transplant, createReference,\n// assignReference, deleteReference.\nFunctionResult nessieWriteOperation(parameters...) {\nwhile (true) {\nglobalPointer = loadGlobalPointer();\n\n// Try the actual operation.\n//\n// Return the keys of the optimistically written rows in the commit log and global log,\n// the changes to the global pointer and the result to be returned to the caller.\noptimisticallyWrittenRows, updatesToGlobalPointer, functionResult\n= performNessieWriteOperation(globalPointer, parameters);\n\n// Try the CAS operation on the global pointer.\nsuccess = tryUpdateGlobalPointer(globalPointer, updatesToGlobalPointer);\n\nif (success) {\n// If the CAS oepration was successfully applied, return the function's result to the user.\nreturn functionResult;\n}\n\n// CAS was not successful\ndeleteOptimisticallyWrittenRows(optimisticallyWrittenRows);\nif (!retryPolicy.allowsRetry()) {\nthrow new RetryFailureException();\n}\n}\n}\n</code></pre>"},{"location":"develop/kernel/#transactional-databases","title":"Transactional databases","text":"<p>The data model for transactional databases defines tables for</p> <ul> <li>the global-state, where the primary key is the globally unique content-id and the   value of the global-state,</li> <li>the named-references, which define the commit hash/id of the \u201cHEAD\u201d of each named reference,</li> <li>the commit-log, which contains all commits</li> <li>the ref-log contains the history with details of operations   like COMMIT, MERGE, TRANSPLANT, CREATE_REFERENCE, DELETE_REFERENCE, ASSIGN_REFERENCE.</li> <li>the ref-log-head contains current head of the ref_log entry.</li> </ul> <p>All commit, transplant and merge operations as well as other write operations like creating, reassigning or deleting a named reference work inside a so-called \u201coperation loop\u201d, which is rather somewhat similar to the \u201cCAS loop\u201d for non-transactional databases, but does not need to keep track of optimistically written data and can directly use conditional SQL DML statements like <code>UPDATE table SET col = :value WHERE key = :key AND col = :expected_value</code> resp. <code>INSERT INTO...</code>. The database then comes back with either an update count &gt; 0 to indicate success or an update count = 0 to indicate failure or an integrity constraint violation error.</p>"},{"location":"develop/kernel/#tracing-metrics","title":"Tracing &amp; Metrics","text":"<p>Two delegating implementations of the <code>VersionStore</code> interface exist to provide metrics and tracing using Micrometer and OpenTracing.</p>"},{"location":"develop/kernel/#implemented-database-adapters","title":"Implemented database adapters","text":"<p>All current implementations are based on the abstractions in the Maven modules <code>:nessie-versioned-persist-adapter</code> + either <code>:nessie-versioned-persist-non-transactional</code> (for key-value stores) or <code>:nessie-versioned-persist-transactional</code> (for relational/transactional databases).</p> <ul> <li>Non-transactional</li> <li>InMemory (testing and prototyping)</li> <li>RocksDB</li> <li>MongoDB</li> <li>DynamoDB (planned)</li> <li>Transactional</li> <li>H2</li> <li>Postgres</li> </ul> <p>Note: not all database adapters are available via Nessie running via Quarkus!</p>"},{"location":"develop/kernel/#nessie-logic-vs-database-specific-adapters","title":"Nessie logic vs database specific adapters","text":"<p>The whole logic around commits, merges, transplants, fetching keys and values resides in AbstractDatabaseAdapter and is shared across all kinds of database adapters.</p> <p>Database adapters, for both transactional and non-transactional databases, have the database specific implementations around the CAS loop for non-transactional, catching integrity constraint violations for transactional, the concrete physical data model and the concrete read &amp; write implementations.</p>"},{"location":"develop/kernel/#logical-data-model","title":"Logical Data model","text":"<p>The DatabaseAdapter interface defines the functions needed by the version store implementation to access the data.</p> <p>Implementations of <code>DatabaseAdapter</code> are free to implement their own optimizations.</p>"},{"location":"develop/kernel/#non-transactional","title":"Non-transactional","text":"<p>Implementations are based on NonTransactionalDatabaseAdapter and only implement the database specific \u201cprimitives\u201d to unconditionally read and write records and perform the mandatory CAS (compare-and-swap) operation.</p> <p>Key-value stores are all non-transactional as those are built for scale-out. Most key-value stores support atomic CAS (compare-and-swap) operations against a single row/record, but atomic and conditional updates to multiple rows/records is either not supported at all or extremely slow.</p> <p>Nessie differentiates between content types that do require so called global-state and those that do not. Global-state is maintained globally and evaluated when a content value object is being retrieved, combined with the requested on-reference state on a Nessie commit. For Nessie commits, which are atomic, this means that Nessie has to update both the global-state and the on-reference-state for a content type that requires global state. While this is not an issue with a relational/transactional database, it is an issue in a key-value store. Nessie solves this with a single \u201cglobal pointer\u201d, which is updated using a CAS operation.</p> <p>Nessie commits (and similar operations like \u201ctransplant\u201d and \u201cmerge\u201d) optimistically write all the data to the commit log and global state log first and then try to perform the CAS operation against the global pointer. If the CAS operation succeeds, the Nessie commit operation has succeeded. If the CAS operation failed, all optimistically written rows are deleted and the whole Nessie commit is retried.</p> <p>The logical data model shared by all non-transactional database adapters consists of five entities:</p> <ul> <li>Global-pointer a single \u201ctable row\u201d that points to the current global-state-log and all HEADs   for all named references. Consistent updates are guaranteed via a CAS operation on this entity   comparing the HEAD of the global-state-log.</li> <li>Commit-log contains all commit log entries, identified by a deterministic hash. This is the same   as for transactional databases.</li> <li>Global-state-log contains all changes to the global state for content types that do require   global state. The row keys are random IDs.</li> <li>Key-lists acts as an \u201coverflow\u201d for large key lists that do not fit entirely into a single   commit log entry\u2019s embedded key list.</li> <li>Ref-log contains the history with details of operations     like COMMIT, MERGE, TRANSPLANT, CREATE_REFERENCE, DELETE_REFERENCE, ASSIGN_REFERENCE.</li> </ul>"},{"location":"develop/kernel/#transactional","title":"Transactional","text":"<p>Implementations are based on TxDatabaseAdapter and currently only implement the database specific nuances in the SQL syntax and Nessie data type mappings.</p> <p>The data for transactional database adapters consists of six tables:</p> <ul> <li>Named-references contains all named references and their current HEAD, the latter is used to   guarantee consistent updates.</li> <li>Global-state contains the current global state for a contents ID for content types that require   global state. Consistent changes are guaranteed by tracking a checksum</li> <li>value of the contents of the value representing the global state.</li> <li>Commit-log contains all commit log entries, identified by a deterministic hash. This is the same   as for non-transactional databases.</li> <li>Key-lists acts as an \u201coverflow\u201d for large key lists that do not fit entirely into a single   commit log entry\u2019s embedded key list.</li> <li>Ref-log contains the history with details of operations   like COMMIT, MERGE, TRANSPLANT, CREATE_REFERENCE, DELETE_REFERENCE, ASSIGN_REFERENCE.</li> <li>Ref-log-head contains current head of the ref_log entry.</li> </ul>"},{"location":"develop/kernel/#performance","title":"Performance","text":"<p>The non-transactional and transactional variants have different performance characteristics. As outlined above, the non-transactional variant uses a central global pointer and the transactional variant leverages the transaction manager of the database.</p> <p>The implementation can perform many hundred to many thousand commits per second, depending on the performance of the backend database and the characteristics of the use case. The two important factors are:</p> <ul> <li>Concurrent commits against different branches are \u201cfaster\u201d than concurrent commits against a   single branch</li> <li>Concurrent commits against the same table (think: Iceberg or Deltalake table) are slower than   concurrent commits against different tables.</li> </ul>"},{"location":"develop/kernel/#gatling-benchmarks","title":"Gatling Benchmarks","text":"<p>Nessie has a framework to simulate \u201chigher level use cases\u201d using Gatling. See the readmes here and here. Please note that all kinds of performance tests are only meaningful in production-like environments using production-like use cases.</p>"},{"location":"develop/kernel/#microbenchmarks","title":"Microbenchmarks","text":"<p>There are microbenchmarks available, which can be useful to investigate the overall performance of a database. Please note that performance tests, even microbenchmarks, are only meaningful in production-like environments using production-like use cases. See Nessie Persistence Microbenchmarks README.me .</p>"},{"location":"develop/kernel/#retry-mechanism","title":"Retry Mechanism","text":"<p>All write operations do support retries. Retries happen, if a non-transactional CAS operation failed or a transactional DML operation ran into an \u201cintegrity constraint violation\u201d. Both the number of retries and total time for the operation are bounded. There is an (exponentially increasing) sleep time between two tries. The actual values for the retry mechanism are configurable. </p>"},{"location":"develop/nessie_vs_git/","title":"Nessie vs Git","text":"<p>Git is awesome. Nessie was inspired by Git but makes very different tradeoffs. Nessie focuses  on the specific use case of data version control. By narrowing our focus, we were able to better  serve the needs of the data ops experience while continuing to support a general git  metaphor. The key difference between the two is that Nessie does not support disconnected  copies. This allows several other dimensions to be substantially more powerful. </p>"},{"location":"develop/nessie_vs_git/#key-differences","title":"Key differences","text":"Dimension Git Nessie Rationale Clones Allowed Not Allowed This is the biggest difference between Nessie and Git. Git is a distributed version control system, Nessie is not. This is appropriate in the context of Nessie\u2019s role as an RPS. When talking about Cloud Data ops, everyone does not get their own copy of data\u2013the datasets are typically large and centralized. Because Nessie is layered on top of those shared datasets, clones make less sense. In the Nessie world, using personal branches provides a similar mechanism while keeping a shared world view of what can be managed for GC policies, etc. Speed (commits/second)) &lt;1 hundreds to thousands When we started working on Nessie, we actually tried to use Git. We evaluated Git directly, implemented a version that used JGit (used by tools like Gerrit and Eclipse) as well as explored the capabilities of GitHub, Azure Git and AWS Git. What we saw was a fairly expensive operation. Typically, a single commit operation took on the order of a few seconds. Scale 100s MB Unconstrained While there are multiple examples of larger or higher performance Git implementations (1, 2) , in general Git repositories are fairly small in size. Things like Git LFS were created to help accommodate this but given the nature of clones, large repositories are frowned upon. Because Nessie provides a centralized repository, typical repository constraints do not apply. History Thousands Billions Nessie supports optional garbage collection of historical commits based on user-defined rules to reduce storage consumption. Committer Human Human &amp; Machine Git was designed for human time: commits happen 100-1000s of times a day, not 100x per second. Data in many systems is changing very frequently (especially when you consider a large number of tables). These systems are frequently driven by automated scripts Objects Files Tables &amp; Views Nessie is focused on tracking versions of tables using a well-known set of open table formats. Nessie\u2019s capabilities are integrated into the particular properties of these formats. Git is focused on the generalized problem of tracking arbitrary files (buckets of bytes)."},{"location":"develop/nessie_vs_git/#nessie-on-git","title":"Nessie on Git?","text":"<p>While we describe the reasoning and differences above, we actually support running  Nessie on top of Git. In fact, the first version of Nessie was built on top of Git.  Once implemented, we then evaluated it against one of our key design criteria. This  design criterion was to support commits in the situation where there are 100,000 tables and each table is changing every 5 minutes. (For reference, the  5 minutes comes from community guidance on commit speed per table for Iceberg. The  100,000 tables comes from various users we\u2019ve worked with before.) The math for this  comes out to ~333 commits/second.</p>"},{"location":"develop/nessie_vs_git/#333-commitssecond","title":"333 Commits/second?","text":"<p>Using the design goal above, we looked at the major Git service providers to evaluate  their performance. We saw an average commit turn-around speed of 1-5/s for most  services (GitHub, Azure Git, AWS Git, etc.). Worse case commit latency were &gt;20s for  a single commit.</p> <p>Given this initial result, things were not looking good. We took one more attempt to  try to achieve the performance requirements using Git. We built a custom storage mechanism  for the awesome JGit library. This showed better promise,  providing up to 20/commits second when run against DynamoDB. However, it was still  insufficient. As such, we ultimately built our own commit kernel to power Nessie.</p> <p>In Nessie, we do not continue to include a backing store built on top of JGit. </p>"},{"location":"develop/nessie_vs_git/#so-which-is-better","title":"So Which is Better","text":"<p>Like all engineering solutions, this isn\u2019t about what is better, only what is better for  a certain use case. Git is good at generalized version control. Nessie is good  at data version control.</p>"},{"location":"develop/nessie_vs_git/#nessie-vs-dvc","title":"Nessie vs DVC","text":"<p>DVC is a popular package within ML community that is described  as \u201cVersion Control System for Machine Learning Projects\u201d it presents. While both Nessie  and DVC are focused on data, DVC is focused on smaller datasets and maintaining the  distributed capabilities of Git. This works great for individual projects that are  typically run on single workstations where datasets can be replicated. Nessie works  at a table and metadata level specifically focused on data management problems.</p>"},{"location":"develop/python/","title":"Python","text":"<pre><code># using python 3\npip install pynessie\n</code></pre>"},{"location":"develop/python/#configuration","title":"Configuration","text":"<p>When you install pynessie, you get the Python client along with a Python CLI. Configuration  for both is covered in our reference for the command line interface. </p>"},{"location":"develop/python/#usage","title":"Usage","text":"<p>To instantiate a client simply run</p> <pre><code>from pynessie import init\nclient = init() # this will look for the client config as per above\nbranches = client.list_branches()\nprint(branches)\n</code></pre> <p>All endpoint options are available from this client.</p>"},{"location":"develop/python/#spark-usage-from-python","title":"Spark usage from Python","text":"<p>A common way to interact with Nessie is via Spark. You can read more about working  with Nessie, Spark and Iceberg together on our Iceberg Client docs page.</p>"},{"location":"develop/python/#api-documentation","title":"API Documentation","text":"<p>API docs are hosted on readthedocs</p>"},{"location":"develop/rest/","title":"Rest API","text":"<p>Nessie\u2019s REST APIs are how all applications interact with Nessie. The APIs are specified  according to the openapi v3 standard and are available when running the server by going  to localhost:19120/q/openapi. You can also peruse the set of operations our APIs support  by going to SwaggerHub.</p> <p>If you are working in development, our Quarkus server will automatically start with  the swagger-ui for experimentation. You can find that at localhost:19120/q/swagger-ui/</p>"},{"location":"develop/spec/","title":"Nessie Specification","text":"<p>This page documents the complete Nessie specification. This includes:</p> <ul> <li>API and its constraints</li> <li>Contract for value objects</li> </ul>"},{"location":"develop/spec/#api-contract","title":"API contract","text":"<p>The Nessie API is used by Nessie integrations within for example Apache Iceberg or Delta Lake and user facing applications like Web UIs.</p> <p>Nessie defines a REST API (OpenAPI) and implementations for Java and Python.</p>"},{"location":"develop/spec/#content-managed-by-nessie","title":"Content managed by Nessie","text":""},{"location":"develop/spec/#general-contract","title":"General Contract","text":"<p>Content Objects describe the state of a data lake object like a table or view. Nessie currently provides types for Iceberg tables, Delta Lake tables and Iceberg views. Nessie uses two identifiers for a single Content object:</p> <ol> <li>The Content Id is used to identify a content object across all branches even    if the content object is being referred to using different table or view names.</li> <li>The Content Key is used to look up a content object by name, like a table name    or view name. The Content Key changes when the associated table or view is renamed.</li> </ol>"},{"location":"develop/spec/#content-key","title":"Content Key","text":"<p>The Content Key consists of multiple strings and is used to resolve a symbolic name, like a table name or a view name used in SQL statements, to a Content object.</p> <p>When a table or view is renamed using for example an SQL <code>ALTER TABLE RENAME</code> operation, Nessie will record this operation using a remove operation on the old key plus a put operation on the new key (see below).</p>"},{"location":"develop/spec/#on-reference-state-vs-global-state","title":"On Reference State vs Global State","text":"<p>Nessie is designed to support multiple table formats like Apache Iceberg or Delta Lake.  Since different Nessie commits, think: on different branches in Nessie, can refer to the same physical table but with different state of the data and potentially different schema, some table formats require Nessie to refer to a single Global State.</p> <p>IDs of the Iceberg snapshot, Iceberg schema, Iceberg partition spec, Iceberg sort order  within the Iceberg table metadata are also stored per Nessie named reference (branch or tag), as the so-called on-reference-state.</p> <p>Note</p> <p>The term all information in all Nessie commits used above precisely means all information in all Nessie commits that are considered \u201clive\u201d, have not been garbage-collected by Nessie. See also Management Services.</p>"},{"location":"develop/spec/#content-id","title":"Content Id","text":"<p>All contents object must have an <code>id</code> field. This field is unique to the object and immutable once created. By convention, it is a UUID though this is not enforced by this Specification. There are several expectations on this field:</p> <ol> <li>Content Ids are immutable. Once created the object will keep the same <code>id</code> for its entire    lifetime.</li> <li>If the object is moved (e.g. stored under a different <code>Key</code>) it will keep the id.</li> <li>The same content object, i.e. the same content-id, can be referred to using different keys    on different branches.</li> </ol> <p>There is no API to look up an object by <code>id</code> and the intention of an <code>id</code> is not to serve in that capacity. An example usage of the <code>id</code> field might be storing auxiliary data on an object in a local cache and using <code>id</code> to look up that auxiliary data.</p> <p>Note</p> <p>A note about caching: The <code>Content</code> objects or the values of the referred information (e.g. schema, partitions etc.) might be cached locally by services using Nessie.</p> <p>For content types that do not track Global State, the hash of the contents object does uniquely reference an object in the Nessie history and is a suitable key to identify an object at a particular point in its history.</p> <p>Evolution of the Global State is performed in a way that keeps old contents resp. contents on different branches (and tags) available. This is the case for Apache Iceberg.</p> <p>Content types that do track Global State, the Content Id must be included in the cache key.</p> <p>For simplicity, it is recommeded to always include the Content Id.</p> <p>Since the Content object is immutable, the hash is stable and since it is disconnected from Nessie\u2019s version store properties it exists across commits/branches and survives GC and other table maintenance operations.</p> <p>The commit hash on the other hand makes a poor cache key because multiple commits can refer to the same state of a Content object, e.g. a merge or transplant will change the commit hash but not the state of the Content object.</p>"},{"location":"develop/spec/#content-types","title":"Content Types","text":"<p>Nessie is designed to support various table formats, and currently supports the following types. See also Tables &amp; Views.</p>"},{"location":"develop/spec/#iceberg-table","title":"Iceberg Table","text":"<p>Apache Iceberg describes any table using the so called table metadata, see Iceberg Table Spec. Each Iceberg operation that modifies data, for example an append or rewrite operation or more generally each Iceberg transaction, creates a new Iceberg snapshot. Any Nessie commit refers to a particular Iceberg snapshot for an Iceberg table, which translates to the state of an Iceberg table for a particular Nessie commit.</p> <p>The Nessie <code>IcebergTable</code> object passed to Nessie in a Put operation therefore consists of</p> <ol> <li>the pointer to the Iceberg table metadata and</li> <li>the IDs of the Iceberg snapshot, Iceberg schema, Iceberg partition spec, Iceberg sort order  within the Iceberg table metadata.  (so-called On Reference State)</li> </ol> <p>Note</p> <p>This model puts a strong restriction on the Iceberg table. All metadata JSON documents must be stored and none of the built-in iceberg maintenance procedures can be used. There are potentially serious issues regarding schema migrations in this model as well. Therefore, the Iceberg table spec should be considered subject to change in the near future.</p>"},{"location":"develop/spec/#iceberg-view","title":"Iceberg View","text":"<p>Note</p> <p>Iceberg Views are experimental and subject to change!</p> <p>The state of an Iceberg view is represented using the attributes <code>versionId</code>, <code>schemaId</code>, <code>sqlText</code> and <code>dialect</code>.</p> <p>Iceberg views are handled similar to Iceberg Tables.</p>"},{"location":"develop/spec/#delta-lake-table","title":"Delta Lake Table","text":"<p>The state of a Delta Lake Table is represented using the Delta Lake Table attributes <code>metadataLocationHistory</code>, <code>checkpointLocationHistory</code> and <code>lastCheckpoint</code>.</p> <p>Delta Lake Tables are tracked without a Global State in Nessie, i.e. those three attributes are recorded within the Put Operation of a Nessie commit.</p>"},{"location":"develop/spec/#operations-in-a-nessie-commit","title":"Operations in a Nessie commit","text":"<p>Each Nessie commit carries one or more operations. Each operation contains the Content Key and is either a Put, Delete or Unmodified operation.</p> <p>A Content Key must only occur once in a Nessie commit.</p> <p>Operations present in a commit are passed into Nessie as a list of operations.</p>"},{"location":"develop/spec/#mapping-sql-ddl-to-nessie-commit-operations","title":"Mapping SQL DDL to Nessie commit operations","text":"<p>A <code>CREATE TABLE</code> is mapped to one Put operation.</p> <p>An <code>ALTER TABLE RENAME</code> is mapped to a Delete operation using the Content Key for the table being renamed plus at least one Put operation using the Content Key of the table\u2019s new name, using the Content Id of the table being renamed.</p> <p>A <code>DROP TABLE</code> is represented as a Nessie Delete operation (without a Put operation for the same Content Id).</p> <p>A <code>DROP TABLE</code> + <code>CREATE TABLE</code> using the same table name (Content Key) in a single commit are mapped to one Put operation with a different Content Id.</p>"},{"location":"develop/spec/#put-operation","title":"Put operation","text":"<p>A Put operation modifies the state of the included Content object. It must contain the Content object and, if the Put operation modifies an existing content object, also the the expected contents. The expected contents attribute can be omitted, if the Content object refers to a new Content Id, e.g. a newly created table or view. See also Conflict Resolution.</p> <p>A Nessie Put operation is created for everything that modifies a table or a view, either its definition (think: SQL DDL) or data (think: SQL DML).</p>"},{"location":"develop/spec/#delete-operation","title":"Delete operation","text":"<p>A Delete operation does not carry any Content object and is used to indicate that a Content object is no longer referenced using the Content Key of the Delete operation.</p>"},{"location":"develop/spec/#unmodified-operation","title":"Unmodified operation","text":"<p>An Unmodified operation does not represent any change of the data, but can be included in a Nessie commit operation to enforce strict serializable transactions. The presence of an Unmodified operation means that the Content object referred to via the operation\u2019s Content Key must not have been modified since the Nessie commit\u2019s <code>expectedHash</code>.</p> <p>The Unmodified operation is not persisted.</p>"},{"location":"develop/spec/#version-store","title":"Version Store","text":"<p>See Commit Kernel for details.</p>"},{"location":"develop/spec/#conflict-resolution","title":"Conflict Resolution","text":"<p>The API passes an <code>expectedHash</code> parameter with a Nessie commit operation. This is the commit that the client thinks is the most up to date (its HEAD). The Nessie backend will check to see if the key has been modified since that <code>expectedHash</code> and if so, it will reject the requested modification with a <code>NessieConflictException</code>. This is basically an optimistic lock that accounts for the fact that the commit hash is global and nessie branch could have moved on from <code>expectedHash</code> without modifying the key in question.</p> <p>A Nessie Put operation that updates an existing content object must pass the so-called expected state, which might be used to compare the current recorded state of a content object with the state in the expected state in the Put operation. If both values differ, Nessie will reject the operation with a <code>NessieConflictException</code>.</p> <p>The reason for these conditions is to behave like a \u2018real\u2019 database. You shouldn\u2019t have to update your reference before transacting on table <code>A</code> because it just happened to update table <code>B</code> whilst you were preparing your transaction.</p>"},{"location":"features/","title":"About Nessie","text":"<p>Nessie is to Data Lakes what Git is to source code repositories. Therefore, Nessie uses many terms from both Git and data lakes.</p> <p>This page explains how Nessie makes working with data in data lakes much easier without requiring much prior knowledge of either Git or data lakes.</p> <p>Nessie is designed to give users an always-consistent view of their data across all involved data sets (tables). Changes to your data, for example from batch jobs, happen independently and are completely isolated. Users will not see any incomplete changes. Once all the changes are done, all the changes can be atomically and consistently applied and become visible to your users.</p> <p>Nessie completely eliminates the hard and often manual work required to keep track of the individual data files. Nessie knows which data files are being used and which data files can safely be deleted.</p> <p>Production, staging and development environments can use the same data lake without risking the consistent state of production data.</p> <p>Nessie does not copy your data, instead it references the existing data, which works fine, because data files1 are immutable.</p>"},{"location":"features/#nessie-101","title":"Nessie 101","text":"<ul> <li>Changes to the contents of the data lake are   recorded in Nessie as commits without copying   the actual data.</li> <li>Add meaning to the changes to your data lake.</li> <li>Always-consistent view to all the data.</li> <li>Sets of changes, like the whole work of a distributed Spark job.   or experiments of data engineers are   isolated in Nessie via branches. Failed jobs do not add additional harm to the data.</li> <li>Known, fixed versions of all data can be tagged.</li> <li>Automatic removal of unused data files (garbage collection).</li> </ul>"},{"location":"features/#data-lake-101","title":"Data Lake 101","text":"<p>\u201cA data lake is a system or repository of data stored in its natural/raw format, usually object blobs or files.\u201d (cite from Wikipedia)</p> <p>Data is stored in immutable data files1. Each data file defines the schema of the data (i.e. names and types of the columns) and contains the data. A single, logical table (for example a <code>customers</code> or a <code>bank_account_transactions</code> table) consists of many data files.</p> <p>A common (mis)understanding of Data Lakes is \u201cthrow everything in and see what happens\u201d. This might work for some time, leaving data, especially large amounts of data, unorganized is a rather bad idea. A common best-practice is still to properly organize the (immutable) data files in directories that reflect both organizational (think: units/groups in your company) and structural (think: table schema) aspects.</p> <p>New data files can be added to the set of files for a particular table. Data files can also contain updates to and deletions of existing data. For example: if you need to make changes to the data in data-file <code>A</code>, you basically have to read that data-file, apply the changes and write a new data-file <code>A'</code> with the changes, which makes data-file <code>A</code> irrelevant.</p> <p>The amount of data held in data lakes is rather huge (GBs, TBs, PBs), and so is the number of tables and data files (100s of thousands, millions).</p> <p>Managing that amount of data and data files while keeping track of schema changes, for example adding or removing a column, changing a column\u2019s type, renaming a column in a table and views, is one of the things that Nessie tackles.</p> <p>Data in a data lake is usually consumed and written using tools like Apache Hive2 or Apache Spark2. Your existing jobs can easily integrate Nessie without any production code changes, it\u2019s a simple configuration change.</p>"},{"location":"features/#git-101","title":"Git 101","text":"<p>\u201cGit is a free and open source distributed version control system designed to handle everything from small to very large projects with speed and efficiency\u201d (cite from git-scm.com)</p> <p>Git maintains the history or all changes of a software project from the very first commit until the current state.</p> <p>Git is used by humans, i.e. developers.</p> <p>Many of the concepts of Git for source code are implemented by Nessie for all the data in your data lake. It would be rather confusing to explain all Git concepts here and then outline the differences in the next chapter. If you want to learn more about Git, we recommend looking this Git book (available in many languages) or the About Git pages as a quick start.</p>"},{"location":"features/#terms-summary","title":"Terms summary","text":"Term Meaning in Nessie Commit An atomic change to a set of data files. Hash Nessie-commits are identified by a commit id.3 (Multi-table) transaction Since a Nessie commit can group data data files from many tables, you can think of a Nessie commit as a (multi-table) transaction. Branch Named reference to a commit. A new commit to a branch updates the branch to the new commit. Tag Named reference to a commit. Not automatically changed. Merge Combination of two commits. Usually applies the changes of one source-branch onto another target-branch."},{"location":"features/#working-with-data-in-nessie","title":"Working with data in Nessie","text":"<p>Each individual state in Nessie is defined by a Nessie commit. Each commit in Nessie, except the very first one, has references to its predecessor, the previous versions of the data.</p> <p>For those who know Git and merge-commits: One important difference of Nessie-merges is that Nessie-commits have only one parent (predecessor). Nessie-merge operations technically work a bit different: the changes in branch to be merged are replayed on top of the target branch.</p> <p>Each Nessie commit also indirectly \u201cknows\u201d about the data files (via some metadata) in your data lake, which represent the state of all data in all tables.</p> <p>The following example illustrates that our current commit adds a 3rd data file. The other two data files 1+2 have been added by previous commit. <pre><code> +-------------------+       +-------------------------+\n |  previous commit  | --&lt;-- |     current commit      |\n +-------------------+       +-------------------------+\n     |         |                 |        |        |\n   (add)     (add)               |        |      (add)\n     |         |                 |        |        |\n  +------+  +------+          +------+ +------+ +------+\n  | data |  | data |          | data | | data | | data |\n  | file |  | file |          | file | | file | | file |\n  | #1   |  | #2   |          | #1   | | #2   | | #3   |\n  |     _|  |     _|          |     _| |     _| |     _|\n  |  __/    |  __/            |  __/   |  __/   |  __/  \n  |_/       |_/               |_/      |_/      |_/  \n</code></pre> In \u201crelational SQL\u201d you can think of the following sequence of SQL statements: <pre><code>BEGIN TRANSACTION;\n-- The data for data file #1\nINSERT INTO table_one (...) VALUES (...);\n-- The data for data file #2\nINSERT INTO other_table (...) VALUES (...);\n-- creates our \"previous commit\"\nCOMMIT TRANSACTION;\n\nBEGIN TRANSACTION;\n-- Data added to 'table_one' will \"land\" in a new data file #3, because\n-- data files are immutable.\nINSERT INTO table_one (...) VALUES (...);\n-- Creates our \"current commit\"\nCOMMIT TRANSACTION;\n</code></pre></p> <p>Each commit is identified by a sequence of hexadecimal characters like <code>2898591840e992ec5a7d5c811c58c8b42a8e0d0914f86a37badbeedeadaffe</code>3, which is not easy to read and remember for us humans.</p>"},{"location":"features/#transaction-in-nessie","title":"Transaction in Nessie","text":"<p>The term \u201ctransaction\u201d has different meanings to different people coming from different backgrounds. It is probably fair to say that, in general, a transaction is a group of changes applied to some data.</p> <p>The term \u201ctransaction\u201d alone does not define any guarantees. Different systems provide different guarantees, for example whether (or: when) changes performed in a transaction become visible to others, whether (parts of) the data gets locked, and so on.</p> <p>Relational database systems (RDBMS) for example usually provide certain levels of isolation (think: others cannot see uncommitted changes) and also ensure that either a change within a transaction succeeds, the request times out or fails straight away. Relational databases have a single and central transaction-coordinator4 and are designed to always provide a consistent data set.</p> <p>The smallest atomic change in Nessie is a single commit. It is fair to say, that a commit is the smallest possible transaction in Nessie.</p> <p>A single Nessie commit in Nessie:</p> <ul> <li>\u2026 can be \u201cjust\u201d the set of changes of a single worker out of many distributed   workers.</li> <li>\u2026 can cover a quite small change or cover a huge amount of changes and/or huge   amount of changed data or even group many Nessie commits into an atomic merge   operation (think: a transaction over many transactions).</li> </ul> <p>The major difference between \u201cNessie\u2019s (distributed) transactions\u201d and transactions in a relational database is that Nessie\u2019s concept of having multiple commits plus the concept of merging one branch into another branch provides a lot of flexibility.</p>"},{"location":"features/#branches","title":"Branches","text":"<p>Nessie uses the concept of \u201cbranches\u201d to always reference the latest version in a chain of commits. Our example branch is named \u201cmain\u201d and has just a single commit: <pre><code> +-------------+\n |  commit #1  |\n +-------------+\n        ^\n        |\n        |\n      \"main\"\n      branch\n</code></pre> When we add changes to our \u201cmain\u201d branch, a new <code>commit #2</code> will be created:</p> <ul> <li>the new <code>commit #2</code> will reference <code>commit #1</code> as its predecessor and</li> <li>the named reference \u201cmain\u201d will be updated to point to our new <code>commit #2</code></li> </ul> <p><pre><code> +-------------+       +-------------+\n |  commit #1  | --&lt;-- |  commit #2  |\n +-------------+       +-------------+\n                              ^\n                              |\n                              |\n                            \"main\"\n                            branch\n</code></pre> This behavior ensures that the named reference \u201cmain\u201d always points to the very latest version of our data.</p>"},{"location":"features/#working-branches-for-analytics-jobs","title":"Working-branches for analytics jobs","text":"<p>The above example with a single branch works well, if all changes to all tables can be grouped into a single commit. In a distributed world, computational work is distributed across many machines running many processes. All these individual tasks generate commits, but only the \u201csum\u201d of all commits from all the tasks represents a consistent state.</p> <p>If all the tasks of a job would directly commit onto our \u201cmain\u201d branch, the \u201cmain\u201d branch would be inconsistent at least until not all tasks have finished. Further, if the whole job fails, it would be hard to roll back the changes, especially if other jobs are running. Last but not least, the \u201cmain\u201d branch would contain a lot of commits (for example <code>job#213, task#47346, add 1234 rows to table x</code>), which do not make a lot of sense on their own, but a single commit (for example <code>aggregate-financial-stuff 2020/12/24</code>) would.</p> <p>To get around that issue, jobs can create a new \u201cwork\u201d-branch when they start. The results from all tasks of a job are recorded as individual commits into that \u201cwork\u201d-branch. Once the job has finished, all changes are then merged into the \u201cmain\u201d branch at once. <pre><code>    \"work\"\n    branch\n      |\n      |\n      v\n+-----------+\n| commit #1 |\n+-----------+\n      ^\n      |\n      |\n    \"main\"\n    branch\n</code></pre> Our example Spark job has two tasks, each generates a separate commit, which are only visible on our \u201cwork\u201d-branch: <pre><code>          task#1         task#2   \"work\"\n          result         result   branch\n            |                |     |\n            v                v     v\n      +-----------+       +-----------+\n      | commit #2 | --&lt;-- | commit #3 |\n      +-----------+       +-----------+\n         |\n         v\n         |\n+-----------+\n| commit #1 |\n+-----------+\n      ^\n      |\n      |\n    \"main\"\n    branch\n</code></pre> When the job has finished, you can merge the now consistent result back into the \u201cmain\u201d-branch. <pre><code>          task#1         task#2   \"work\"\n          result         result   branch\n            |                |     |\n            v                v     v\n      +-----------+       +-----------+\n      | commit #2 | --&lt;-- | commit #3 |\n      +-----------+       +-----------+\n         |                          |  \n         v                          ^\n         |                          |\n+-----------+                     +-----------+\n| commit #1 | --------&lt;---------- | commit #4 |  \n+-----------+                     +-----------+\n                                      ^\n                                      |\n                                      |\n                                    \"main\"\n                                    branch\n</code></pre></p> <p>Technically, Nessie replays <code>commit #2</code> and <code>commit #3</code> on top of the most-recent commit of the \u201cmain\u201d branch.</p> <p>For those who know Git and merge-commits: One important difference of Nessie-merges is that Nessie-commits have only one parent (predecessor). Nessie-merge operations technically work a bit different: the changes in branch to be merged are replayed on top of the target branch.</p> <p>It is recommended to give a commit a meaningful commit message and to let someone review the changes.</p> <p>As described above in Transactions in Nessie, the merge operation in the above example can be considered a Nessie distributed transaction.</p>"},{"location":"features/#working-branches-for-humans","title":"Working branches for \u201chumans\u201d","text":"<p>You can also use \u201cdeveloper\u201d branches to run experiments against your data, test changes of your jobs etc.</p> <p>Production, staging and development environments can use the same data lake without risking the consistent state of production data.</p>"},{"location":"features/#squashing","title":"Squashing","text":"<p>Nessie can not yet squash commits.</p>"},{"location":"features/#tags","title":"Tags","text":"<p>Another type of named references are tags. Nessie tags are named references to specific commits. Tags do always point to the same commit and won\u2019t be changed automatically.</p> <p>This means, that tags are useful to reference specific commits, for example a tag named <code>financial-data-of-FY2021</code> could reference all sources of financial data relevant used for some financial year report.</p> <p>See Git tags for comparison and to learn how tagging works in Git.</p>"},{"location":"features/#commit-messages-and-more","title":"Commit messages and more","text":"<p>As briefly mentioned above, every commit in Nessie has a set of attributes. Some of the more important ones are \u201csummary\u201d and \u201cdescription\u201d, which are exactly that - meaningful summaries and detailed descriptions that explain what has been changed and why it has been changed.</p> <p>In addition to \u201csummary\u201d and \u201cdescription\u201d, there are a bunch of additional attributes as shown in the following table. We plan to add more structure to these attributes in the future.</p> Attribute Meaning in Nessie commit timestamp The timestamp when the commit was recorded in Nessie. committer The one (human user, system id) that actually recorded the change in Nessie. author timestamp the timestamp when a change has been implemented (can be different from the commit timestamp). author The one (human user, system id) that authored the change, can be different if someone else actually commits the change to Nessie. summary A short, one-line meaningful summary of the changes. description potentially long description of the changes. \u2026 There are potentially way more attributes, just too many to mention here."},{"location":"features/#garbage-collection","title":"Garbage collection","text":"<p>Data lakes contain a lot of data. The amount of data has a direct relation to the cost of ownership of a data lake. Keeping all data forever is probably going to be just too expensive, practically not useful and can also collide with data privacy regulations (for example GDPR or CCPA).</p> <p>Nessie keeps track of unused data files and collects the garbage for you. See Table Management</p>"},{"location":"features/#footnotes","title":"Footnotes","text":"<ol> <li> <p>Common data file formats are Apache Iceberg Tables,   Delta Lake Tables \u21a9\u21a9</p> </li> <li> <p>Apache, Hive, Spark, Iceberg, Parquet are trademarks of The Apache Software Foundation.\u00a0\u21a9\u21a9</p> </li> <li> <p>Nessie-commits are identified by a commit-id. All commits in Nessie (and in Git) are   identified using such a hash. The value of each hash is generated from the relevant contents   and attributes of each commit that are stored in Nessie.\u00a0\u21a9\u21a9</p> </li> <li> <p>There are distributed relational databases that are not implemented as a single monolith.   Those \u201cproper\u201d distributed relational databases use distributed consensus algorithms like   RAFT to provide the same (or even better) guarantees that classic relational databases give.   However, the concepts of a classic relational database still apply.\u00a0\u21a9</p> </li> </ol>"},{"location":"features/best-practices/","title":"Best Practices","text":""},{"location":"features/best-practices/#commit-messages","title":"Commit Messages","text":"<p>Give Nessie commits a meaningful commit summary and message, like <code>aggregate-financial-stuff 2020/12/24</code>, so people that look through the history of the data can grasp what that commit changes and why it\u2019s there.</p>"},{"location":"features/best-practices/#reviews","title":"Reviews","text":"<p>Before merging manually performed changes back, it is really helpful to let someone else who is familiar with the topic, the changes applied in a work-branch (aka \u201cdevelopment branch\u201d), review the changes.</p>"},{"location":"features/gc-internals/","title":"Nessie GC Internals","text":"<p>aka Nessie-aware delete-orphan-files</p> <p>Consists of a <code>gc-base</code> module, which contains the general base functionality to access a repository to identify the live contents, to identify the live files, to list the existing files and to purge orphan files.</p> <p>Modules that supplement the <code>gc-base</code> module:</p> <ul> <li><code>gc-iceberg</code> implements the Iceberg table-format specific functionality.</li> <li><code>gc-iceberg-files</code> implements file listing + deletion using Iceberg\u2019s <code>FileIO</code>.</li> <li><code>gc-iceberg-mock</code> is a testing-only module to generate mock metadata, manifest-lists, manifests   and (empty) data files.</li> <li><code>gc-repository-jdbc</code> implements the live-content-sets-store using JDBC (PostgreSQL and compatible)   .</li> <li><code>s3mock</code> is a testing-only module containing a S3 mock backend that allows listing objects and   getting objects programmatically.</li> <li><code>s3mino</code> is a junit 5 test extension providing a Minio based S3 backend.</li> </ul> <p>The <code>gc-tool</code> module is a command-line interface, a standalone tool provided as an executable, it is an uber jar prefixed with a shell script, and can still be executed with <code>java -jar ...</code>.</p>"},{"location":"features/gc-internals/#basic-nessie-gc-functionality","title":"Basic Nessie-GC functionality","text":"<p>Nessie-GC implements a mark-and-sweep approach, a two-phase process:</p> <p>The \u201cmark phase\u201d, or \u201clive content identification\u201d, walks all named references and collects references to all <code>Content</code> objects that are considered as live. Those references are stored in a repository as a \u201clive contents set\u201d. The \u201cmark phase\u201d is implemented in <code>IdentifyLiveContents</code>.</p> <p>The \u201csweep phase\u201d, or \u201cdelete orphan files\u201d, operates per content-id. For each content, all live versions of a <code>Content</code> are scanned to identify the set of live data files. After that, the base-location(s)  are scanned and all files that are not in the set of live data files are deleted. The \u201csweep phase\u201d is implemented by <code>DefaultLocalExpire</code>.</p>"},{"location":"features/gc-internals/#inner-workings","title":"Inner workings","text":"<p>To minimize the amount of data needed to match against the set of live data files for a <code>Content</code>, the implementation does not actually remember all individual data files, like maintaining a <code>java.util.Set</code> of all those data files, but remembers all data files in a bloom filter.</p> <p>Both the \u201cmark\u201d (identify live contents) and \u201csweep\u201d (identify and delete expired contents) phases provide a configurable parallelism: the number of concurrently scanned named references can be configured and the amount of concurrently processed tables can be configured.</p>"},{"location":"features/gc-internals/#mark-phase-optimization","title":"Mark phase optimization","text":"<p>The implementation that walks the commit logs can be configured with a <code>VisitedDeduplicator</code>, which is meant to reduce the work required during the \u201cmark\u201d phase, if the commit to be examined has already been processed.</p> <p>There is a <code>DefaultVisitedDeduplicator</code> implementation, but it is likely that it requires too much memory during runtime, especially when the identify-run is configured with multiple GC policies and/or has to walk many commits. This <code>DefaultVisitedDeduplicator</code> is present, but due to the mentioned concerns not available in the Nessie GC tool and the use of <code>DefaultVisitedDeduplicator</code> is not supported at all, and not recommended.</p>"},{"location":"features/gc-internals/#identified-live-contents-repository","title":"Identified live contents repository","text":"<p>It is recommended to use an external database for the Nessie GC repository. This is especially recommended for big Nessie repositories.</p> <p>Nessie GC runs against small-ish repositories do technically work with an in-memory repository. But, as the term \u201cin memory\u201d suggests, the identified live-contents-set, its state, duration, etc. cannot be inspected afterwards.</p>"},{"location":"features/gc-internals/#pluggable-code","title":"Pluggable code","text":"<p>Different parts / functionalities are quite isolated and abstracted to allow proper unit-testability and also allow reuse of similar functionality.</p> <p>Examples of abstracted/isolated functionality:</p> <ul> <li>Functionality to recursively walk a base location</li> <li>Functionality to delete files</li> <li>Nessie GC repository</li> <li>Getting all data files for a specific content reference (think: Iceberg table snapshot)</li> <li>Commit-log-scanning duplicate work elimination</li> </ul>"},{"location":"features/gc-internals/#file-references","title":"File references","text":"<p>All files (or objects, in case of an object store like S3) are described using a <code>FileReference</code>, using a base URI plus a URI relative to the base URI. Noteworthy: the \u201csweep phase\u201d, which \u201ccollects\u201d all live files in a bloom filter and after that lists files in all base URIs, always uses only the relative URI, never the full URI, to check whether a file is orphan or probably not (bloom filter is probabilistic data structure).</p> <p>Since object stores are the primary target, only files but not directories are supported. Object stores do not know about directories, further Iceberg\u2019s <code>FileIO</code> does not know about directories either. For file systems that do support directories this means, that empty directories will not be deleted, and prematurely deleting directories could break concurrent operations.</p>"},{"location":"features/gc-internals/#runtime-requirements","title":"Runtime requirements","text":"<p>Nessie GC work is dominated by network and/or disk I/O, less by CPU and heap pressure.</p> <p>Memory requirements (rough estimates):</p> <ul> <li>Number of concurrent content-scans (\u201csweep phase\u201d) times the bloom-filter on-heap size   (assume that can be a couple MB, depending on the expected number of files and allowed   false-positive ratio).</li> <li>Duplicate-commit-log-walk elimination requires some amount of memory for each distinct cut-off   time times the (possible) number of commits over the matching references.</li> <li>Additional memory is required for the currently processed chunks of metadata, for example   Iceberg\u2019s table-metadata and manifests, to identify the live data files. (The raw metadata is   only read and processed, but not memoized.)</li> <li>An in-memory live-contents-repository (not recommended for production workloads) requires   memory for all content-references.</li> </ul>"},{"location":"features/gc-internals/#cpu-heap-pressure-testing","title":"CPU &amp; heap pressure testing","text":"<p>Special \u201ctests\u201d (this and (this) have been used to verify that even a huge amount of objects does not let a tiny Java heap \u201cexplode\u201d and not use excessive CPU resources. This \u201ctest\u201d simulates a Nessie repository with many references, commits, contents and files per content version. Runs of that test using a profiler proved that the implementation requires little memory and little CPU - runtime is largely dominated by bloom-filter put and maybe-contains operations for the per-content-expire runs. Both tests proved the concept.</p>"},{"location":"features/gc-internals/#deferred-deletion","title":"Deferred deletion","text":"<p>The default behavior is to immediately deletes orphan files. But it is also possible to record the files to be deleted and delete those later. The <code>nessie-gc</code> tool supports deferred deletion.</p>"},{"location":"features/gc-internals/#non-nessie-use-cases","title":"Non-Nessie use cases","text":"<p>Although all the above is designed for Nessie, it is possible to reuse the core implementation with \u201cplain\u201d Iceberg, effectively a complete replacement of Iceberg\u2019s expire snapshots and delete orphan files, but without Iceberg\u2019s implicit requirement of using Spark. Things needed for this:</p> <ul> <li>A \u201cpure Iceberg\u201d implementation of <code>org.projectnessie.gc.repository.RepositoryConnector</code>:</li> <li>Return one reference per Iceberg table, derived from the underlying Iceberg catalog.</li> <li>Provide a commit log with one <code>Put</code> operation for each Iceberg snapshot.</li> <li>(The <code>allContents</code> function can return an empty <code>Stream</code>for the \u201cpure Iceberg\u201d use case.)</li> <li>Existing functionality, the mark-and-sweep logic and the code in <code>nessie-gc-iceberg</code> and   <code>nessie-gc-iceberg-files</code>, can be reused without any changes.</li> </ul>"},{"location":"features/gc-internals/#potential-future-enhancements","title":"Potential future enhancements","text":"<p>Since Nessie GC keeps track of all ever live content-references and all ever known base content locations, it is possible to identify \u2026</p> <ul> <li>\u2026 the base content locations that are no longer used. In other words: storage of e.g. Iceberg   tables that have been deleted and are no longer referenced in any live Nessie commit.</li> <li>\u2026 the content references (aka Iceberg snapshots) are no longer used. This information can be   used to no longer expose the affected e.g. Iceberg snapshots in any table metadata.</li> </ul>"},{"location":"features/gc-internals/#completely-unreferenced-contents","title":"Completely unreferenced contents","text":"<p>Files of contents that are not visible from any live Nessie commit can be completely removed. Detecting this situation is not directly supported by the above approach.</p> <p>The live-contents-set generated by Nessie GC\u2019s identify phase contains all content IDs that are \u201clive\u201d. Nessie (server) could (and this approach is really just a thought) help here, by sending the \u201clive\u201d content IDs to Nessie and Nessie returning one content object for all content IDs that are not contained in the set of \u201clive\u201d content IDs. Another implementation would then be responsible to inspect the returned contents and purge the base locations in the data lake, where the data files, manifests, etc were stored.</p> <p>The above must not purge files for content IDs that have just been recently created.</p>"},{"location":"features/gc-internals/#potential-iceberg-specific-enhancements","title":"Potential Iceberg specific enhancements","text":"<p>Nessie GC can easily identify the Iceberg snapshots, as each Nessie commit references exactly one Iceberg table snapshot. Nessie (the runtime/server) has no knowledge of whether a particular Iceberg partition-spec, sort-order or schema is used via any live Iceberg snapshot or not, because partition-specs, sort-orders and schemas are referenced via Iceberg manifests. Although Nessie GC can identify these three kinds of structures during the identification of live contents, the expire phase, that maps content references to files, does not respect Nessie commit order.</p> <p>So it is necessary to fully think through a potential \u201cexpire specs/sort-orders/schemas\u201d, keeping in mind:</p> <ul> <li>Commit-chains are important, because IDs of partition-specs, sort-orders and schemas are assigned   sequentially (a 32 bit int).</li> <li>The logically same partition-specs, sort-orders and schemas may exist with different IDs on   different Nessie references.</li> <li>Partition-specs, sort-orders and schemas are only maintained in table-metadata, but referenced   from \u201cdeeper\u201d structures (manifest list, manifest files, data files).</li> <li>Is it really worth to have an \u201cexpire specs/sort-orders/schemas\u201d.</li> </ul>"},{"location":"features/intro/","title":"Introduction","text":"<p>Nessie is an OSS service and libraries that enable you to maintain multiple versions  of your data and leverage Git-like Branches &amp; Tags for your Data Lake. Nessie enhances the following  table formats with version control techniques:</p> <ul> <li>Apache Iceberg Tables (more)</li> <li>Delta Lake Tables (more)</li> <li>Apache Iceberg Views (more)</li> </ul>"},{"location":"features/intro/#basic-concepts","title":"Basic Concepts","text":"<p>Nessie is heavily inspired by Git. The main concepts Nessie exposes map directly to  Git concepts. In most cases, you simply need to replace  references of files and directories in Git with Tables in Nessie. The primary concepts in Nessie are:</p> <ul> <li>Commit: Consistent snapshot of all tables at a particular point in time.</li> <li>Branch: Human-friendly reference that a user can add commits to.</li> <li>Tag: Human-friendly reference that points to a particular commit.</li> <li>Hash: Hexadecimal string representation of a particular commit.</li> </ul> <p>Out of the box, Nessie starts with a single branch called <code>main</code> that points to the  beginning of time. A user can immediately start adding tables to that branch. For example  (in pseudocode):</p> <pre><code>$ create t1\n...\n$ insert 2 records into t1\n...\n$ create t2\n...\n$ insert 2 records into t2\n...\n</code></pre> <p>A user can then use the Nessie CLI to view the history of the main branch. You\u2019ll see  that each operation was automatically recorded as a commit within Nessie:</p> <pre><code>$ nessie log\nhash4    t2 data added \nhash3    t2 created\nhash2    t1 data added\nhash1    t1 created\n</code></pre> <p>A user can then create a new tag referencing this point in time. After doing  so, a user can continue changing the tables but that point in time snapshot will  maintain that version of data.</p> <pre><code>$ nessie tag mytag hash4\n\n$ insert records into t1\n\n$ select count(*) from t1 join t2\n.. record 1 ..\n.. record 2 ..\n.. record 3 ..\n.. 3 records ..\n\n$ select count(*) from t1@mytag join t2@mytag\n.. record 1 ..\n.. record 2 ..\n.. only 2 records ..\n</code></pre>"},{"location":"features/intro/#data-and-metadata","title":"Data and Metadata","text":"<p>Nessie does not make copies of your underlying data. Instead, it works to version  separate lists of files associated with your dataset. Whether using Spark or  some other tool, each mutation operation you do will add or delete one or more files from  the definition of your table. Nessie keeps tracks of which files are related to each  of your tables at every point in time and then allows you to recall those as needed.</p>"},{"location":"features/intro/#scale-performance","title":"Scale &amp; Performance","text":"<p>Nessie is built for very large data warehouses. Nessie supports  millions of tables and thousands of commits/second. Because Nessie builds on top of Iceberg  and Delta Lake, each table can have millions of files. As such, Nessie can support  data warehouses several magnitudes larger than the largest in the world today. This  is possible in large part due to the separation of transaction management (Nessie) from  table metadata management (Iceberg and Delta Lake).</p>"},{"location":"features/intro/#technology","title":"Technology","text":"<p>Nessie can be deployed in multiple ways and is composed primarily of the Nessie service,  which exposes a set of REST APIs and a simple browser UI. This service works with multiple libraries to expose Nessie\u2019s version control capabilities to common data management technologies.</p> <p>Nessie was built as a Cloud native technology and is designed to be highly scalable,  performant and resilient. Built  on Java and leveraging Quarkus, it is compiled to a GraalVM native image  that starts in less than 20ms. This makes Nessie work very well in Docker and FaaS environments.  Nessie has a pluggable storage backend and comes pre-packaged with support for DynamoDB and local  storage.</p>"},{"location":"features/intro/#license-and-governance","title":"License and Governance","text":"<p>Nessie is Apache-Licensed and built in an open source, consensus-driven GitHub community.  Nessie was originally conceived and built by engineers at Dremio.</p>"},{"location":"features/intro/#getting-started","title":"Getting Started","text":"<ul> <li>Read more about Nessie transactions</li> <li>Get started with the Nessie quickstart.</li> </ul>"},{"location":"features/management/","title":"Management Services","text":"<p>Nessie can and needs to manage several operations within your data lake.</p> <p>Each management service can be scheduled and Nessie reports the outcome of each operation.</p>"},{"location":"features/management/#garbage-collection","title":"Garbage Collection","text":"<p>Since Nessie is maintaining many versions of metadata and data-pointers simultaneously, you must rely on Nessie to clean up old data. Users should run Nessie GC regularly.</p> <p>Nessie GC needs to know which content versions need to be retained. To identify this so called \u201clive\u201d content, Nessie GC uses some rules which are applied on each named reference. Those rules are described below.</p> <p>Nessie GC is composed of multiple phases: 1. Identify (or \u201cmark\u201d) phase: Inspects the Nessie repository to identify all commits and    content version (in Iceberg terms: a table\u2019s snapshot). These so-called \u201ccontent references\u201d are    stored as a live-content-set, ideally in a separate database (H2 or Postgres-compatible).    This phase requires access to the Nessie repository, but does not require access to the data lake. 2. Expire (\u201csweep\u201d) phase: Uses the actual table format (e.g. Iceberg) to map the content    references from a live-content-set to a set of file-references, which are then matched against    a recursive listing of all files for the respective tables. Files that are not contained in the    set of file-references are going to be deleted. Deletion either happens immediately or is    persisted in the live-content-set as a set of orphan files. 3. The delete phase can be split out of the expire phase, it basically means that orphan     files are first collected, so these can be inspected, and then explicitly deleted. </p> <p>All relevant operations required for Nessie GC can be run via the <code>nessie-gc</code> tool, which can be downloaded from the release page on GitHub.</p> <p>Info</p> <p>Currently the GC algorithm only works for Iceberg tables and a H2 or Postgres database is recommended as the storage for the live-content-sets.</p> <p>Info</p> <p>Information about the internals of Nessie GC can be found here.</p>"},{"location":"features/management/#nessie-gc-tool","title":"Nessie GC tool","text":"<p>It is recommended to run all Nessie GC phases via the Nessie GC command line tool <code>nessie-gc</code>, which can be downloaded from the release page on GitHub.</p> <p>The Nessie GC tool comes as an uber-jar packaged with everything you need to run Nessie GC against a data lake using Iceberg.</p> <p>Note</p> <p>Use <code>nessie-gc help</code> to get a list of commands supported by the Nessie GC tool.</p>"},{"location":"features/management/#setting-up-the-database-for-nessie-gc","title":"Setting up the database for Nessie GC","text":"<p>You can either create the tables manually, use the DDL statements emitted by <code>nessie-gc create-sql-schema</code> as a template that can be enriched with database specific optimizations.</p> <p>Or you let the Nessie GC tool create the schema in your existing database, for example like this: <pre><code>nessie-gc create-sql-schema \\\n--jdbc-url jdbc:postgresql://127.0.0.1:5432/nessie_gc \\\n--jdbc-user pguser \\\n--jdbc-password mysecretpassword\n</code></pre></p> <p>Note</p> <p>Instead of specifying the JDBC parameters, especially the password, everytime on the command line, most command line option values can be specified via environment variables. The naming scheme follows this Java pseudo-code: <code>\"NESSIE_GC_\" + optionName.substring(2).replace('-', '_').toUpperCase()</code>. For example, the <code>--jdbc-password</code> command line option\u2019s value is taken from the environment variable <code>NESSIE_GC_JDBC_PASSWORD</code>.</p> <p>Note</p> <p>The availability of the database for Nessie GC is not critical for Nessie itself. Nessie does not require anything from Nessie GC to continue to work.</p> <p>Note</p> <p>For small, experimental Nessie repositories, that do not access any production data lake information, you can experiment with the <code>nessie-gc gc</code> command, which also accepts the <code>--inmemory</code> command line option, which does not require an external database for live-content-set persistence. In fact, the <code>--inmemory</code> option does not persist anything and keeps the live-content-set information in memory. The <code>gc</code> command runs the identity, expire and delete phases sequentially.</p>"},{"location":"features/management/#live-content-sets","title":"Live content sets","text":"<p>All Nessie GC operations work on exactly one so-called \u201clive content set\u201d. Each live content set is composed of:</p> <ul> <li>Unique ID each live-content-set is identified by a UUID. The <code>nessie-gc mark-live</code> command   emits the ID of the live-content-set to the console, but it\u2019s recommended to write the new   live-content-set ID to a file using the <code>--write-live-set-id-to</code> option. Other commands that   work on a live-content-set allow reading the ID of the live-content-set using the command line   option <code>--read-live-set-id-from</code>.</li> <li>Status tracks the state and/or progress of a live-content-set and is used to know whether   the identify and sweep phases started resp. ended and whether those finished successfully   or with an error. If, for example, the identify phase did not finish successfully, the sweep   phase cannot be started. A summary of the error message is stored with the live-content-set.</li> <li>Timestamps of when the identify and expire phases started and completed.</li> <li>collection of content-IDs as the result of the identify phase</li> <li>set of content-references for each content-ID as the result of the identify phase</li> <li>set of base-table-locations as the result of the sweep phase</li> <li>set of file-references to be deleted as the result of the identify phase, if Nessie GC   was told to defer deletes using the <code>--defer-deletes</code> command line option.</li> </ul> <p>A couple of <code>nessie-gc</code> commands allow the listing of all and inspection of individual live-content-sets. Those are:</p> <ul> <li><code>list</code> lists all live-content-sets, starting with the most recent live-set.</li> <li><code>show</code> shows information about one live-content-set, optionally with details about the content   references or base-locations or deferred deletes.</li> <li><code>list-deferred</code> to show the file-references from a sweep phase with the <code>--defer-deletes</code>   option.</li> <li><code>deferred-deletes</code> to delete the files referenced by file-references collected during a sweep   phase with the <code>--defer-deletes</code> option.</li> <li><code>delete</code> deletes a live-content-set.</li> </ul>"},{"location":"features/management/#running-the-mark-or-identify-phase-identifying-live-content-references","title":"Running the mark (or identify) phase: Identifying live content references","text":"<p>The mark or identify phase is run via the <code>mark-live</code> (or <code>identify</code> as an alias) nessie-gc command.</p> <pre><code>nessie-gc mark-live \\\n--jdbc... # JDBC settings omitted in this example\n</code></pre> <p>It will walk the commits in all named references, and collect all content-references from the visited Nessie commits. So called \u201ccut off policies\u201d define, when the mark phase should stop walking the commit log for a named reference. The default \u201ccut off policy\u201d is <code>NONE</code>, which means that all Nessie commits and therefore all contents in the named references using the <code>NONE</code> policy are considered live.</p> <p>Note</p> <p>Since the mark phase requires access to Nessie, make sure to use the <code>--uri</code> command line option to configure the Nessie endpoint and the <code>--nessie-option</code> command line option to configure additional Nessie client parameters, for example a bearer token. The Nessie repository is never modified by Nessie GC.</p> <p>Note</p> <p>The mark phase does not access the data lake nor does it use Iceberg.</p>"},{"location":"features/management/#cut-off-policies","title":"Cut off policies","text":"<p>Nessie GC supports three types of cut off policies:</p> <ul> <li><code>NONE</code>, not explicitly selectable via the CLI, it is the implicit default when a named reference   has no matching policy. It means, there is no cut-off time, everything in the named reference is   considered \u201clive\u201d.</li> <li>by number of commits: The given number of most recent commits are considered live.</li> <li>by cut off timestamp: All commits that are younger than the configured timestamp are   considered live.</li> <li>by cut off duration: Similar to cut off timestamp, all commits younger <code>now - duration</code> are   considered live. In the Nessie GC tool, a duration is always converted to a timestamp using a   common reference timestamp.</li> </ul> <p>Relevant command line options for <code>nessie-gc mark-live</code> (alias <code>nessie-gc identify</code>):</p> <ul> <li><code>--cutoff reference-name-regex=cut-off-policy</code> the specified <code>cut-off-policy</code> is applied to all   named references that match the given reference name regular expression.</li> <li><code>--cutoff-ref-time</code> Defaults to \u201cnow\u201d, but can also be configured to another timestamp, if   necessary.</li> </ul> <p>Cut-off policies are parsed using the following logic and precedence:</p> <ol> <li>An integer number is translated to the cut-off-policy using number of commits.</li> <li>The string representation of a <code>java.time.Duration</code> is translated to a duration. Java durations    string representation starts with <code>P</code> followed by the duration value. Examples:<ul> <li><code>P10D</code> means 10 days</li> <li><code>PT10H</code> means 10 hours</li> </ul> </li> <li>The string representation of a <code>java.time.format.DateTimeFormatter.ISO_INSTANT</code> is translated    to an exact cut-off-timestamp. Example using UTC: <code>2011-12-03T10:15:30Z</code></li> </ol> <p>Note</p> <p>Nessie GC\u2019s mark phase processes up to 4 named references in parallel. This setting can be changed using the <code>--identify-parallelism</code> command line option.</p>"},{"location":"features/management/#running-the-sweep-or-expire-phase-identifying-live-content-references","title":"Running the sweep (or expire) phase: Identifying live content references","text":"<p>Nessie GC\u2019s sweep phase uses the the actual table format, for example Iceberg, to map the collected live content references to live file references. The sweep phase operates on each content-ID. So it collects the live file references for each content ID. Those file references refer to Iceberg assets:</p> <ul> <li>metadata files</li> <li>manifest lists</li> <li>manifest files</li> <li>data files</li> </ul> <p>After the expire phase identified the live file references for a content-ID, it collects all files in the base table locations. While traversing the base locations, it collects the files that are definitely not live file references. Those non-live file references are then deleted, aka immediate orphan files deletion.</p> <p>As an alternative, the expire phase can just record the orphan files instead of immediately deleting those. This is called deferred deletion in Nessie GC.</p> <p>Configuration options for Iceberg and Hadoop can be specified using the <code>--iceberg</code> and <code>--hadoop</code> options. Examples: <code>--iceberg s3.access-key-id=S3_ACCESS_KEY</code> and <code>--hadoop fs.s3a.access.key=S3_ACCESS_KEY</code>.</p> <p>Example of running the expire command follows.</p> <pre><code>nessie-gc expire --live-set-id 0baaa1ff-90db-4ee5-b6d2-b60aea148c76 \\\n--jdbc... # JDBC settings omitted in this example\n</code></pre> <p>Example of running an expire with deferred deletion:</p> <pre><code>nessie-gc expire --live-set-id 0baaa1ff-90db-4ee5-b6d2-b60aea148c76 \\\n--defer-deletes \\\n--jdbc... # JDBC settings omitted in this example\n\n# You can inspect the files to be deleted this way ...\nnessie-gc list-deferred --live-set-id 0baaa1ff-90db-4ee5-b6d2-b60aea148c76 \\\n--jdbc... # JDBC settings omitted in this example\n\n# ... or this way\nnessie-gc show --live-set-id 0baaa1ff-90db-4ee5-b6d2-b60aea148c76 \\\n--with-deferred-deletes \\\n--jdbc... # JDBC settings omitted in this example\n\n# Now perform the file deletions\nnessie-gc deferred-deletes --live-set-id 0baaa1ff-90db-4ee5-b6d2-b60aea148c76 \\\n--jdbc... # JDBC settings omitted in this example\n</code></pre> <p>Note</p> <p>The sweep phase does not access Nessie. It does use Iceberg and accesses the data lake. If deferred deletion is requested, no files will be deleted.</p> <p>Note</p> <p>Since data lakes can easily contain a huge amount of files, the expire phase does not remember every live data file (see the Iceberg assets above) individually, but uses a probabilistic data structure (bloom filter). The default settings expect, for each content ID, 1,000,000 files and uses a false-positive-probability of 0.0001 (those defaults may change, but can be inspected with <code>nessie-gc help expire</code>). The expire phase will abort, if it hits a content-ID that massively exceeds the configured false-positive-probability, because it hits way more live file references.</p> <p>Note</p> <p>Nessie GC\u2019s expire phase processes up to 4 content-IDs in parallel. This setting can be changed using the <code>--expiry-parallelism</code> command line option.</p>"},{"location":"features/management/#recommended-production-setup-for-nessie-gc","title":"Recommended production setup for Nessie GC","text":"<p>It is highly recommended to use a Postgres or compatible or H2 database to persist the live-content-sets. Running the different Nessie GC phases separately is only supported with such a database.</p> <p>Make yourself familiar with all the commands offered by <code>nessie-gc</code> and the available command line options. It is safe to run <code>nessie-gc mark-live</code>, because it is non-destructive. Use <code>nessie-gc show --with-content-references</code> to inspect the collected live content references.</p> <p>Use deferred deletion and inspect the files to be deleted before running <code>nessie-gc deferred-deletes</code>.</p> <p>Use separate invocations for the mark, the sweep and the deferred deletion phases.</p>"},{"location":"features/management/#all-in-one","title":"All-in-one","text":"<p>As briefly mentioned above, the <code>nessie-gc gc</code> command can be used to combine the mark and sweep phases, optionally using the <code>--inmemory</code> option.</p> <p><code>gc</code> is equivalent to first running <code>identify</code> and then <code>expire</code>, and it takes the same set of command line options. </p>"},{"location":"features/management/#troubleshooting","title":"Troubleshooting","text":"<p>Nessie GC tool emits the log output at <code>INFO</code> level. The default log level for the console can be overridden using the Java system property <code>log.level.console</code>, for example using the following command. So instead of directly running <code>nessie-gc</code>, just run it as an executable jar.</p> <pre><code>java -Dlog.level.console=DEBUG -jar $(which nessie-gc) </code></pre>"},{"location":"features/metadata_authorization/","title":"Metadata authorization","text":""},{"location":"features/metadata_authorization/#authorization-scope","title":"Authorization scope","text":"<p>It is important to note that Nessie does not store data directly but only data location and other metadata. </p> <p>As a consequence, the Nessie authorization layer can only really control access to metadata, but might not prevent data itself to be accessed directly without interacting with Nessie.  It is then expected that another system can control access to data itself to make sure unauthorized access isn\u2019t possible.</p> <p>The same is true for access to historical data, which is one of Nessie\u2019s main features. For example, while it might seem safe committing a change that removes undesired sensitive data and restricting access to only the latest version of the dataset, the truth is that the sensitive data may still exist on the data lake and be accessed by other means  (similar to how redacting a PDF by adding black boxes on top of sensitive information does not prevent people to read what is written beneath in most cases).  The only safe way to remove this data is to remove it from the table (e.g. via <code>DELETE</code> statements) and then run the Garbage Collection algorithm to ensure the data has been removed from Nessie history and deleted on the data lake.</p>"},{"location":"features/metadata_authorization/#stories","title":"Stories","text":"<p>Here\u2019s a list of common authorization scenarios:</p> <ul> <li>Alice attempts to execute a query against the table <code>Foo</code> on branch <code>prod</code>. As she has read access to the table on this branch, Nessie allows the execution engine to get the table details.</li> <li>Bob attempts to execute a query against the table <code>Foo</code> on branch <code>prod</code>. However, Bob does not have read access to the table. Nessie returns an authorization error, and the execution engine refuses to execute the query.</li> <li>Carol has access to the content on branch <code>prod</code>, but not to the table <code>Foo</code> on this branch. Carol creates a new reference named <code>carol-branch</code> with the same hash as <code>prod</code>, and attempts to change permissions on table <code>Foo</code>. However, request is denied and Carol cannot access the content of <code>Foo</code>.</li> <li>Dave has access to the content on branch <code>prod</code>, and wants to update the content of the table <code>Foo</code>. He creates a new reference named <code>dave-experiment</code>, and executes several queries against this branch to modify table <code>Foo</code>. Each modification is a commit done against <code>dave-experiment</code> branch which is approved by the Nessie server. When all the desired modifications are done, Dave attempts to merge the changes back to the <code>prod</code> branch. However, Dave doesn\u2019t have the rights to modify the <code>prod</code> branch, causing Nessie to deny the request.</li> </ul>"},{"location":"features/metadata_authorization/#access-control-model","title":"Access control model","text":"<p>Any object in Nessie can be designated by a pair of coordinates (reference, path), therefore access control is also designed around those two concepts.</p>"},{"location":"features/metadata_authorization/#access-control-against-references","title":"Access control against references","text":"<p>References can be designated by their name (branches and tags) and there are several operations that can be exercised:</p> <ul> <li>view/list available references</li> <li>create a new named reference</li> <li>assign a hash to a reference</li> <li>delete a reference</li> <li>list objects present in the tree</li> <li>read objects content in the tree</li> <li>commit a change against the reference</li> </ul> <p>Note that a user needs to be able to view a reference in order to list objects on that reference.</p>"},{"location":"features/metadata_authorization/#access-control-against-paths","title":"Access control against paths","text":"<p>For a specific reference, an entity is designated by its path which is why a simple way of performing access control can be done by applying restrictions on path.</p> <p>Several operations can be exercised against an entity:</p> <ul> <li>create a new entity</li> <li>delete an entity</li> <li>update entity\u2019s content</li> </ul> <p>Note that those operations combine themselves with the reference operations. For example to actually be able to update the content of an entity, user needs both permission to do the update AND to commit the change against the reference where the change will be stored</p>"},{"location":"features/metadata_authorization/#service-provider-interface","title":"Service Provider Interface","text":"<p>The SPI is named AccessChecker and uses AccessContext, which carries information about the overall context of the operation. Implementers of <code>AccessChecker</code> are completely free to define their own way of creating/updating/checking authorization rules.</p>"},{"location":"features/metadata_authorization/#contentid-usage","title":"ContentId Usage","text":"<p>Note that there is a <code>contentId</code> parameter in some methods of the AccessChecker, which allows checking specific rules for a given entity at a given point in time. The <code>contentId</code> parameter refers to the ID of a <code>Content</code> object and its contract is defined here.</p> <p>One can think of this similar to how permissions are defined in Google Docs. There are some permissions that are specific to the parent folder and to the doc itself. When a Doc is moved from one folder to another, it inherits the permissions of the parent folder. However, the doc-specific permissions are carried over with the doc and still apply. The same is true in the context of entities. There are some rules that apply to an entity in a global fashion, and then there\u2019s the possibility to define rules specific to the <code>contentId</code> of an entity.</p>"},{"location":"features/metadata_authorization/#reference-implementation-for-metadata-authorization","title":"Reference implementation for Metadata Authorization","text":"<p>The reference implementation allows defining authorization rules via application.properties and is therefore dependent on Quarkus. Nessie\u2019s metadata authorization can be enabled via <code>nessie.server.authorization.enabled=true</code>.</p>"},{"location":"features/metadata_authorization/#authorization-rules","title":"Authorization Rules","text":"<p>Authorization rule definitions are using a Common Expression Language (CEL) expression (an intro to CEL can be found at https://github.com/google/cel-spec/blob/master/doc/intro.md).</p> <p>Rule definitions are of the form <code>nessie.server.authorization.rules.&lt;ruleId&gt;=&lt;rule_expression&gt;</code>, where <code>&lt;ruleId&gt;</code> is a unique identifier for the rule.</p> <p><code>&lt;rule_expression&gt;</code> is basically a CEL expression string, which allows lots of flexibility on a given set of variables. </p> <p>Available variables within the <code>&lt;rule_expression&gt;</code> are: \u2018op\u2019 / \u2018role\u2019 / \u2018ref\u2019 / \u2018path\u2019.</p> <ul> <li>The \u2018op\u2019 variable in the <code>&lt;rule_expression&gt;</code> refers to the type of operation can be any of the following.   See BatchAccessChecker   and Check types.</li> <li><code>VIEW_REFERENCE</code></li> <li><code>CREATE_REFERENCE</code></li> <li><code>DELETE_REFERENCE</code></li> <li><code>READ_ENTRIES</code></li> <li><code>READ_CONTENT_KEY</code></li> <li><code>LIST_COMMIT_LOG</code></li> <li><code>COMMIT_CHANGE_AGAINST_REFERENCE</code></li> <li><code>ASSIGN_REFERENCE_TO_HASH</code></li> <li><code>UPDATE_ENTITY</code></li> <li><code>READ_ENTITY_VALUE</code></li> <li><code>DELETE_ENTITY</code></li> <li><code>VIEW_REFLOG</code>.</li> <li>The \u2018role\u2019 refers to the user\u2019s role and can be any string.</li> <li>The \u2018ref\u2019 refers to a string representing a branch/tag name or <code>DETATCHED</code> for direct access to a commit id.</li> <li>The \u2018path\u2019 refers to the content key for the contents of an object and can be any string</li> </ul> <p>Since all available authorization rule variables are strings, the relevant CEL-specific things that are worth mentioning are shown below:</p> <ul> <li>equality and inequality</li> <li>regular expressions</li> <li>operators &amp; functions</li> </ul>"},{"location":"features/metadata_authorization/#example-authorization-rules","title":"Example authorization rules","text":"<p>Below are some basic examples that show how to give a permission for a particular operation. In reality, one would want to keep the number of authorization rules for a single user/role low and grant permissions for all required operations through as few rules as possible.</p> <ul> <li> <p>allows viewing the branch/tag starting with the name <code>allowedBranch</code> for the role that starts with the name <code>test_</code>: <pre><code>nessie.server.authorization.rules.allow_branch_listing=\\\n  op=='VIEW_REFERENCE' &amp;&amp; role.startsWith('test_') &amp;&amp; ref.startsWith('allowedBranch')\n</code></pre></p> </li> <li> <p>allows creating branches/tags that match the regex <code>.*allowedBranch.*</code> for the role <code>test_user</code>: <pre><code>nessie.server.authorization.rules.allow_branch_creation=\\\n  op=='CREATE_REFERENCE' &amp;&amp; role=='test_user' &amp;&amp; ref.matches('.*allowedBranch.*')\n</code></pre></p> </li> <li> <p>allows deleting branches/tags that end with <code>allowedBranch</code> for the role named <code>test_user123</code>: <pre><code>nessie.server.authorization.rules.allow_branch_deletion=\\\n  op in ['VIEW_REFERENCE', 'DELETE_REFERENCE'] &amp;&amp; role=='test_user123' &amp;&amp; ref.endsWith('allowedBranch')\n</code></pre></p> </li> <li> <p>allows listing the commit log for all branches/tags starting with <code>dev</code>: <pre><code>nessie.server.authorization.rules.allow_listing_commitlog=\\\n  op in ['VIEW_REFERENCE', 'LIST_COMMIT_LOG'] &amp;&amp; ref.startsWith('dev')\n</code></pre></p> </li> <li> <p>allows reading the entity value where teh <code>path</code> starts with <code>allowed.</code> for the role <code>test_user</code>: <pre><code>nessie.server.authorization.rules.allow_reading_entity_value=\\\n  op in ['VIEW_REFERENCE', 'READ_ENTITY_VALUE'] &amp;&amp; role=='test_user' &amp;&amp; path.startsWith('allowed.')\n</code></pre></p> </li> <li> <p>allows deleting the entity where the <code>path</code> starts with <code>dev.</code> for all roles: <pre><code>nessie.server.authorization.rules.allow_deleting_entity=\\\n  op in ['VIEW_REFERENCE', 'DELETE_ENTITY'] &amp;&amp; path.startsWith('dev.')\n</code></pre></p> </li> <li> <p>allows listing reflog for the role <code>admin_user</code>: <pre><code>nessie.server.authorization.rules.allow_listing_reflog=\\\n  op=='VIEW_REFLOG' &amp;&amp; role=='admin_user'\n</code></pre></p> </li> </ul>"},{"location":"features/metadata_authorization/#example-authorization-rules-from-stories-section","title":"Example authorization rules from Stories section","text":"<p>As mentioned in the Stories section, a few common scenarios that are possible are:</p> <ul> <li>Alice attempts to execute a query against the table <code>Foo</code> on branch <code>prod</code>. As she has read access to the table on this branch, Nessie allows the execution engine to get the table details.</li> <li>Bob attempts to execute a query against the table <code>Foo</code> on branch <code>prod</code>. However, Bob does not have read access to the table. Nessie returns an authorization error, and the execution engine refuses to execute the query.</li> <li>Carol has access to the content on branch <code>prod</code>, but not to the table <code>Foo</code> on this branch. Carol creates a new reference named <code>carol-branch</code> with the same hash as <code>prod</code>, and attempts to change permissions on table <code>Foo</code>. However, request is denied and Carol cannot access the content of <code>Foo</code>.</li> <li>Dave has access to the content on branch <code>prod</code>, and wants to update the content of the table <code>Foo</code>. He creates a new reference named <code>dave-experiment</code>, and executes several queries against this branch to modify table <code>Foo</code>. Each modification is a commit done against <code>dave-experiment</code> branch which is approved by the Nessie server. When all the desired modifications are done, Dave attempts to merge the changes back to the <code>prod</code> branch. However, Dave doesn\u2019t have the rights to modify the <code>prod</code> branch, causing Nessie to deny the request.</li> </ul> <p>Below are the respective authorization rules for these scenarios: <pre><code># read access for all on the prod branch\nnessie.server.authorization.rules.prod=\\\n  op in ['VIEW_REFERENCE'] &amp;&amp; ref=='prod' &amp;&amp; role in ['Alice', 'Bob', 'Carol', 'Dave']\n\n# alice &amp; dave can read Foo  \nnessie.server.authorization.rules.reading_foo_on_prod=\\\n  op in ['READ_ENTITY_VALUE'] &amp;&amp; ref=='prod' &amp;&amp; path=='Foo' &amp;&amp; role in ['Alice', 'Dave']\n\n# specific rules for carol on her branch\nnessie.server.authorization.rules.carol-branch=\\\n  op in ['VIEW_REFERENCE', 'CREATE_REFERENCE', 'DELETE_REFERENCE', 'COMMIT_CHANGE_AGAINST_REFERENCE'] &amp;&amp; ref=='carol-branch' &amp;&amp; role=='Carol'\n\n# specific rules for dave on his branch\nnessie.server.authorization.rules.dave-experiment=\\\n  op in ['VIEW_REFERENCE', 'CREATE_REFERENCE', 'DELETE_REFERENCE', 'COMMIT_CHANGE_AGAINST_REFERENCE'] &amp;&amp; ref=='dave-experiment' &amp;&amp; role=='Dave'\n\n# bob can read/update/delete BobsBar only\nnessie.server.authorization.rules.bob=\\\n  op in ['READ_ENTITY_VALUE', 'UPDATE_ENTITY', 'DELETE_ENTITY'] &amp;&amp; path=='BobsBar` &amp;&amp; role=='Bob')\n\n# carol can read/update/delete CarolsSecret\nnessie.server.authorization.rules.carol=\\\n  op in ['READ_ENTITY_VALUE', 'UPDATE_ENTITY', 'DELETE_ENTITY'] &amp;&amp; path=='CarolsSecret` &amp;&amp; role=='Alice')\n\n# dave can read/update/delete DavesHiddenX\nnessie.server.authorization.rules.dave=\\\n  op in ['READ_ENTITY_VALUE', 'UPDATE_ENTITY', 'DELETE_ENTITY'] &amp;&amp; path=='DavesHiddenX` &amp;&amp; role=='Dave')\n</code></pre></p>"},{"location":"features/security/","title":"Security","text":""},{"location":"features/security/#authentication","title":"Authentication","text":"<p>Nessie currently supports 3 security modes:</p> <ul> <li>No Security</li> <li>Open Id Connect</li> <li>AWS IAM Roles (limited to API calls, UI not supported)</li> </ul>"},{"location":"features/security/#authorization","title":"Authorization","text":"<p>Nessie authorization can only be done externally at the moment. However, because of  the way that the REST APIs are defined, many operations can be controlled via a layer  7 firewall so that users and systems can be controlled depending on what read/write  and types of operations should be allowed. This works especially well with Nessie run  as an AWS Lambda using API gateway policies.</p>"},{"location":"features/security/#metadata-authorization","title":"Metadata authorization","text":"<p>Nessie supports authorization on metadata. Details are described in the Metadata Authorization section.</p>"},{"location":"features/transactions/","title":"Transactions","text":"<p>Nessie extends existing table formats to provide a single serial view of transaction  history. This is enabled across an unlimited number of tables. A user can view a commit log either  through the UI or by using the Nessie CLI. Operations against each table are listed along  with timestamp, user and helpful information about the operation. </p>"},{"location":"features/transactions/#cross-table-transactions","title":"Cross-Table Transactions","text":"<p>Nessie is the first technology to provide an open facility for cross-table transactions  within your data lake. There are two ways that this can be accomplished:</p> <ul> <li>Via Branches: Because Nessie allows branches to be created and then reassigned, a    sequence of commits on one branch can be exposed as a single consistent view to other    users through the use of a merge operation. This allows use of systems that don\u2019t have internal    cross-table transaction support to still control the visibility of connected changes. </li> <li>Single Commits: Nessie allows a single commit operation to include many object changes    simultaneously. While Nessie operations internally use this capability, tools will need to be enhanced to take advantage of this powerful    new capability.</li> </ul>"},{"location":"features/transactions/#start-transaction-commit","title":"START TRANSACTION.. COMMIT","text":"<p>The Nessie community is working with tool developers to introduce traditional data  warehouse cross-table transactions. Nessie\u2019s catalog implementations already support  the underlying capability of multi-table transactions.</p>"},{"location":"features/transactions/#isolation-levels","title":"Isolation Levels","text":"<p>Nessie exposes APIs to support three-levels of isolation: Read Committed,  Repeated Read and Serialized. By supporting the recording of reads as part of a commit (via the Unchanged  operation), tools can introduce full per operation serialized isolation. This is a  transaction mode that has been traditionally limited to OLTP systems and unavailable  to OLAP systems and data warehouses1. </p> <p>Info</p> <p>While Nessie exposes the necessary primitives to support configurable isolation, work still needs to be  done with tool developers to ensure those tools expose these capabilities. As those  integrations progress, we\u2019ll include more information about them here. </p> <p>At the moment, most tools operate  in either Read Committed (Iceberg when calling refresh, Delta Lake) or Repeated Read (HMS  Bridge operations, Iceberg when avoiding calls to refresh).</p>"},{"location":"features/transactions/#read-committed-optimistic","title":"Read Committed (Optimistic)","text":"Read Each time metadata for a table is retrieved, the latest version of that ref for the that current branch is exposed. Ownership A transaction only needs to be created on the client. There is not concept of a long-lived transaction. Write Safe writes are allowed. How Client goes to server to retrieve latest version of data for each operation"},{"location":"features/transactions/#repeated-read-optimistic","title":"Repeated Read (Optimistic)","text":"Read When a transaction is started, a ref is turned into a specific commit id. All metadata retrieved is locked to this hash or later, as long as future hashes have not changed any table already read. Ownership A transaction only needs to be created on the client. There is no concept of a long-lived transaction on the server. Write Safe writes are allowed. Unsafe writes fail. How Client resolves commit hash on first read and uses that for all subsequent operations. <p>Note: this is stricter than the formal definition of repeatable read since that will allow new records to also be viewed on a second operation within the same transaction. However, both implementations are of similar complexity and a stricter form of repeated read seems easier to understand.</p>"},{"location":"features/transactions/#serializable-optimistic","title":"Serializable (Optimistic)","text":"Read When a transaction is started, a ref is turned into a specific commit id. During the transaction, a recording of all read tables is recorded. Ownership A transaction only needs to be created on the client. There is no concept of a long-lived transaction on the server. Write All tables touched as part of the read operations must be in the same state when the commit operation is attempted. If they are not, the write operation is rejected. This is done internally via the Unchanged operation. How Client resolves commit hash on first read and uses that for all subsequent operations. <p>Serializable transactions allow one to do guaranteed exactly once operations. For example-  move all this data from table1 to table2. At the end of this operation there is a guarantee  that any operations done against table1 will either show up in table2 or fail to apply  to table1 (true before &amp; after).</p>"},{"location":"features/transactions/#pessimistic-locking","title":"Pessimistic Locking","text":"<p>Currently, all three isolation models are supported only via optimistic  locking. In the future, it is likely that we will also add support for pessimistic  locking. To support pessimistic locking, transaction state must be held by the Nessie  service as opposed to Nessie clients requiring a more formal protocol around start  transaction, commit transaction with relevant timeouts, deadlock detection and  cancellation capabilities.</p>"},{"location":"features/transactions/#lock-coarseness-and-resolution","title":"Lock Coarseness and Resolution","text":"<p>Nessie maintains state and locks at table granularity. If a conflict is found at the  table level, Nessie will either reject the operation or delegate the operation to the  underlying table format to see if further conflict resolution can occur.</p> <ol> <li> <p>Delta Lake does support serializable isolation against a single table.  It does not support serializable across multiple tables.\u00a0\u21a9</p> </li> </ol>"},{"location":"guides/keycloak/","title":"Authentication with Keycloak","text":"<p>In this guide we walk through the process of configuring a Nessie Server to authenticate clients against  a local Keycloak server. Docker is use at the runtime environments for both servers.</p>"},{"location":"guides/keycloak/#setting-up-keycloak","title":"Setting up Keycloak","text":"<p>For the purposes of this guide we will only do use a simple Keycloak configuration, that is still sufficient to demonstrate how OpenID authentication works in Nessie servers.</p> <p>First, start a Keycloak container using its latest Docker image.</p> <pre><code>docker run -p 8080:8080 -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin \\\n--name keycloak quay.io/keycloak/keycloak:latest start-dev\n</code></pre> <p>Note the <code>admin</code> username and password. Those values will be required to log into the Keycloak Administration Console that should now be available at http://localhost:8080/auth/admin/</p> <p>The default realm is called <code>Master</code>. On the left-hand pane find the <code>Manage &gt; Users</code> page and click <code>Add User</code> on the right side of the (initially empty) users table.</p> <p>Enter the username \u201cnessie\u201d and click <code>Save</code>. Now, under the <code>Credentials</code> tab of the <code>nessie</code> user page set password to <code>nessie</code> and turn off the <code>Temporary</code> flag. Click <code>Set Password</code>. Be sure also to remove all the <code>Required User Actions</code> if any.</p> <p>For the sake of convenience let\u2019s increase the default token expiration time. Goto <code>Clients</code> &gt; <code>admin-cli</code> &gt; <code>Advanced Settings</code>. Set <code>Access Token Lifespan</code> to 1 day and click <code>Save</code>.</p> <p>Now we are ready to generate an <code>access_token</code> for the <code>nessie</code> user. Use the following command to obtain a token. Then, store it in the <code>NESSIE_AUTH_TOKEN</code> environment variable. It will be required to access Nessie APIs later.</p> Plain Command <pre><code>curl -X POST \\\nhttp://localhost:8080/auth/realms/master/protocol/openid-connect/token \\\n--user admin-cli:none \\\n-d 'username=nessie' \\\n-d 'password=nessie' \\\n-d 'grant_type=password'\n</code></pre> Bash <pre><code>export NESSIE_AUTH_TOKEN=$(curl -X POST \\\nhttp://localhost:8080/auth/realms/master/protocol/openid-connect/token \\\n--user admin-cli:none \\\n-d 'username=nessie' \\\n-d 'password=nessie' \\\n-d 'grant_type=password' |jq -r .access_token\n  )\n</code></pre> <p>Note: when using keycloak 17+ change the URL to <code>http://localhost:8080/realms/master/protocol/openid-connect/token</code></p>"},{"location":"guides/keycloak/#setting-up-nessie-server","title":"Setting up Nessie Server","text":"<p>Start the Nessie server container from the <code>projectnessie/nessie</code> Docker image in authenticated mode, using the Keycloak server for validating user credentials.</p> <pre><code>docker run -p 19120:19120 \\\n-e QUARKUS_OIDC_AUTH_SERVER_URL=http://localhost:8080/auth/realms/master \\\n-e QUARKUS_OIDC_CLIENT_ID=projectnessie \\\n-e NESSIE_SERVER_AUTHENTICATION_ENABLED=true \\\n--network host projectnessie/nessie:latest\n</code></pre> <p>Note: when using keycloak 17+ change the URL to <code>http://localhost:8080/realms/master/protocol/openid-connect/token</code></p> <p>Note: this example uses a snapshot build. When Nessie 1.0 is released, the <code>latest</code> stable image will be usable with the instructions from this guide.</p>"},{"location":"guides/keycloak/#using-nessie-cli","title":"Using Nessie CLI","text":"<p>Now that the Nessie server runs in authenticated mode with a Keycloak, clients have to provide credentials in the form of bearer authentication tokens. For example:</p> <pre><code>nessie --auth-token $NESSIE_AUTH_TOKEN remote show\n</code></pre> <p>Note: since the name of the <code>NESSIE_AUTH_TOKEN</code> variable matches Nessie CLI configuration naming conventions, the client can automatically find it in the environment, and it does not have to be specified as a command line option. All <code>nessie</code> CLI command will automatically use that token for authenticating their requests. For example:</p> <pre><code>nessie log\n</code></pre>"},{"location":"guides/spark-s3/","title":"Accessing data in S3 with Spark","text":"<p>In this guide we walk through the process of configuring an Apache Spark session to work  with data files stored in Amazon S3 and version history in a local Nessie Server.</p> <p>Docker is used at the runtime environments for Nessie. Spark is assumed to be installed locally.</p>"},{"location":"guides/spark-s3/#setting-up-nessie-server","title":"Setting up Nessie Server","text":"<p>Start the Nessie server container from the <code>projectnessie/nessie</code> Docker image in default mode.</p> <pre><code>docker run -p 19120:19120 projectnessie/nessie:latest\n</code></pre> <p>Note: this example will run the Nessie Server using in-memory storage for table metadata. If/when the container is deleted, Nessie data about table changes will be lost, yet the data files in S3 will remain.</p>"},{"location":"guides/spark-s3/#setting-up-spark-session","title":"Setting up Spark Session","text":"<p>Configure an AWS profile (e.g. called <code>demo</code>) in <code>~/.aws/credentials</code> (or other location appropriate for your OS) and export the profile name in the <code>AWS_PROFILE</code> environment variable. For example:</p> <pre><code>export AWS_PROFILE=demo\n</code></pre> <p>Create an S3 bucket of your own. This guide uses the bucket name <code>spark-demo1</code>.</p> <p>Start a Spark session:</p> <pre><code>spark-sql \\\n--packages \\\norg.apache.iceberg:iceberg-spark-runtime-3.2_2.12:0.13.1,\\\nsoftware.amazon.awssdk:bundle:2.17.178,\\\nsoftware.amazon.awssdk:url-connection-client:2.17.178 \\\n--conf spark.sql.extensions=org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions  \\\n--conf spark.sql.catalog.nessie=org.apache.iceberg.spark.SparkCatalog \\\n--conf spark.sql.catalog.nessie.warehouse=s3://spark-demo1 \\\n--conf spark.sql.catalog.nessie.catalog-impl=org.apache.iceberg.nessie.NessieCatalog \\\n--conf spark.sql.catalog.nessie.io-impl=org.apache.iceberg.aws.s3.S3FileIO \\\n--conf spark.sql.catalog.nessie.uri=http://localhost:19120/api/v1 \\\n--conf spark.sql.catalog.nessie.ref=main \\\n--conf spark.sql.catalog.nessie.cache-enabled=false\n</code></pre> <p>Note: <code>spark-demo1</code> is the name of the S3 bucket that will hold table data files.</p> <p>Note: the <code>--packages</code> option lists modules required for Iceberg to write data files into S3. Please refer to Iceberg documentation for the most up-to-date information on how to connect Iceberg to S3.</p> <p>Note: the word <code>nessie</code> in configuration property names is the name of the Nessie catalog in the Spark session. A different name can be chosen according the user\u2019s liking.</p> <p>Then, in <code>spark-sql</code> issue a <code>use</code> statement to make <code>nessie</code> the current catalog: <pre><code>spark-sql&gt; use nessie\n</code></pre></p> <p>This command will establish a connection to the Nessie Server. When it is done, it will be possible to create tables and run DML. For example:</p> <pre><code>spark-sql&gt; CREATE TABLE demo (id bigint, data string);\nTime taken: 1.615 seconds\nspark-sql&gt; show tables;\ndemo\nTime taken: 0.425 seconds, Fetched 1 row(s)\nspark-sql&gt; INSERT INTO demo (id, data) VALUES (1, 'a');\nTime taken: 4.017 seconds\nspark-sql&gt; SELECT * FROM demo;\n1   a\nTime taken: 3.225 seconds, Fetched 1 row(s)\n</code></pre> <p>Branches, merges and other git-like commands can be run as well, as explained in the  Getting Started guide. </p> <p>Note: The above example uses the <code>spark-sql</code> shell, but the same configuration options apply to <code>spark-shell</code>.</p>"},{"location":"guides/spark-s3/#authentication","title":"Authentication","text":"<p>This example uses implicit AWS authentication via credentials configured in a credentials file plus the <code>AWS_PROFILE</code> environment variable.</p> <p>The Nessie Server in this example does not require authentication.</p> <p>If the Nessie Server runs with authentication enabled, additional configuration parameters will be required in the Spark session. Please refer to the Authentication in Tools section for details.</p>"},{"location":"tables/","title":"Overview","text":"<p>Nessie is designed to work with table formats that support a write-once, immutable asset  and metadata model. These types of formats rely on a transaction arbitrator to decide  the order of operations within a table. Nessie developers have named this operation a \u201croot  pointer store\u201d (or RPS). This is because these formats all have the same need of  determining what is the \u201clatest\u201d version of data. This decision needs to be maintained  via a check-and-set operation about what the current state of a table is.</p>"},{"location":"tables/#root-pointer-store","title":"Root Pointer Store","text":"<p>Each table format provides at least one RPS facility. Existing RPS models include:</p> <ul> <li>RPS by convention: E.g. \u201conly one writer is allowed\u201d</li> <li>RPS by consistent fileSystem: E.g. one file can be created with a certain name</li> <li>RPS by external locking: E.g. calling Hive Metastore lock apis</li> </ul> <p>Nessie formalizes and extends the concept of an RPS. It adds two main types  of operations: coordination of multiple per-table root pointers and historical versioning  across changes. This allows users to combine the rich capabilities of existing table  formats with the Nessie capabilities around versioning and transactions.</p>"},{"location":"tables/#table-formats","title":"Table Formats","text":"<p>Nessie currently works with the following formats.</p> <ul> <li>Iceberg Tables</li> <li>Delta Lake Tables</li> </ul> <p>We expect that Nessie will continue to add table formats as more are created.</p>"},{"location":"tables/#iceberg-views","title":"Iceberg Views","text":"<p>In addition to table formats, Nessie also supports storing Iceberg views within the Nessie  repository. This allows tools working in tandem with Nessie to provide very powerful versioned,  semantic-layering system. See more in our documentation on Iceberg Views.</p>"},{"location":"tables/#other-object-types","title":"Other Object Types","text":"<p>There has been discussion about adding additional types of objects to Nessie for the  purpose of creating a consistent repository between input assets (jobs, models, etc.)  and output assets. This is something that will be evaluated based on demand. There are  currently three options being considered: </p> <ul> <li>more structured object types (such as Spark job)</li> <li>blob types</li> <li>support for git sub-modules (where Nessie offers a new object type that refers to a particular commit within a git repository)</li> </ul> <p>If you have more thoughts on this, please provide feedback on the mailing list.</p>"},{"location":"tables/deltalake/","title":"Delta Lake","text":"<p>Delta Lake is a table format open-sourced under the Apache License. It provides several benefits including:</p> <ul> <li>Single table ACID transactions</li> <li>Scalable metadata</li> <li>Appends, deletes, updates and merges via file re-statements</li> </ul> <p>Delta Lake is relatively Spark-centric. It does expose tables via manifests for tools  that are not Delta Lake enabled and there  are libraries for other tools1 but the  core library relies heavily on Spark.</p> <p>When using Nessie as the backing store for Delta Lake there are no longer restrictions on which types of filesystems/blob stores can be written to. When using Nessie you can write to Delta Lake regardless of the filesystem or number  of writers.</p>"},{"location":"tables/deltalake/#client-integration-points","title":"Client Integration Points","text":"<p>Nessie provides a custom LogStore implementation for Delta Lake. Additionally, Nessie  currently requires a small change to core Delta Lake code to enable use of Nessie.  Without Nessie, Delta Lake normally maintains a single consistent version history through  the use of a custom naming scheme within a known directory. While this works for one  version history, with multiple additional work is required. As such, Nessie introduces  a new abstraction that allows multiple file naming schemes thus enabling  multiple version of the same dataset (with separate histories) to exist simultaneously.  This is done by adding an extension point to the <code>LogFileHandler</code> interface.  </p>"},{"location":"tables/deltalake/#server-integration-points","title":"Server Integration Points","text":"<p>There is a plan for Nessie to run table  management tasks related to Delta Lake for manifest generation. This would expose manifests  for selected branches and or tags that are maintained as references in HMS.  This would target situations where the consumption tool doesn\u2019t have Delta Lake and Nessie libraries.  For example, this would enable AWS Athena to consume Nessie-versioned Delta Lake tables via AWS Glue.</p> <ol> <li> <p>These libraries look to be unmaintained and leverage old versions of Delta Lake.\u00a0\u21a9</p> </li> </ol>"},{"location":"tables/iceberg/","title":"Apache Iceberg","text":"<p>Apache Iceberg is an Apache Software Foundation project that provides a rich, relatively new table format. It provides:</p> <ul> <li>Single table ACID transactions</li> <li>Scalable metadata</li> <li>Appends via file addition</li> <li>Updates, deletes and merges via single record operations</li> </ul>"},{"location":"tables/iceberg/#iceberg-extension-points","title":"Iceberg Extension Points","text":"<p>Iceberg exposes two primary classes for working with datasets. These are Catalog and TableOperations. Nessie implements each. These classes are available in the Iceberg source code and are available directly in Iceberg releases (eg <code>spark-runtime</code>, <code>spark3-runtime</code>, <code>flink-runtime</code>).</p>"},{"location":"tables/iceberg/#iceberg-snapshots","title":"Iceberg Snapshots","text":"<p>Iceberg supports the concept of snapshots. Snapshots are point in time versions of a table and are managed as part of each commit operation. Snapshots are limited to single table versioning. Nessie versions and commits provide a broader set of snapshot capabilities as they support multiple tables. Nessie is happy to coexist with Iceberg Snapshots. When working with Nessie, Iceberg snapshots will also be versioned along the rest of Iceberg metadata within the Nessie commit model.</p>"},{"location":"tables/iceberg/#automatic-snapshot-import","title":"Automatic Snapshot Import","text":"<p>We are exploring the creation of a tool where a user can import table snapshots across multiple Iceberg tables into a single Nessie repository to capture historical data snapshots (interleaved across time).</p>"},{"location":"tables/views/","title":"Apache Iceberg Views","text":"<p>Nessie supports versioning Iceberg views. A view is composed of the following properties:</p> <ul> <li>Metadata Location</li> <li>Version ID</li> <li>Schema ID</li> <li>SQL Text</li> <li>Dialect (such as Hive, Spark, Dremio, Presto) </li> </ul> <p>This enables Iceberg views to be versioned along with underlying datasets to provide a  complete place for logical and physical experimentation. Because SQL dialects differ  by system, Nessie does not parse or understand SQL. It relies on the creator of SQL statements  to validate the provided SQL before being stored in Nessie.</p> <p>Additional information about Iceberg Views can be found in the View Spec</p> <p>Info</p> <p>While Nessie can already store Iceberg Views, further work needs to be done in existing  systems to fully expose this functionality.</p>"},{"location":"tools/","title":"Overview","text":"<p>Nessie is focused on working with the widest range of tools possible. If a tool creates  or reads data, Nessie seeks to work with it. Current Nessie integrations/tools include  the following:</p> <ul> <li> <p>Iceberg Integration</p> <ul> <li>Spark via Iceberg</li> <li>Flink via Iceberg</li> <li>Hive via Iceberg</li> </ul> </li> <li> <p>Delta Lake Integration</p> <ul> <li>Spark via Delta Lake</li> </ul> </li> <li> <p>Nessie CLI</p> </li> <li>Nessie Web UI</li> <li>Authentication in Tools</li> <li>Nessie Spark SQL Extensions</li> </ul>"},{"location":"tools/#feature-matrix","title":"Feature Matrix","text":"Spark 2 1 Spark 32 Nessie CLI Flink Read Default Branch Read Any Branch/Tag/Hash Write Default Branch Write Any Branch/Tag/Hash Create Branch Create Tag Iceberg Tables Delta Lake Tables"},{"location":"tools/#demos","title":"Demos","text":"<p>The Nessie Demos GitHub repository contains a set of demos that help users understand how Nessie works.</p> <ol> <li> <p>Spark 2 currently only supports access via the Dataframe API due to weak generic  catalog support.\u00a0\u21a9</p> </li> <li> <p>Spark 3 supports both SQL and dataframe access. Consumption can be done via existing  Iceberg and Delta Lake catalogs with Nessie extensions or through the Nessie Catalog,  which currently exposes both of these formats.\u00a0\u21a9</p> </li> </ol>"},{"location":"tools/auth_config/","title":"Authentication in Tools","text":"<p>This content of this page has been moved to here. </p>"},{"location":"tools/cli/","title":"Nessie CLI","text":"<p>The Nessie CLI is an easy way to get started with Nessie. It supports multiple branch  and tag management capabilities. This is installed as <code>pynessie</code> via <code>pip install pynessie</code>. Additional information about <code>pynessie</code> and release notes can be found at the PyPI site. </p>"},{"location":"tools/cli/#installation","title":"Installation","text":"<pre><code># python 3 required\npip install pynessie\n</code></pre>"},{"location":"tools/cli/#usage","title":"Usage","text":"<p>All the REST API calls are exposed via the command line interface. To see a list of what is available run:</p> <pre><code>$ nessie --help\n</code></pre> <p>All docs of the CLI can be found here.</p>"},{"location":"tools/cli/#configuration","title":"Configuration","text":"<p>You can configure the Nessie CLI by creating a configuration file as described below:</p> <ul> <li>macOS: <code>~/.config/nessie</code> and <code>~/Library/Application Support/nessie</code></li> <li>Other Unix: <code>~/.config/nessie</code> and <code>/etc/nessie</code></li> <li>Windows: <code>%APPDATA%\\nessie</code> where the <code>APPDATA</code> environment variable falls   back to <code>%HOME%\\AppData\\Roaming</code> if undefined</li> <li>Via the environment variable <code>DREMIO_CLIENTDIR</code></li> </ul> <p>The default config file is as follows:</p> <pre><code>auth:\n# Authentication type can be: none, bearer or aws\ntype: none\n\n# OpenID token for the \"bearer\" authentication type\n# token: &lt;OpenID token&gt;\n\ntimeout: 10\n\n# Nessie endpoint\nendpoint: http://localhost/api/v1\n\n# whether to skip SSL cert verification\nverify: true </code></pre> <p>Possible values for the <code>auth.type</code> property are:</p> <ul> <li><code>none</code> (default)</li> <li><code>bearer</code></li> <li><code>aws</code></li> <li><code>basic</code> (deprecated)</li> </ul> <p>When configuring authentication type <code>bearer</code>, the <code>auth.token</code> parameter should be set to a valid OpenID token. The token can be set in the Nessie configuration file, as an environment variable (details below), or by the <code>--auth-token &lt;TOKEN&gt;</code> command line option (for each command).</p> <p>When configuring authentication type <code>aws</code>, the client delegates to the Boto  library. You can configure credentials using any of the standard Boto AWS methods. Additionally, the Nessie <code>auth.region</code> parameter should be set to the relevant AWS region.</p> <p>When configuring authentication type <code>basic</code>, both <code>auth.username</code> and <code>auth.password</code> parameters should be set. Note: the <code>basic</code> authentication type is considered insecure and Nessie Servers do not support it in production mode. This authentication type is can only be used when the Nessie Server runs in test or \u201cdevelopment\u201d mode.</p> <p>The command line interface can be configured with most of the above parameters via flags or by setting a config directory. The relevant configs can also be set via environment variables. These take precedence. The environment variable format is to append <code>NESSIE_</code> to a config parameter and nested configs are separated by a _. For example: <code>NESSIE_AUTH_TIMEOUT</code> maps to <code>auth.timeout</code> in the default configuration file above.</p>"},{"location":"tools/cli/#working-with-json","title":"Working with JSON","text":"<p>The Nessie CLI can return data in json format and can be used effectively with <code>jq</code>. For example:</p> <pre><code>$ nessie --json branch -l | jq .\n</code></pre> <p>The Nessie CLI is built on the great Python Click library. It requires Python 3.x.</p>"},{"location":"tools/client_config/","title":"Configuration and authentication in Tools","text":"<p>When Nessie is integrated into a broader data processing environment, authentication settings need to be provided in a way specific to the tool used.</p>"},{"location":"tools/client_config/#common-nessie-client-configuration-options","title":"Common Nessie client configuration options","text":"Configuration option Mandatory / default Meaning <code>nessie.uri</code> Mandatory Nessie REST endpoint <code>nessie.authentication.*</code> Recommended Authentication options, see below <code>nessie.ref</code> Mandatory Name of the Nessie reference, usually <code>main</code>. <code>nessie.ref.hash</code> Optional Hash on <code>nessie.ref</code>, usually not specified. <code>nessie.tracing</code> Optional Boolean property to optionally enable tracing. <code>nessie.transport.read-timeout</code> Optional Network level read timeout in milliseconds. When running with Java 11, this becomes a request timeout. <code>nessie.transport.connect-timeout</code> Optional Network level connect timeout in milliseconds. <code>nessie.http-redirects</code> Optional Optional, specify how redirects are handled. <code>NEVER</code>: Never redirect (default),<code>ALWAYS</code>: Always redirect, <code>NORMAL</code>: Always redirect, except from HTTPS URLs to HTTP URLs. <code>nessie.ssl.cipher-suites</code> Optional Optional, specify the set of allowed SSL cipher suites. <code>nessie.ssl.protocols</code> Optional Optional, specify the set of allowed SSL protocols. <code>nessie.ssl.sni-hosts</code> Optional Optional, specify the set of allowed SNI hosts. <code>nessie.ssl.sni-matcher</code> Optional Optional, specify a SNI matcher regular expression."},{"location":"tools/client_config/#java-11-connection-pool-options","title":"Java 11 connection pool options","text":"<p>The Java 11 HTTP client can be configured using Java system properties. Since Java\u2019s <code>HttpClient</code> API does not support the configuration of these properties programmatically, Nessie cannot expose those via its configuration mechanism.</p> System property Meaning <code>jdk.httpclient.connectionPoolSize</code> The size of the HTTP connection pool.Defaults to <code>0</code>, which means the number of connections is unlimited. <code>jdk.httpclient.keepalive.timeout</code> Number of seconds an idle HTTP connection will be kept alive. Defaults is <code>1200</code> seconds. <code>jdk.httpclient.receiveBufferSize</code> Size of the network level receive buffer size. Defaults to <code>0</code>, which means the operating system defaults apply. <code>jdk.httpclient.sendBufferSize</code> Size of the network level send buffer size. Defaults to <code>0</code>, which means the operating system defaults apply. <p>Note</p> <p>See Javadoc of <code>javax.net.ssl.SSLParameters</code> for valid options/values for the configuration parameters starting with <code>nessie.ssl.</code>.</p> <p>Note</p> <p>See Javadoc of <code>org.projectnessie.client.NessieConfigConstants</code> as well.</p> <p>Note</p> <p>In case you run into issues with Nessie\u2019s new HTTP client for Java 11 and newer, you can try to use the legacy <code>URLConnection</code> based HTTP client by setting the system property <code>nessie.client.force-url-connection-client</code> to <code>true</code>.</p>"},{"location":"tools/client_config/#spark","title":"Spark","text":"<p>When Nessie is used in Spark-based environments (either with Iceberg  or Delta Lake) the Nessie authentication settings are configured via Spark session properties (Replace <code>&lt;catalog_name&gt;</code> with the name of your catalog).</p> Java <pre><code>// local spark instance, assuming NONE authentication\nconf.set(\"spark.sql.catalog.&lt;catalog_name&gt;\", \"org.apache.iceberg.spark.SparkCatalog\")\n.set(\"spark.sql.catalog.&lt;catalog_name&gt;.authentication.type\", \"NONE\")\n.set(...);\nspark = SparkSession.builder()\n.master(\"local[2]\")\n.config(conf)\n.getOrCreate();\n</code></pre> Python <pre><code># local spark instance, assuming NONE authentication\nspark = SparkSession.builder \\\n        .config(\"spark.sql.catalog.&lt;catalog_name&gt;\", \"org.apache.iceberg.spark.SparkCatalog\") \\\n        .config(\"spark.sql.catalog.&lt;catalog_name&gt;.authentication.type\", \"NONE\") \\\n        .config(...) \n        .getOrCreate()\n</code></pre>"},{"location":"tools/client_config/#flink","title":"Flink","text":"<p>When Nessie is used in Flink with Iceberg, the Nessie authentication settings are configured when creating the Nessie catalog in Flink (Replace <code>&lt;catalog_name&gt;</code> with the name of your catalog):</p> <pre><code>table_env.execute_sql(\n\"\"\"CREATE CATALOG &lt;catalog_name&gt; WITH (\n        'type'='iceberg',\n        'catalog-impl'='org.apache.iceberg.nessie.NessieCatalog',\n        'authentication.type'='NONE')\"\"\")\n</code></pre>"},{"location":"tools/client_config/#hive","title":"Hive","text":"<p>When Nessie is used in Hive with Iceberg, the Nessie authentication settings are configured through Hive Shell (Replace <code>&lt;catalog_name&gt;</code> with the name of your catalog):</p> <pre><code>SET iceberg.catalog.&lt;catalog_name&gt;.catalog-impl=org.apache.iceberg.nessie.NessieCatalog\nSET iceberg.catalog.&lt;catalog_name&gt;.authentication.type=NONE\n</code></pre>"},{"location":"tools/client_config/#property-prefixes","title":"Property Prefixes","text":"<p>The <code>spark.sql.catalog.&lt;catalog_name&gt;</code> prefix identifies properties for the Nessie catalog. The <code>&lt;catalog_name&gt;</code> part is just the name of the catalog in this case (not to be confused with the Nessie project name).</p> <p>Multiple Nessie catalogs can be configured in the same Spark environment, each with its own set of configuration properties and its own property name prefix.</p>"},{"location":"tools/client_config/#authentication-settings","title":"Authentication Settings","text":"<p>The sections below discuss specific authentication settings. The property names are shown without environment-specific prefixes for brevity. Nonetheless, in practice the property names should be given appropriate prefixes (as in the example above) for them to be recognized by the tools and Nessie code.</p> <p>The value of the <code>authentication.type</code> property can be one of the following:</p> <ul> <li><code>NONE</code> (default)</li> <li><code>BEARER</code></li> <li><code>AWS</code></li> <li><code>BASIC</code> (deprecated)</li> </ul>"},{"location":"tools/client_config/#authentication-type-none","title":"Authentication Type <code>NONE</code>","text":"<p>For the Authentication Type <code>NONE</code> only the <code>authentication.type</code> property needs to be set.</p> <p>This is also the default authentication type if nothing else is configured.</p>"},{"location":"tools/client_config/#authentication-type-bearer","title":"Authentication Type <code>BEARER</code>","text":"<p>For the <code>BEARER</code> Authentication Type the <code>authentication.token</code> property should be set to a valid OpenID token.</p>"},{"location":"tools/client_config/#authentication-type-aws","title":"Authentication Type <code>AWS</code>","text":"<p>For the <code>AWS</code> Authentication Type the <code>authentication.aws.region</code> property should be set to the AWS region where the Nessie Server endpoint is located.</p> <p>Additional AWS authentication configuration should be provided via standard AWS configuration files. </p>"},{"location":"tools/client_config/#authentication-type-basic","title":"Authentication Type <code>BASIC</code>","text":"<p>For the <code>BASIC</code> Authentication Type the <code>authentication.username</code> and <code>authentication.password</code> properties should be set.</p> <p>Note: the <code>BASIC</code> authentication type is considered insecure and Nessie Servers do not support it in production mode. This authentication type is can only be used when the Nessie Server runs in test or \u201cdevelopment\u201d mode.</p>"},{"location":"tools/export_import/","title":"Nessie export/import","text":"<p>Functionality to export a Nessie repository and import into another Nessie repository, allowing to migration from one backend database to another.</p>"},{"location":"tools/export_import/#usage","title":"Usage","text":"<p>Nessie repository export + import requires direct access to the database used by Nessie. The necessary executable is the <code>nessie-quarkus-cli-x.y.z-runner.jar</code> can be downloaded from the release page on GitHub and is available for Nessie 0.43.0 or newer.</p> <p>The Nessie Quarkus CLI tool <code>nessie-quarkus-cli-x.y.z-runner.jar</code> should use the same configuration settings as the Nessie Quarkus server.</p>"},{"location":"tools/export_import/#exporting","title":"Exporting","text":"<p>The following command (replace <code>x.y.z</code> with the version you\u2019re using) exports your Nessie repository to a single ZIP file called <code>my-export-file.zip</code>,</p> <pre><code>java -jar nessie-quarkus-cli-x.y.z-runner.jar export --path my-export-file.zip\n</code></pre> <p>A ZIP file export contains all necessary repository information in a single, compressed file. Note that the export will only automatically generate a ZIP file, if the output path ends with <code>.zip</code>, otherwise it will export to a directory. You can force either option using the <code>--output-format</code> option.</p> <p>Note</p> <p>Please use the following command for advanced options. <pre><code>java -jar nessie-quarkus-cli-x.y.z-runner.jar help export\n</code></pre></p>"},{"location":"tools/export_import/#importing","title":"Importing","text":"<p>The following command (replace <code>x.y.z</code> with the version you\u2019re using) imports your Nessie repository from a single ZIP file called <code>my-export-file.zip</code>,</p> <pre><code>java -jar nessie-quarkus-cli-x.y.z-runner.jar import --path my-export-file.zip\n</code></pre> <p>The import will fail, if the target Nessie repository exists and is not empty. If you intentionally want to overwrite an existing Nessie repository, then use the <code>--erase-before-import</code> option.</p> <p>Note</p> <p>Please use the following command for advanced options. <pre><code>java -jar nessie-quarkus-cli-x.y.z-runner.jar help import\n</code></pre></p>"},{"location":"tools/export_import/#building-blocks","title":"Building blocks","text":"<ul> <li>Export functionality, based   on AbstractNessieExporter   to dump commits, named references, heads+fork points.</li> <li>Import functionality, based   on AbstractNessieImporter   to load the exported data.</li> <li>Commit log optimization to:</li> <li>populate the list of parent-commits in all commits, according to the target Nessie repository\u2019s     configuration</li> <li>populate the key-lists in the commits, according to the target Nessie repository\u2019s configuration</li> </ul>"},{"location":"tools/export_import/#code-examples","title":"Code examples","text":"<pre><code>class CodeExamples {\n\nvoid exportExample(DatabaseAdapter databaseAdapter, Path exportZipFile) {\n\nZipArchiveExporter.builder()\n.outputFile(exportZipFile)\n.databaseAdapter(databaseAdapter)\n.build()\n.exportNessieRepository();\n}\n\nvoid importExample(DatabaseAdapter databaseAdapter, Path importZipFile) {\n\nImportResult importResult =\nZipArchiveImporter.builder()\n.sourceZipFile(importZipFile)\n.databaseAdapter(databaseAdapter)\n.build()\n.importNessieRepository();\n\nCommitLogOptimization.builder()\n.headsAndForks(importResult.headsAndForkPoints())\n.databaseAdapter(databaseAdapter)\n.build()\n.optimize();\n}\n}\n</code></pre> <p><code>ZipArchiveImporter</code> can be replaced with <code>FileImporter</code>.</p>"},{"location":"tools/export_import/#export-contents","title":"Export contents","text":"<p>Each export contains this information:</p> <ul> <li>All commits (no specific order)</li> <li>All named references including their heads</li> <li>Heads + fork-points (used to feed commit-log optimization ran after a repository import)</li> <li>Summary and inventory</li> </ul>"},{"location":"tools/export_import/#content-commitmeta-global-state-et-al","title":"<code>Content</code>, <code>CommitMeta</code>, global state, et al","text":"<p>A Nessie export contains all <code>Content</code> information without any database internal information. This means that there is no information contained whether the source repository stored <code>Content</code> using e.g. global state. All <code>Content</code>s and <code>CommitMeta</code> are exported in their public JSON representation.</p> <p>As a side effect, an export from a Nessie repository with commits that were persisted using global state will be imported using on-reference-state. However, for content that was persisted using global state, there will multiple on-reference-states referring to the same Iceberg table-metadata.</p>"},{"location":"tools/export_import/#technical-commit-information","title":"Technical commit information","text":"<p>Exported commits do not contain key-lists or commit-parents or the like, because that is rather internal, implementation specific information and, additionally, the configuration of the target repository that controls the aggregated key-lists and commit-parent-lists might be different from the source repository.</p> <p>However, exported commits do contain information about the commit-sequence-number and the technical created-at-timestamp.</p> <p>Note</p> <p>The <code>nessie-quarkus-cli</code> tool\u2019s <code>import</code> command performs a commit-log optimization after all commits and named references have been created. This optimization populates missing aggregated key-lists and commit-parents. Running commit-log optimization is necessary for good performance to access contents and commit logs, but not strictly necessary. Commit-log optimization can be disabled.</p>"},{"location":"tools/export_import/#export-contents-consistency","title":"Export contents consistency","text":"<p>Any Nessie export guarantees that the commits referenced by the named references and all their parent commits are contained in the exported data.</p> <p>A Nessie export may contain unreferenced commits, for example commits that have been created while the export is running or commits that are otherwise unreferenced.</p> <p>The <code>HEAD</code>s of the named references and the heads in the <code>HeadsAndForks</code> structure may not be consistent, for example when commits have been created while the export is running.</p>"},{"location":"tools/export_import/#export-formats","title":"Export formats","text":"<p>Exported data can be written either into an empty directory or as a compressed zip file.</p> <p>Users can optionally zip the contents of an export to a directory and pass that to the zip-file based importer.</p>"},{"location":"tools/sql/","title":"Nessie Spark SQL Extensions","text":"<p>Spark SQL extensions provide an easy way to execute common Nessie commands via SQL.</p>"},{"location":"tools/sql/#how-to-use-them","title":"How to use them","text":""},{"location":"tools/sql/#spark-33","title":"Spark 3.3","text":"<p>In order to be able to use Nessie\u2019s custom Spark SQL extensions with Spark 3.3.x, one needs to configure <code>org.apache.iceberg:iceberg-spark-runtime-3.3_2.12:1.0.0</code> along with <code>org.projectnessie:nessie-spark-extensions-3.3_2.12:0.48.2</code></p> <p>Here\u2019s an example of how this is done when starting the <code>spark-sql</code> shell:</p> <pre><code>bin/spark-sql --packages \"org.apache.iceberg:iceberg-spark-runtime-3.3_2.12:1.0.0,org.projectnessie:nessie-spark-extensions-3.3_2.12:0.48.2\"\n--conf spark.sql.extensions=\"org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions,org.projectnessie.spark.extensions.NessieSparkSessionExtensions\"\n--conf &lt;other settings&gt;\n</code></pre>"},{"location":"tools/sql/#spark-32","title":"Spark 3.2","text":"<p>In order to be able to use Nessie\u2019s custom Spark SQL extensions with Spark 3.2.x, one needs to configure <code>org.apache.iceberg:iceberg-spark-runtime-3.2_2.12:1.0.0</code> along with <code>org.projectnessie:nessie-spark-extensions-3.2_2.12:0.48.2</code></p> <p>Here\u2019s an example of how this is done when starting the <code>spark-sql</code> shell:</p> <pre><code>bin/spark-sql --packages \"org.apache.iceberg:iceberg-spark-runtime-3.2_2.12:1.0.0,org.projectnessie:nessie-spark-extensions-3.2_2.12:0.48.2\"\n--conf spark.sql.extensions=\"org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions,org.projectnessie.spark.extensions.NessieSparkSessionExtensions\"\n--conf &lt;other settings&gt;\n</code></pre>"},{"location":"tools/sql/#spark-31","title":"Spark 3.1","text":"<p>In order to be able to use Nessie\u2019s custom Spark SQL extensions with Spark 3.1.x, one needs to configure <code>org.apache.iceberg:iceberg-spark-runtime-3.1_2.12:1.0.0</code> along with <code>org.projectnessie:nessie-spark-extensions-3.1_2.12:0.48.2</code></p> <p>Here\u2019s an example of how this is done when starting the <code>spark-sql</code> shell:</p> <pre><code>bin/spark-sql --packages \"org.apache.iceberg:iceberg-spark-runtime-3.1_2.12:1.0.0,org.projectnessie:nessie-spark-extensions-3.1_2.12:0.48.2\"\n--conf spark.sql.extensions=\"org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions,org.projectnessie.spark.extensions.NessieSparkSessionExtensions\"\n--conf &lt;other settings&gt;\n</code></pre> <p>Additional configuration details can be found in the Spark via Iceberg docs.</p>"},{"location":"tools/sql/#grammar","title":"Grammar","text":"<p>The current grammar is shown below: <pre><code>: CREATE (BRANCH|TAG) (IF NOT EXISTS)? reference=identifier (IN catalog=identifier)? (FROM fromRef=identifier)?\n| DROP (BRANCH|TAG) identifier (IN catalog=identifier)?\n| USE REFERENCE reference=identifier (AT tsOrHash=identifier)?  (IN catalog=identifier)?\n| LIST REFERENCES (IN catalog=identifier)?\n| SHOW REFERENCE (IN catalog=identifier)?\n| MERGE BRANCH (reference=identifier)? (INTO toRef=identifier)?  (IN catalog=identifier)?\n| SHOW LOG (reference=identifier)? (IN catalog=identifier)?\n| ASSIGN (BRANCH|TAG) (reference=identifier)? (TO toRef=identifier)? (IN catalog=identifier)?\n</code></pre></p>"},{"location":"tools/sql/#creating-branchestags","title":"Creating Branches/Tags","text":"<p>Creating a branch <code>dev</code> in the <code>nessie</code> catalog (in case it doesn\u2019t already exist):</p> <ul> <li><code>CREATE BRANCH IF NOT EXISTS dev IN nessie</code></li> </ul> <p>Creating a tag <code>devTag</code> in the <code>nessie</code> catalog (in case it doesn\u2019t already exist):</p> <ul> <li><code>CREATE TAG IF NOT EXISTS devTag IN nessie</code></li> </ul> <p>Creating a branch <code>dev</code> in the <code>nessie</code> catalog off of an existing branch/tag <code>base</code>:</p> <ul> <li><code>CREATE BRANCH IF NOT EXISTS dev IN nessie FROM base</code></li> </ul> <p>Note that in case <code>base</code> doesn\u2019t exist, Nessie will fall back to the default branch (<code>main</code>).</p>"},{"location":"tools/sql/#dropping-branchestags","title":"Dropping Branches/Tags","text":"<p>Dropping a branch <code>dev</code> in the <code>nessie</code> catalog (in case it exists):</p> <ul> <li><code>DROP BRANCH IF EXISTS dev IN nessie</code></li> </ul> <p>Dropping a tag <code>devTag</code> in the <code>nessie</code> catalog (in case it exists):</p> <ul> <li><code>DROP TAG IF EXISTS devTag IN nessie</code></li> </ul>"},{"location":"tools/sql/#switching-to-a-branchtag","title":"Switching to a Branch/Tag","text":"<p>In order to switch to the HEAD of the branch/tag <code>ref</code> in the <code>nessie</code> catalog:</p> <ul> <li><code>USE REFERENCE ref IN nessie</code></li> </ul> <p>It is also possible to switch to a specific timestamp on a given branch/tag:</p> <ul> <li><code>USE REFERENCE ref AT `2021-10-06T08:50:37.157602` IN nessie</code></li> </ul> <p>Additionally, one can switch to a specific hash on a given branch/tag:</p> <ul> <li><code>USE REFERENCE ref AT dd8d46a3dd5478ce69749a5455dba29d74f6d1171188f4c21d0e15ff4a0a9a9b IN nessie</code></li> </ul>"},{"location":"tools/sql/#listing-available-branchestags","title":"Listing available Branches/Tags","text":"<p>One can list available branches/tags in the <code>nessie</code> catalog via:</p> <ul> <li><code>LIST REFERENCES IN nessie</code></li> </ul>"},{"location":"tools/sql/#showing-details-of-the-current-branchtag","title":"Showing details of the current Branch/Tag","text":"<p>One can see details about the current branch/tag in the <code>nessie</code> catalog via:</p> <ul> <li><code>SHOW REFERENCE IN nessie</code></li> </ul>"},{"location":"tools/sql/#showing-the-commit-log-of-the-current-branchtag","title":"Showing the Commit Log of the current Branch/Tag","text":"<p>It is possible to look at the commit log of a particular branch/tag in the <code>nessie</code> catalog via:</p> <ul> <li><code>SHOW LOG dev IN nessie</code></li> </ul>"},{"location":"tools/sql/#assigning-branchestags","title":"Assigning Branches/Tags","text":"<p>Assigning a branch <code>dev</code> to <code>base</code> in catalog <code>nessie</code> can be done via:</p> <ul> <li><code>ASSIGN BRANCH dev TO base IN nessie</code></li> </ul> <p>Assigning a tag <code>devTag</code> to <code>base</code> in catalog <code>nessie</code> can be done via:</p> <ul> <li><code>ASSIGN TAG devTag TO base IN nessie</code></li> </ul> <p>Note that in case <code>base</code> doesn\u2019t exist, Nessie will fall back to the default branch (<code>main</code>).</p> <p>It is also possible to assign a branch/tag to a <code>base</code> at a particular <code>hash</code>:</p> <ul> <li><code>ASSIGN TAG devTag TO base AT dd8d46a3dd5478ce69749a5455dba29d74f6d1171188f4c21d0e15ff4a0a9a9b IN nessie</code></li> </ul>"},{"location":"tools/sql/#merging-a-branch-into-another-branch","title":"Merging a Branch into another Branch","text":"<p>Merging branch <code>dev</code> into <code>base</code> for the <code>nessie</code> catalog can be done via:</p> <ul> <li><code>MERGE BRANCH dev INTO base IN nessie</code></li> </ul> <p>Note that in case <code>base</code> doesn\u2019t exist, Nessie will fall back to the default branch (<code>main</code>).</p>"},{"location":"tools/sql/#usage-with-iceberg-call-procedures","title":"Usage with Iceberg CALL procedures","text":"<p>Note</p> <p>For Iceberg version &gt;= 0.14.0 with spark versions &lt;= 3.1 or Iceberg version &lt; 0.14.0 with any of the spark versions, 1. Compaction always works on initial catalog configurations (like <code>spark.sql.catalog._catalogName_.ref</code>) and ignores the reference set using <code>USE REFERENCE</code> command. So, need to have a new spark session with required reference name configuration to apply the compaction for tables in non-default references. 2. For compaction, <code>TableReference</code> syntax is not supported as table identifier.</p>"},{"location":"tools/ui/","title":"Web UI","text":"<p>Nessie comes with a simple web UI that allows you to understand what is in your Nessie repository. You can view existing tags and branches as well as the content within them.</p> <p>The UI automatically runs as part of starting the Nessie service. If running locally,  you can find the UI at localhost:19120.</p> <p></p>"},{"location":"tools/ui/#swagger-ui","title":"Swagger UI","text":"<p>The Swagger UI allows for testing the REST API and reading the API docs. It is available at  localhost:19120/q/swagger-ui.</p>"},{"location":"tools/deltalake/","title":"Overview","text":"<p>Delta Lake support in Nessie requires some minor modifications to the core Delta libraries. This patch is still ongoing, in the meantime Nessie will not work on Databricks and must be used with the open source Delta. Nessie is able to interact with Delta Lake by implementing a custom version of Delta\u2019s LogStore interface. This ensures that all filesystem changes are recorded by Nessie as commits. The benefit of this approach is the core ACID primitives are handled by Nessie. The limitations around concurrency that Delta would normally have are removed, any number of readers and writers can simultaneously interact with a Nessie managed Delta Lake table. Current Nessie Delta Lake integration include  the following:</p> <ul> <li>Spark via Delta Lake</li> </ul>"},{"location":"tools/deltalake/spark/","title":"Spark via Delta Lake","text":"<p>Note</p> <p>Detailed steps on how to set up Pyspark + Delta Lake + Nessie with Python is available on Binder.</p> <p>To access Nessie from a spark cluster make sure the <code>spark.jars.packages</code> option is set to include the Nessie Deltalake Client for Spark 3 jar. These jars contain all Nessie and Delta Lake libraries required for operation.</p> <p>In pyspark this would look like</p> <pre><code>SparkSession.builder\n    .config('spark.jars.packages',\n            'org.projectnessie:nessie-deltalake:0.48.2')\n    ... rest of spark config\n    .getOrCreate()\n</code></pre> <p>In order to utilize the additional SQL grammar from the Nessie Spark SQL Extensions make sure to also include <code>org.projectnessie:nessie-spark-3.2-extensions:0.48.2</code> and to set the <code>spark.sql.extensions</code> config option accordingly (see examples below).</p> <p>The Nessie LogStore needs the following parameters set in the Spark/Hadoop config.</p> <pre><code>nessie.url = full url to nessie\nnessie.authentication.type = authentication type \nspark.delta.logFileHandler.class=org.projectnessie.deltalake.NessieLogFileMetaParser\nspark.delta.logStore.class=org.projectnessie.deltalake.NessieLogStore\n</code></pre> <p>These are set as follows in code (or through other methods as described here)</p> Java <pre><code>//for a local spark instance\nconf.set(\"spark.jars.packages\",\n\"org.projectnessie:nessie-deltalake:0.48.2,org.projectnessie:nessie-spark-3.2-extensions:0.48.2\")\n.set(\"spark.hadoop.nessie.url\", url)\n.set(\"spark.hadoop.nessie.ref\", branch)\n.set(\"spark.hadoop.nessie.authentication.type\", authType)\n.set(\"spark.sql.catalog.spark_catalog\",\n\"org.apache.spark.sql.delta.catalog.DeltaCatalog\")\n.set(\"spark.sql.extensions\",\n\"io.delta.sql.DeltaSparkSessionExtension,org.projectnessie.spark.extensions.NessieSpark32SessionExtensions\")\n.set(\"spark.delta.logStore.class\",\n\"org.projectnessie.deltalake.NessieLogStore\")\n.set(\"spark.delta.logFileHandler.class\",\n\"org.projectnessie.deltalake.NessieLogFileMetaParser\");\nspark = SparkSession.builder()\n.master(\"local[2]\")\n.config(conf)\n.getOrCreate();\n</code></pre> Python <pre><code># here we are assuming NONE authorisation\nspark = SparkSession.builder \\\n        .config(\"spark.jars.packages\",\n            \"org.projectnessie:nessie-deltalake:0.48.2,org.projectnessie:nessie-spark-3.2-extensions:0.48.2\") \\\n        .config(\"spark.hadoop.nessie.url\",\n            \"http://localhost:19120/api/v1\") \\\n        .config(\"spark.hadoop.nessie.ref\", \"main\") \\\n        .config(\"spark.sql.catalog.spark_catalog\",\n            \"org.apache.spark.sql.delta.catalog.DeltaCatalog\") \\\n        .config(\"spark.sql.extensions\",\n            \"io.delta.sql.DeltaSparkSessionExtension,org.projectnessie.spark.extensions.NessieSpark32SessionExtensions\") \\\n        .config(\"spark.delta.logFileHandler.class\",\n            \"org.projectnessie.deltalake.NessieLogFileMetaParser\") \\\n        .config(\"spark.delta.logStore.class\",\n            \"org.projectnessie.deltalake.NessieLogStore\") \\\n        .getOrCreate()\n</code></pre> <p>Additional authentication settings are documented in the Authentication in Tools section.</p> <p>Note above we specified the option <code>spark.hadoop.nessie.ref</code>. This value sets the default branch that the delta catalog will use. This can be changed by changing the <code>hadoopConfiguration</code> however best practice would be to use a single write context (branch) for the duration of the spark session.</p> <p>The key to enabling Nessie is to instruct Delta to use the Nessie specific <code>LogStore</code> and <code>LogFileHandler</code>. With these enabled the Delta core library will delegate transaction handling to Nessie.</p> <p>Finally, note we have explicitly enabled Delta\u2019s SQL extensions which enable Delta specific SQL in Spark3.</p> <p>Warning</p> <p>Currently Delta metadata operations like <code>VACUUM</code> are destructive to Nessie managed Delta tables. Do not run these operations. Future versions of Nessie will disable these commands when Nessie is activated.</p>"},{"location":"tools/deltalake/spark/#writing","title":"Writing","text":"<p>Spark support is constantly evolving and the differences in Spark3 vs Spark2.4 is considerable. See the delta docs for an up-to-date support table.</p> <p>Spark 3 supports reads, appends, overwrites in Delta via data frames as well as SQL syntax. Nessie tables in delta can be written via the Nessi enabled Delta client. The Delta writer allows for either <code>overwrite</code> or <code>append</code> mode in a standard <code>spark.write</code>.</p> Java <pre><code>regionDf = spark.read().load(\"data/region.parquet\");\nregionDf.write().format(\"delta\").mode(\"overwrite\")\n.save(\"/location/to/delta/testing/region\");\n</code></pre> Python <pre><code>region_df = spark.read.load(\"data/region.parquet\")\nregion_df.write.format(\"delta\").mode(\"overwrite\") \\\n    .save(\"/location/to/delta/testing/region\")\n</code></pre> SQL <pre><code>CREATE TABLE nessie.testing.city (\nC_CITYKEY BIGINT, C_NAME STRING, N_NATIONKEY BIGINT, C_COMMENT STRING\n) USING delta PARTITIONED BY (N_NATIONKEY) LOCATION 'path/to/delta/testing/city'\n-- SELECT .. can be added to the sql statement to perform a CTAS\n\nINSERT [OVERWRITE] INTO nessie.testing.city VALUES (1, 'a', 1, 'comment')\n</code></pre> <p>Here we simply read a file from the default filesystem and write it to a new nessie Delta table. This will trigger a commit on current context\u2019s branch.</p> <p>For the examples above we have performed commits on the branch specified when we set our spark configuration. Had we not specified the context in our spark configuration all operations would have defaulted to the default branch defined by the server. This is a strong pattern for a spark job which is for example writing data as part of a wider ETL job. It will only ever need one context or branch to write to. If however you are running an interactive session and would like to write to a specific branch without changing context the following should be used to change the context.</p> Java <pre><code>spark.sparkContext().hadoopConfiguration().set(\"nessie.ref\", \"dev\");\nregionDf = spark.read().load(\"data/region.parquet\");\nregionDf.write().format(\"delta\").mode(\"overwrite\")\n.save(\"/location/to/delta/testing/region\");\n</code></pre> Python <pre><code>spark.sparkContext._jsc.hadoopConfiguration().set(\"nessie.ref\", \"dev\")\nregion_df = spark.read.load(\"data/region.parquet\")\nregion_df.write.format(\"delta\").mode(\"overwrite\") \\\n    .save(\"/location/to/delta/testing/region\")\n</code></pre> SQL <pre><code>-- change hadoop configuration externally using the Java or Python syntax\nCREATE TABLE nessie.testing.city (\nC_CITYKEY BIGINT, C_NAME STRING, N_NATIONKEY BIGINT, C_COMMENT STRING\n) USING iceberg PARTITIONED BY (N_NATIONKEY)\n-- AS SELECT .. can be added to the sql statement to perform a CTAS\n\nINSERT INTO nessie.testing.city VALUES (1, 'a', 1, 'comment')\n</code></pre> <p>We have to manually change the <code>hadoopConfiguration</code> for the <code>SparkContext</code> for a Delta table to be initialised with the correct reference. This will change in the near future when it will be possible to use the same <code>branch@ref</code> syntax as Iceberg inside of delta. Currently, it isn\u2019t possible to change the ref from SQL directly. This should be fixed in an upcoming release.</p> <p>Note</p> <p>Delta by default caches tables internally. If an action has to happen on the same table but a different branch the cache first should be cleared. <code>DeltaLog.clearCache()</code>.</p>"},{"location":"tools/deltalake/spark/#reading","title":"Reading","text":"<p>To read a Nessie table in Delta Lake simply:</p> Java <pre><code>regionDf = spark.read().format(\"delta\")\n.load(\"/path/to/delta/testing/region\");\n</code></pre> Python <pre><code>region_df = spark.read.format(\"delta\") \\\n    .load(\"/path/to/delta/testing/region\")\n</code></pre> SQL <pre><code>SELECT * FROM '/path/to/delta/testing/region'\n</code></pre> <p>The examples above all use the default branch defined on initialisation. Future versions will add the ability to specify a branch and timestamp similar to Iceberg. Currently, to switch branches a similar technique as writing is required (manually changing the hadoopConfiguration). History can be viewed on the command line or via the python client and a specific hash based on commit time can be extracted for use in the spark config. It is recommended to use the time-travel features of Nessie over the Delta features as Nessie history is consistent across the entire database.</p>"},{"location":"tools/iceberg/","title":"Overview","text":"<p>Nessie works seamlessly with Iceberg in Spark2 and Spark3. Nessie is implemented as a custom Iceberg catalog and therefore supports all features available to any Iceberg client. This includes Spark structured streaming, Presto, Flink and Hive. See the Iceberg docs for more info. Current Nessie Iceberg integration includes  the following:</p> <ul> <li>Spark via Iceberg </li> <li>Flink via Iceberg</li> <li>Hive via Iceberg</li> </ul>"},{"location":"tools/iceberg/flink/","title":"Flink via Iceberg","text":"<p>Note</p> <p>Detailed steps on how to set up Pyspark + Iceberg + Flink + Nessie with Python is available on Binder</p> <p>In order to use Flink with Python API, you will need to make sure <code>pyflink</code> have access to all Hadoop JARs as mentioned in these docs. After that, you will need to make sure <code>iceberg-flink-runtime</code> is added to Flink. This can be done by adding the iceberg JAR to <code>pyflink</code> via <code>env.add_jar</code>, e.g: <code>env.add_jars(\"file://path/to/jar/iceberg-flink-runtime-1.0.0.jar\")</code>. This can be shown below:</p> <pre><code>import os\n\nfrom pyflink.datastream import StreamExecutionEnvironment\n\nenv = StreamExecutionEnvironment.get_execution_environment()\niceberg_flink_runtime_jar = os.path.join(os.getcwd(), \"iceberg-flink-runtime-1.0.0.jar\")\n\nenv.add_jars(\"file://{}\".format(iceberg_flink_runtime_jar))\n</code></pre> <p>Once we have added <code>iceberg-flink-runtime</code> JAR to <code>pyflink</code>, we can then create <code>StreamTableEnvironment</code> and execute Flink SQL statements. This can be shown in the following example:</p> <pre><code>from pyflink.table import StreamTableEnvironment\n\ntable_env = StreamTableEnvironment.create(env)\n\ntable_env.execute_sql(\n\"\"\"CREATE CATALOG &lt;catalog_name&gt; WITH (\n        'type'='iceberg',\n        'catalog-impl'='org.apache.iceberg.nessie.NessieCatalog',\n        'uri'='http://localhost:19120/api/v1',\n        'ref'='main',\n        'warehouse' = '/path/to/flink/warehouse')\"\"\"\n    )\n</code></pre> <p>With the above statement, we have created a Nessie catalog (via Iceberg) that Flink will use to manage the tables.</p> <p>For more general information about Flink and Iceberg, refer to Iceberg and Flink documentation.</p>"},{"location":"tools/iceberg/flink/#configuration","title":"Configuration","text":"<p>To use Nessie Catalog in Flink via Iceberg, we will need to create a catalog in Flink through <code>CREATE CATALOG</code> SQL statement (replace <code>&lt;catalog_name&gt;</code> with the name of your catalog), example:</p> <pre><code>table_env.execute_sql(\n\"\"\"CREATE CATALOG &lt;catalog_name&gt; WITH (\n        'type'='iceberg',\n        'catalog-impl'='org.apache.iceberg.nessie.NessieCatalog',\n        'uri'='http://localhost:19120/api/v1',\n        'ref'='main',\n        'warehouse' = '/path/to/flink/warehouse')\"\"\"\n    )\n</code></pre> <p>The following properties are required in Flink when creating the Nessie Catalog:</p> <ul> <li><code>type</code>: This must be <code>iceberg</code> for iceberg table format.</li> <li><code>catalog-impl</code>: This must be <code>org.apache.iceberg.nessie.NessieCatalog</code> in order to tell Flink to use Nessie catalog implementation.</li> <li><code>uri</code>: The location of the Nessie server.</li> <li><code>ref</code>: The Nessie ref/branch we want to use.</li> <li><code>warehouse</code>: The location where to store Iceberg tables managed by Nessie catalog.</li> <li><code>authentication.type</code>: The authentication type to be used, please refer to the authentication docs for more info.</li> </ul>"},{"location":"tools/iceberg/flink/#create-tables","title":"Create tables","text":"<p>To create tables in Flink that are managed by Nessie/Iceberg, you will need to specify the catalog name in addition to the database whenever you issue <code>CREATE TABLE</code> statement, e.g:</p> <pre><code>CREATE TABLE `&lt;catalog_name&gt;`.`&lt;database_name&gt;`.`&lt;table_name&gt;` (\nid BIGINT COMMENT 'unique id',\ndata STRING\n);\n</code></pre>"},{"location":"tools/iceberg/flink/#reading-tables","title":"Reading tables","text":"<p>To read tables in Flink, this can be done with a typical SQL <code>SELECT</code> statement, however as the same with creating tables, you will need to make sure to specify the catalog name in addition to the database. e.g:</p> <pre><code>SELECT * FROM `&lt;catalog_name&gt;`.`&lt;database_name&gt;`.`&lt;table_name&gt;`;\n</code></pre> <p>As well, similar to Spark, you can read tables from specific branches or hashes from within a <code>SELECT</code> statement. The general pattern is <code>&lt;table_name&gt;@&lt;branch/ref&gt;</code> (e.g: <code>salaries@main</code>):</p> <pre><code>SELECT * FROM `&lt;catalog_name&gt;`.`&lt;database_name&gt;`.`&lt;table_name&gt;@&lt;branch/ref&gt;`;\n</code></pre>"},{"location":"tools/iceberg/flink/#other-ddl-statements","title":"Other DDL statements","text":"<p>To read and write into tables that are managed by Iceberg and Nessie, typical Flink SQL queries can be used. Refer to this documentation here for more information.</p>"},{"location":"tools/iceberg/hive/","title":"Hive via Iceberg","text":"<p>Note</p> <p>Detailed steps on how to set up Pyspark + Iceberg + Hive + Nessie with Python is available on Binder</p> <p>To access Hive via Iceberg, you will need to make sure <code>iceberg-hive-runtime</code> is added to Hive. This can be done either by adding the JAR file to <code>auxlib</code> folder in Hive home directory, by adding the JAR file to <code>hive-site.xml</code> file or via Hive shell, e.g: <code>add jar /path/to/iceberg-hive-runtime.jar;</code>. Nessie\u2019s Iceberg module is already included with <code>iceberg-hive-runtime</code> JAR distribution.</p> <p>For more general information about Hive and Iceberg, refer to Iceberg and Hive documentation.</p>"},{"location":"tools/iceberg/hive/#configuration","title":"Configuration","text":"<p>To configure a Nessie Catalog in Hive, first it needs to be registered in Hive, this can be done by configuring the following properties in Hive (Replace <code>&lt;catalog_name&gt;</code> with the name of your catalog):</p> <pre><code>SET iceberg.catalog.&lt;catalog_name&gt;.catalog-impl=org.apache.iceberg.nessie.NessieCatalog\nSET iceberg.catalog.&lt;catalog_name&gt;.&lt;nessie_config_property&gt;=&lt;config&gt;\n</code></pre> <p>To use Nessie Catalog in Hive via Iceberg, the following properties are required within Hive:</p> <ul> <li> <p><code>iceberg.catalog.&lt;catalog_name&gt;.warehouse</code> : The location where to store Iceberg tables managed by Nessie catalog. This will be the same location that is used to create an Iceberg table as it shown below.</p> </li> <li> <p><code>iceberg.catalog.&lt;catalog_name&gt;.ref</code> : The current Nessie branch. Note that Hive doesn\u2019t support the notation of <code>table@branch</code>, therefore everytime you want to execute against a specific branch, you will need to set this property to point to the working branch, e.g: <code>SET iceberg.catalog.&lt;catalog_name&gt;.ref=main</code>.</p> </li> <li> <p><code>iceberg.catalog.&lt;catalog_name&gt;.uri</code>: The location of the Nessie server.</p> </li> <li> <p><code>iceberg.catalog.&lt;catalog_name&gt;.authentication.type</code>: The authentication type to be used, please refer to the authentication docs for more info.</p> </li> </ul> <p>For example:</p> <pre><code>SET iceberg.catalog.&lt;catalog_name&gt;.warehouse=/home/user/notebooks/nessie_warehouse;\nSET iceberg.catalog.&lt;catalog_name&gt;.ref=dev;\nSET iceberg.catalog.&lt;catalog_name&gt;.catalog-impl=org.apache.iceberg.nessie.NessieCatalog;\nSET iceberg.catalog.&lt;catalog_name&gt;.uri=http://localhost:19120/api/v1;\n</code></pre>"},{"location":"tools/iceberg/hive/#create-tables","title":"Create tables","text":"<p>Whenever Hive creates an Iceberg table, it will create it as external table that is managed by Iceberg catalog (in this case Nessie Catalog), thus, some properties need to be provided in order to create an Iceberg tables in Hive:</p> <p><pre><code>CREATE TABLE database_a.table_a (\n  id bigint, name string\n) PARTITIONED BY (\n  dept string\n) STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler'\n  LOCATION '/path_nessie_warehouse/database_a/salaries\n  TBLPROPERTIES ('iceberg.catalog'='&lt;catalog_name&gt;', 'write.format.default'='parquet');\n</code></pre> Whereby the above properties are explained as below:</p> <ul> <li> <p><code>STORED BY 'org.apache.iceberg.mr.hive.HiveIcebergStorageHandler'</code> : Since Hive doesn\u2019t use a custom global catalog, we tell Hive here that individual table will be managed by Iceberg\u2019s catalog through <code>org.apache.iceberg.mr.hive.HiveIcebergStorageHandler</code>.</p> </li> <li> <p><code>LOCATION '/path_nessie_warehouse/database_a/salaries</code> : As mentioned before, Hive will create Iceberg tables as external tables and thus, location of the data files needs to be provided. This location is the same location that is provided in <code>iceberg.catalog.&lt;catalog_name&gt;.warehouse</code> in addition to the database and table names.</p> </li> <li> <p><code>'iceberg.catalog'='&lt;catalog_name&gt;'</code> : The custom Iceberg catalog to be used to manage this table.</p> </li> <li> <p><code>'write.format.default'='parquet'</code> : The format that is used to store the data, this could be anything that is supported by Iceberg, e.g: ORC.</p> </li> </ul>"},{"location":"tools/iceberg/hive/#writing-and-reading-tables","title":"Writing and reading tables","text":"<p>To read and write into tables that are managed by Iceberg and Nessie, typical Hive SQL queries can be used. Refer to this documentation here for more information.</p> <p>Note: Hive doesn\u2019t support the notation of <code>table@branch</code>, therefore everytime you want to execute against a specific branch, you will need to set this property to point to the working branch, e.g: <code>SET iceberg.catalog.&lt;catalog_name&gt;.ref=main</code>. E.g: <pre><code>SET iceberg.catalog.&lt;catalog_name&gt;.ref=dev\n\nSELECT * FROM database_a.table_a;\n</code></pre></p>"},{"location":"tools/iceberg/spark/","title":"Spark via Iceberg","text":"<p>Note</p> <p>Detailed steps on how to set up Pyspark + Iceberg + Nessie with Python is available on Binder</p> <p>To access Nessie on Iceberg from a spark cluster make sure the <code>spark.jars</code> spark option is set to include a jar of the iceberg spark runtime, or the <code>spark.jars.packages</code> spark option is set to include a Maven coordinate of the iceberg spark runtime.</p> <code>iceberg-spark-runtime</code> (required) <code>nessie-spark-extensions</code> (optional) Spark 3.3, Scala 2.12: <code>org.apache.iceberg:iceberg-spark-runtime-3.3_2.12:1.0.0</code>(All, Latest) <code>org.projectnessie:nessie-spark-extensions-3.3_2.12:0.48.2</code>(All, Latest) Spark 3.3, Scala 2.13: <code>org.apache.iceberg:iceberg-spark-runtime-3.3_2.13:1.0.0</code>(All, Latest) <code>org.projectnessie:nessie-spark-extensions-3.3_2.13:0.48.2</code>(All, Latest) Spark 3.2, Scala 2.12: <code>org.apache.iceberg:iceberg-spark-runtime-3.2_2.12:1.0.0</code>(All, Latest) <code>org.projectnessie:nessie-spark-extensions-3.2_2.12:0.48.2</code>(All, Latest) Spark 3.2, Scala 2.13: <code>org.apache.iceberg:iceberg-spark-runtime-3.2_2.13:1.0.0</code>(All, Latest) <code>org.projectnessie:nessie-spark-extensions-3.2_2.13:0.48.2</code>(All, Latest) Spark 3.1, Scala 2.12: <code>org.apache.iceberg:iceberg-spark-runtime-3.1_2.12:1.0.0</code>(All, Latest) <code>org.projectnessie:nessie-spark-extensions-3.1_2.12:0.48.2</code>(All, Latest) <p>The <code>iceberg-spark-runtime</code> fat jars are distributed by the Apache Iceberg project and contains all Apache Iceberg libraries required for operation, including the built-in Nessie Catalog.</p> <p>The <code>nessie-spark-extensions</code> jars are distributed by the Nessie project and contain SQL extensions that allow you to manage your tables with nessie\u2019s git-like syntax.</p> <p>In pyspark, usage would look like\u2026</p> Python <pre><code>SparkSession.builder\n    .config('spark.jars.packages',\n            'org.apache.iceberg:iceberg-spark-runtime-3.3_2.12:1.0.0')\n    ... rest of spark config\n    .getOrCreate()\n</code></pre> <p>\u2026or if using the nessie extensions\u2026</p> Python <pre><code>SparkSession.builder\n    .config('spark.jars.packages',\n            'org.apache.iceberg:iceberg-spark-runtime-3.3_2.12:1.0.0,org.projectnessie:nessie-spark-extensions-3.3_2.12:0.48.2')\n    ... rest of spark config\n    .getOrCreate()\n</code></pre> <p>Note</p> <p>The Spark config parameter <code>spark.jars.packages</code> uses Maven coordinates to pull the given dependencies and all transitively required dependencies as well. Dependencies are resolved via the local Ivy cache, the local Maven repo and then against Maven Central. The config parameter <code>spark.jars</code> only takes a list of jar files and does not resolve transitive dependencies.</p> <p>The docs for the Java API in Iceberg explain how to use a <code>Catalog</code>. The only change is that a Nessie catalog should be instantiated</p> Java <pre><code>Catalog catalog = new NessieCatalog(spark.sparkContext().hadoopConfiguration())\n</code></pre> Python <pre><code>catalog = jvm.NessieCatalog(sc._jsc.hadoopConfiguration())\n</code></pre> <p>Note</p> <p>Iceberg\u2019s python libraries are still under active development. Actions against catalogs in pyspark still have to go through the jvm objects. See the demo directory for details.</p>"},{"location":"tools/iceberg/spark/#configuration","title":"Configuration","text":"<p>The Nessie Catalog needs the following parameters set in the Spark/Hadoop config.</p> <p>These are set as follows in code (or through other methods as described here)</p> <p>In these examples, <code>spark.jars.packages</code> is configured for Spark 3.3.x.  Consult the table above to find the version of that correspond to your Spark deployment.</p> Java <pre><code>// Full url of the Nessie API endpoint to nessie\nString url = \"http://localhost:19120/api/v1\";\n// Where to store nessie tables\nString fullPathToWarehouse = ...;\n// The ref or context that nessie will operate on\n// (if different from default branch).\n// Can be the name of a Nessie branch or tag name.\nString ref = \"main\";\n// Nessie authentication type (BASIC, NONE or AWS)\nString authType = \"NONE\";\n\n//for a local spark instance\nconf.set(\"spark.jars.packages\", \"org.apache.iceberg:iceberg-spark-runtime-3.3_2.12:1.0.0,org.projectnessie:nessie-spark-extensions-3.3_2.12:0.48.2\")\n.set(\"spark.sql.extensions\", \"org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions,org.projectnessie.spark.extensions.NessieSparkSessionExtensions\")\n.set(\"spark.sql.catalog.nessie.uri\", url)\n.set(\"spark.sql.catalog.nessie.ref\", ref)\n.set(\"spark.sql.catalog.nessie.authentication.type\", authType)\n.set(\"spark.sql.catalog.nessie.catalog-impl\", \"org.apache.iceberg.nessie.NessieCatalog\")\n.set(\"spark.sql.catalog.nessie.warehouse\", fullPathToWarehouse)\n.set(\"spark.sql.catalog.nessie\", \"org.apache.iceberg.spark.SparkCatalog\");\nspark = SparkSession.builder()\n.master(\"local[2]\")\n.config(conf)\n.getOrCreate();\n</code></pre> Python <pre><code># Full url of the Nessie API endpoint to nessie\nurl = \"http://localhost:19120/api/v1\"\n# Where to store nessie tables\nfull_path_to_warehouse = ...\n# The ref or context that nessie will operate on (if different from default branch).\n# Can be the name of a Nessie branch or tag name.\nref = \"main\"\n# Nessie authentication type (BASIC, NONE or AWS)\nauth_type = \"NONE\"\n\n    # here we are assuming NONE authorisation\n    spark = SparkSession.builder \\\n            .config(\"spark.jars.packages\",\"org.apache.iceberg:iceberg-spark-runtime-3.3_2.12:1.0.0,org.projectnessie:nessie-spark-extensions-3.3_2.12:0.48.2\") \\\n            .config(\"spark.sql.extensions\", \"org.apache.iceberg.spark.extensions.IcebergSparkSessionExtensions,org.projectnessie.spark.extensions.NessieSparkSessionExtensions\") \\\n            .config(\"spark.sql.catalog.nessie.uri\", url) \\\n            .config(\"spark.sql.catalog.nessie.ref\", ref) \\\n            .config(\"spark.sql.catalog.nessie.authentication.type\", auth_type) \\\n            .config(\"spark.sql.catalog.nessie.catalog-impl\", \"org.apache.iceberg.nessie.NessieCatalog\") \\\n            .config(\"spark.sql.catalog.nessie.warehouse\", full_path_to_warehouse) \\\n            .config(\"spark.sql.catalog.nessie\", \"org.apache.iceberg.spark.SparkCatalog\") \\\n            .getOrCreate()\n</code></pre> <p>All configuration for the Nessie catalog exists below this <code>spark.sql.catalog.nessie</code> configuration namespace. The catalog name is not important, it is important that the required options are all given below the catalog name.</p> <p>The following properties are required in Spark when creating the Nessie Catalog (replace <code>&lt;catalog_name&gt;</code> with the name of your catalog):</p> <ul> <li><code>spark.sql.catalog.&lt;catalog_name&gt;.uri</code> : The location of the Nessie server.</li> <li><code>spark.sql.catalog.&lt;catalog_name&gt;.ref</code> : The default Nessie branch that the iceberg   catalog will use.</li> <li><code>spark.sql.catalog.&lt;catalog_name&gt;.authentication.type</code> : The authentication type to be used, set to <code>NONE</code> by default. Please refer to the authentication docs for more info.</li> <li><code>spark.sql.catalog.&lt;catalog_name&gt;.catalog-impl</code> : This must be <code>org.apache.iceberg.nessie.NessieCatalog</code> in order to tell Spark to use Nessie catalog implementation.</li> <li><code>spark.sql.catalog.&lt;catalog_name&gt;.warehouse</code> : The location where to store Iceberg tables managed by Nessie catalog.</li> <li><code>spark.sql.catalog.&lt;catalog_name&gt;</code> : This must be <code>org.apache.iceberg.spark.SparkCatalog</code>. This is a Spark   option to set the catalog <code>&lt;catalog_name&gt;</code> to be managed by Nessie\u2019s Catalog implementation.</li> </ul> <p>Note</p> <p>An example of configuring Spark with Iceberg and an S3 bucket for the <code>warehouse</code> location is available in the Guides section.</p>"},{"location":"tools/iceberg/spark/#writing","title":"Writing","text":"<p>Spark support is constantly evolving and the differences in Spark3 vs Spark2.4 are considerable. See the iceberg docs for an up-to-date support table.</p>"},{"location":"tools/iceberg/spark/#spark2","title":"Spark2","text":"<p>Spark2.4 supports reads, appends, overwrites in Iceberg. Nessie tables in iceberg can be written via the Nessie Iceberg Catalog instantiated above. Iceberg in Spark2.4 has no ability to create tables so before a table can be appended to or overwritten the table must be first created via an Iceberg Catalog. This is straightforward in Java but requires addressing jvm objects directly in Python (until the python library for iceberg is released).</p> Java <pre><code>// first instantiate the catalog\nNessieCatalog catalog = new NessieCatalog();\ncatalog.setConf(sc.hadoopConfiguration());\n// other catalog properties can be added based on the requirement. For example, \"io-impl\",\"authentication.type\", etc.\ncatalog.initialize(\"nessie\", ImmutableMap.of(\n\"ref\", ref,\n\"uri\", url,\n\"warehouse\", pathToWarehouse));\n\n// Creating table by first creating a table name with namespace\nTableIdentifier region_name = TableIdentifier.parse(\"testing.region\");\n\n// next create the schema\nSchema region_schema = Schema([\nTypes.NestedField.optional(1, \"R_REGIONKEY\", Types.LongType.get()),\nTypes.NestedField.optional(2, \"R_NAME\", Types.StringType.get()),\nTypes.NestedField.optional(3, \"R_COMMENT\", Types.StringType.get()),\n]);\n\n// and the partition\nPartitionSpec region_spec = PartitionSpec.unpartitioned();\n\n// finally create the table\ncatalog.createTable(region_name, region_schema, region_spec);\n</code></pre> Python <pre><code>sc = spark.sparkContext\njvm = sc._gateway.jvm\n\n# import jvm libraries for iceberg catalogs and schemas\njava_import(jvm, \"org.projectnessie.iceberg.NessieCatalog\")\njava_import(jvm, \"org.apache.iceberg.catalog.TableIdentifier\")\njava_import(jvm, \"org.apache.iceberg.Schema\")\njava_import(jvm, \"org.apache.iceberg.types.Types\")\njava_import(jvm, \"org.apache.iceberg.PartitionSpec\")\n\n# first instantiate the catalog\ncatalog = jvm.NessieCatalog()\ncatalog.setConf(sc._jsc.hadoopConfiguration())\n# other catalog properties can be added based on the requirement. For example, \"io-impl\",\"authentication.type\", etc.\ncatalog.initialize(\"nessie\", {\"ref\": ref,\n    \"uri\": url,\n    \"warehouse\": pathToWarehouse})\n\n# Creating table by first creating a table name with namespace\nregion_name = jvm.TableIdentifier.parse(\"testing.region\")\n\n# next create the schema\nregion_schema = jvm.Schema([\n  jvm.Types.NestedField.optional(\n    1, \"R_REGIONKEY\", jvm.Types.LongType.get()\n  ),\n  jvm.Types.NestedField.optional(\n    2, \"R_NAME\", jvm.Types.StringType.get()\n  ),\n  jvm.Types.NestedField.optional(\n    3, \"R_COMMENT\", jvm.Types.StringType.get()\n  ),\n])\n\n# and the partition\nregion_spec = jvm.PartitionSpec.unpartitioned()\n\n# finally create the table\nregion_table = catalog.createTable(region_name, region_schema, region_spec)\n</code></pre> <p>When looking at the Python code above, lines 1-11 are importing jvm objects into pyspark. Lines 12-25 create the table name, schema and partition spec. These actions will be familiar to seasoned iceberg users and are wholly iceberg operations. Line 29 is where our initial iceberg metadata is finally written to disk and a commit takes place on Nessie.</p> <p>Now that we have created an Iceberg table in nessie we can write to it. The iceberg <code>DataSourceV2</code> allows for either <code>overwrite</code> or <code>append</code> mode in a standard <code>spark.write</code>.</p> Java <pre><code>regionDf = spark.read().load(\"data/region.parquet\");\nregionDf.write().format(\"iceberg\").mode(\"overwrite\")\n.save(\"nessie.testing.region\");\n</code></pre> Python <pre><code>region_df = spark.read.load(\"data/region.parquet\")\nregion_df.write.format(\"iceberg\").mode(\"overwrite\") \\\n    .save(\"nessie.testing.region\")\n</code></pre> <p>Here we simply read a file from the default filesystem and write it to an existing nessie iceberg table. This will trigger a commit on current context\u2019s branch.</p> <p>For the examples above we have performed commits on the branch specified when we set our spark configuration. Had we not specified the context in our spark configuration all operations would have defaulted to the default branch defined by the server. This is a strong pattern for a spark job which is for example writing data as part of a wider ETL job. It will only ever need one context or branch to write to. If however you are running an interactive session and would like to write to a specific branch you would have to create a new Spark Conf.</p> Java <pre><code>sparkDev = spark.newSession();\nsparkDev.conf.set(\"spark.sql.catalog.nessie.ref\", \"dev\");\nregionDf = sparkDev.read().load(\"data/region.parquet\");\nregionDf.write().format(\"iceberg\").mode(\"overwrite\")\n.save(\"nessie.testing.region\");\n</code></pre> Python <pre><code>spark_dev = spark.newSession()\nspark_dev.conf.set(\"spark.sql.catalog.nessie.ref\", \"dev\")\nregion_df = spark_dev.read.load(\"data/region.parquet\")\nregion_df.write.format(\"iceberg\").mode(\"overwrite\") \\\n    .save(\"nessie.testing.region\")\n</code></pre> <p>Note the extra <code>option</code> clause in the write command. This will ensure the commit happens on the <code>dev</code> branch rather than the default branch.</p>"},{"location":"tools/iceberg/spark/#spark3","title":"Spark3","text":"<p>The write path for Spark3 is slightly different and easier to work with. These changes haven\u2019t made it to pyspark yet so writing dataframes looks much the same there, including having to create the table. Spark3 table creation/insertion is as follows:</p> Java <pre><code>regionDf = spark.read().load('data/region.parquet');\n//create\nregionDf.writeTo(\"nessie.testing.region\").create();\n//append\nregionDf.writeTo(\"nessie.testing.region\").append();\n//overwrite partition\nregionDf.writeTo(\"nessie.testing.region\").overwritePartitions();\n</code></pre> Python <pre><code># same code as the spark2 section above to create the testing.region table\nregion_df = spark.read.load(\"data/region.parquet\")\nregion_df.write.format(\"iceberg\").mode(\"overwrite\") \\\n    .save(\"nessie.testing.region\")\n</code></pre> SQL <pre><code>CREATE TABLE nessie.testing.city (\nC_CITYKEY BIGINT, C_NAME STRING, N_NATIONKEY BIGINT, C_COMMENT STRING\n) USING iceberg PARTITIONED BY (N_NATIONKEY)\n-- AS SELECT .. can be added to the sql statement to perform a CTAS\n\nINSERT INTO nessie.testing.city VALUES (1, 'a', 1, 'comment')\n</code></pre> <p>The full list of operations can be found here. Everything that Iceberg supports the Nessie Iceberg Catalog also supports.</p>"},{"location":"tools/iceberg/spark/#reading","title":"Reading","text":"<p>Reading is more straightforward between spark 2 and spark 3. We will look at both versions together in this section. To read a Nessie table in iceberg simply:</p> Java <pre><code>// Spark2:\nregionDf = spark.read().format(\"iceberg\")\n.load(\"nessie.testing.region\");\n\n// Spark3:\nregionDf = spark.table(\"nessie.testing.region\");\n</code></pre> Python <pre><code># same code as above to create the testing.region table\nregion_df = spark.read.format(\"iceberg\").load(\"nessie.testing.region\")\n</code></pre> SQL <p><pre><code>-- Spark3 only\nSELECT * FROM nessie.testing.city\n</code></pre> <pre><code>-- Spark3 only, read from the `etl` branch\nSELECT * FROM nessie.testing.`city@etl`\n</code></pre></p> <p>The examples above all use the default branch defined on initialisation. There are several ways to reference specific branches or hashes from within a read statement. We will take a look at a few now from pyspark3, the rules are the same across all environments though. The general pattern is <code>&lt;table&gt;@&lt;branch&gt;</code>. Table must be present and either branch and/or hash are optional. We will throw an error if branch or hash don\u2019t exist. Branch or hash references in the table name will override passed <code>option</code>s and the settings in the Spark/Hadoop configs.</p> <pre><code># read from branch dev\nspark.read().format(\"iceberg\").load(\"testing.region@dev\")\n# read specifically from hash\nspark.read().format(\"iceberg\").load(\"testing.region@&lt;hash&gt;\")\n\nspark.sql(\"SELECT * FROM nessie.testing.`region@dev`\")\nspark.sql(\"SELECT * FROM nessie.testing.`region@&lt;hash&gt;`\")\n</code></pre> <p>Notice in the SQL statements the <code>table@branch</code> must be escaped separately from namespace or catalog arguments.</p> <p>Future versions may add the ability to specify a timestamp to query the data at a specific point in time (time-travel). In the meantime the history can be viewed on the command line or via the python client and a specific hash based on commit time can be extracted for use in the spark catalog. It is recommended to use the time-travel features of Nessie over the Iceberg features as Nessie history is consistent across the entire database.</p>"},{"location":"try/","title":"Overview","text":"<p>For a quick overview of nessie capabilities, several demos which do not require any special setup except for a web browser have been made available:</p> <ul> <li>Nessie, Iceberg and Spark via Binder</li> <li>Nessie, Deltalake and Spark via Binder</li> <li>Nessie, Iceberg and Flink via Binder</li> <li>Nessie, Iceberg and Hive via Binder</li> </ul> <p>The nessie-demos repository contains a full list of all available Jupyter Notebooks that show how nessie can be used with other technologies.</p> <p>For people who are interested in trying out all nessie features, they can use the docker images published with each release and set up the server by following the instructions available here</p> <p>Note</p> <p>Please refer the compatibility matrix to find the compatible versions to try out manually.   </p>"},{"location":"try/authentication/","title":"Authentication","text":"<p>By default, Nessie servers run with authentication disabled and all requests are processed under the \u201canonymous\u201d user identity. In Nessie clients this authentication type is known as <code>NONE</code>.</p> <p>When a Nessie server runs as an AWS Lambda, access to its API is controlled by AWS authentication settings. In this case there is no need to configure any additional authentication in the Nessie server. In Nessie clients this authentication type is known as <code>AWS</code>.  </p> <p>When a Nessie API is exposed to clients without any external authentication layer, the server itself can be configured to authenticate clients using OpenID tokens as described in the section below. On the client side this authentication type is known as <code>BEARER</code> authentication.</p> <p>For client-side authentication settings refer to the following pages:</p> <ul> <li>Nessie CLI</li> <li>Java Client</li> <li>Authentication in Tools</li> </ul>"},{"location":"try/authentication/#openid-bearer-tokens","title":"OpenID Bearer Tokens","text":"<p>Nessie supports bearer tokens and uses OpenID Connect for validating them.</p> <p>To enable bearer authentication the following configuration properties need to be set  for the Nessie Server process:</p> <ul> <li><code>nessie.server.authentication.enabled=true</code></li> <li><code>quarkus.oidc.auth-server-url=&lt;OpenID Server URL&gt;</code></li> <li><code>quarkus.oidc.client-id=&lt;Client ID&gt;</code></li> </ul> <p>When using Nessie Docker images, the authentication options can be specified on the <code>docker</code> command line as environment variables, for example:</p> <pre><code>$ docker run -p 19120:19120 -e QUARKUS_OIDC_CLIENT_ID=&lt;Client ID&gt; -e QUARKUS_OIDC_AUTH_SERVER_URL=&lt;OpenID Server URL&gt;\n -e NESSIE_SERVER_AUTHENTICATION_ENABLED=true --network host projectnessie/nessie\n</code></pre> <p>Note the use of the <code>host</code> Docker network. In this example, it is assumed that the Open ID Server is available on the host network. More advanced network setup is possible, of course.</p>"},{"location":"try/configuration/","title":"Configuration","text":"<p>The Nessie server is configurable via properties as listed in the application.properties file. These properties can be set when starting up the docker image by adding them to the Docker invocation prefixed with <code>-D</code>.  For example, if you want to  set Nessie to use the INMEMORY version store running on port 8080, you would run the  following:</p> <pre><code>docker run -p 8080:8080 projectnessie/nessie \\\n-Dnessie.version.store.type=INMEMORY \\\n-Dquarkus.http.port=8080\n</code></pre>"},{"location":"try/configuration/#core-nessie-configuration-settings","title":"Core Nessie Configuration Settings","text":""},{"location":"try/configuration/#core-settings","title":"Core Settings","text":"Property Default values Type Description <code>nessie.server.default-branch</code> <code>main</code> <code>String</code> Sets the default branch to use if not provided by the user. <code>nessie.server.send-stacktrace-to-client</code> <code>false</code> <code>boolean</code> Sets if server stack trace should be sent to the client in case of error."},{"location":"try/configuration/#version-store-settings","title":"Version Store Settings","text":"Property Default values Type Description <code>nessie.version.store.type</code> <code>INMEMORY</code> <code>VersionStoreType</code> Sets which type of version store to use by Nessie. Possible values are: <code>DYNAMO</code>, <code>INMEMORY</code>, <code>ROCKS</code>, <code>MONGO</code>, <code>TRANSACTIONAL</code>. <code>nessie.version.store.trace.enable</code> <code>true</code> <code>boolean</code> Sets whether calls against the version-store are traced with OpenTracing/OpenTelemetry (Jaeger). <code>nessie.version.store.metrics.enable</code> <code>true</code> <code>boolean</code> Sets whether metrics for the version-store are enabled."},{"location":"try/configuration/#transactional-version-store-settings-since-nessie-0250","title":"Transactional Version Store Settings (Since Nessie 0.25.0)","text":"<p>When setting <code>nessie.version.store.type=TRANSACTIONAL</code> which enables transactional/RDBMS as the version store used by the Nessie server, the following configurations are applicable in combination with <code>nessie.version.store.type</code>:</p> <p>Info</p> <p>A complete set of JDBC configuration options for Quarkus can be found on quarkus.io</p>"},{"location":"try/configuration/#rocksdb-version-store-settings","title":"RocksDB Version Store Settings","text":"<p>When setting <code>nessie.version.store.type=ROCKS</code> which enables RockDB as the version store used by the Nessie server, the following configurations are applicable in combination with <code>nessie.version.store.type</code>:</p> Property Default values Type Description <code>nessie.version.store.rocks.db-path</code> <code>/tmp/nessie-rocksdb</code> <code>String</code> Sets RocksDB storage path, e.g: <code>/tmp/rocks-nessie</code>."},{"location":"try/configuration/#mongodb-version-store-settings","title":"MongoDB Version Store Settings","text":"<p>When setting <code>nessie.version.store.type=MONGO</code> which enables MongoDB as the version store used by the Nessie server, the following configurations are applicable in combination with <code>nessie.version.store.type</code>:</p> Property Default values Type Description <code>quarkus.mongodb.database</code> <code>String</code> Sets MongoDB database name. <code>quarkus.mongodb.connection-string</code> <code>String</code> Sets MongoDB connection string. <p>Info</p> <p>A complete set of MongoDB configuration options for Quarkus can be found on quarkus.io</p>"},{"location":"try/configuration/#dynamodb-version-store-settings","title":"DynamoDB Version Store Settings","text":"<p>When setting <code>nessie.version.store.type=DYNAMO</code> which enables DynamoDB as the version store used by the Nessie server, the following configurations are applicable in combination with <code>nessie.version.store.type</code>:</p> Property Default values Type Description <code>quarkus.dynamodb.aws.region</code> <code>String</code> Sets DynamoDB AWS region. <code>quarkus.dynamodb.aws.credentials.type</code> Sets the credentials provider that should be used to authenticate with AWS. <code>quarkus.dynamodb.endpoint-override</code> <code>URI</code> Sets the endpoint URI with which the SDK should communicate. If not specified, an appropriate endpoint to be used for the given service and region. <code>quarkus.dynamodb.sync-client.type</code> <code>url</code> <code>url, apache</code> Sets the type of the sync HTTP client implementation <p>Info</p> <p>A complete set of DynamoDB configuration options for Quarkus can be found on quarkiverse.github.io</p>"},{"location":"try/configuration/#version-store-advanced-settings","title":"Version Store Advanced Settings","text":"<p>The following configurations are advanced configurations to configure how Nessie will store the data into the configured data store:</p> Property Default values Type Description <code>nessie.version.store.advanced.repository-id</code> <code>String</code> Sets Nessie repository ID (optional). This ID can be used to distinguish multiple Nessie repositories that reside in the same storage instance. <code>nessie.version.store.advanced.parent-per-commit</code> <code>20</code> <code>int</code> Sets the number of parent-commit-hashes stored in Nessie store. <code>nessie.version.store.advanced.key-list-distance</code> <code>20</code> <code>int</code> Each n-th <code>CommitLogEntry</code>, where <code>n == value</code> of this parameter, will contain a \u201cfull\u201d KeyList. <code>nessie.version.store.advanced.max-key-list-size</code> <code>250_000</code> <code>int</code> Sets the maximum size of a database object/row. This parameter is respected for the key list in <code>CommitLogEntry</code>. This value must not be \u201con the edge\u201d - means: it must leave enough room for a somewhat large-ish list <code>nessie.version.store.advanced.max-key-list-entity-size</code> <code>1_000_000</code> <code>int</code> Sets the maximum size of a database object/row. This parameter is respected for <code>KeyListEntity</code>. This value must not be \u201con the edge\u201d - means: it must leave enough room for a somewhat large-ish list <code>nessie.version.store.advanced.commit-timeout</code> <code>500</code> <code>int</code> Sets the timeout for CAS-like operations in milliseconds. <code>nessie.version.store.advanced.commit-retries</code> <code>Integer.MAX_VALUE</code> <code>int</code> Sets the maximum retries for CAS-like operations. <code>nessie.version.store.advanced.attachment-keys-batch-size</code> <code>100</code> <code>int</code> Sets the number of content attachments that are written or retrieved at once. Some implementations may silently adapt this value to database limits or implementation requirements. <code>nessie.version.store.advanced.tx.batch-size</code> <code>20</code> <code>int</code> Sets the DML batch size, used when writing multiple commits to a branch during a transplant or merge operation or when writing \u201coverflow full key-lists\u201d. <code>nessie.version.store.advanced.tx.jdbc.catalog</code> <code>String</code> Sets the catalog name to use via JDBC. <code>nessie.version.store.advanced.tx.jdbc.schema</code> <code>String</code> Sets the schema name to use via JDBC. <code>nessie.version.store.advanced.references.segment.prefetch</code> <code>1</code> <code>int</code> Sets the number of reference name segments to prefetch. <code>nessie.version.store.advanced.references.segment.size</code> <code>250_000</code> <code>int</code> Sets the size of a reference name segments. <code>nessie.version.store.advanced.reference.names.batch.size</code> <code>25</code> <code>int</code> Sets the number of references to resolve at once when fetching all references. <code>nessie.version.store.advanced.ref-log.stripes</code> <code>8</code> <code>int</code> Sets the number of stripes for the ref-log. <code>nessie.version.store.advanced.commit-log-scan-prefetch</code> <code>25</code> <code>int</code> Sets the amount of commits to ask the database to pre-fetch during a full commits scan. <code>nessie.version.store.advanced.assumed-wall-clock-drift-micros</code> <code>5_000_000</code> <code>long</code> Sets the assumed wall-clock drift between multiple Nessie instances, in microseconds."},{"location":"try/configuration/#authentication-settings","title":"Authentication settings","text":"Property Default values Type Description <code>nessie.server.authentication.enabled</code> <code>false</code> <code>boolean</code> Sets whether authentication should be enabled on the Nessie server. <code>quarkus.oidc.auth-server-url</code> <code>String</code> Sets the base URL of the OpenID Connect (OIDC) server if <code>nessie.server.authentication.enabled=true</code> <code>quarkus.oidc.client-id</code> <code>String</code> Sets client-id of the application if <code>nessie.server.authentication.enabled=true</code>. Each application has a client-id that is used to identify the application."},{"location":"try/configuration/#authorization-settings","title":"Authorization settings","text":"Property Default values Type Description <code>nessie.server.authorization.enabled</code> <code>false</code> <code>boolean</code> Sets whether authorization should be enabled on the Nessie server. <code>nessie.server.authorization.rules.&lt;ruleId&gt;</code> <code>Map</code> Sets the authorization rules that can be used in CEL format."},{"location":"try/configuration/#quarkus-server-settings-related-to-nessie","title":"Quarkus Server Settings Related to Nessie","text":"Property Default values Type Description <code>quarkus.http.port</code> <code>19120</code> <code>int</code> Sets the HTTP port <code>quarkus.http.auth.basic</code> <code>boolean</code> Sets if basic auth should be enabled. <p>Info</p> <p>A complete set of configuration options for Quarkus can be found on quarkus.io</p>"},{"location":"try/configuration/#metrics","title":"Metrics","text":"<p>Metrics are published using prometheus and can be collected via standard methods. See: Prometheus.</p>"},{"location":"try/configuration/#swagger-ui","title":"Swagger UI","text":"<p>The Swagger UI allows for testing the REST API and reading the API docs. It is available  via localhost:19120/q/swagger-ui</p>"},{"location":"try/docker/","title":"Setting Up Nessie","text":"<p>As part of each release, Nessie is made available as a fast-start docker image. This is the easiest and fastest way to try out nessie locally and test all its capabilities. The image is relatively small and builds on top of standard base images. To get started:</p> <pre><code>$ docker pull projectnessie/nessie\n</code></pre> <pre><code>Pulling from projectnessie/nessie\n0fd3b5213a9b: Already exists\naebb8c556853: Already exists\na50558612231: Pull complete\nDigest: sha256:bda3dead4eb51a4c0ff87c7ce5a81ad49a37dd17d785f2549f4559f06cbf24d6\nStatus: Downloaded newer image for projectnessie/nessie\n</code></pre> <pre><code>$ docker run -p 19120:19120 projectnessie/nessie\n</code></pre> <pre><code>__  ____  __  _____   ___  __ ____  ______\n --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/\n -/ /_/ / /_/ / __ |/ , _/ ,&lt; / /_/ /\\ \\\n--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/\n2020-10-01 21:50:27,166 INFO  [io.quarkus] (main) nessie-quarkus 0.1-SNAPSHOT native (powered by Quarkus 1.8.1.Final) started in 0.025s. Listening on: http://0.0.0.0:19120\n2020-10-01 21:50:27,166 INFO  [io.quarkus] (main) Profile prod activated.\n2020-10-01 21:50:27,166 INFO  [io.quarkus] (main) Installed features: [amazon-dynamodb, cdi, hibernate-validator, jaeger, resteasy, resteasy-jackson, security, security-properties-file, sentry, smallrye-health, smallrye-metrics, smallrye-openapi, smallrye-opentracing]\n</code></pre> <p>Once the docker image is up and running, you can install the Nessie cli.</p> <pre><code>$ pip install pynessie\n</code></pre> <p>You\u2019re now ready to start using Nessie. To create a new branch, you can do the following:</p> <pre><code># create a branch pointing to the same hash as\n# the current default branch (typically the main branch)\n$ nessie branch my_branch\n</code></pre> <p>From there, you can use one of the three main Nessie integrations of:</p> <ul> <li>Take a look at your current empty repository in the Web UI</li> <li>NessieCatalog for Spark via Iceberg integration</li> <li>Nessie Log Handle for Spark via Delta Lake integration</li> </ul>"},{"location":"try/grafana/","title":"Nessie Grafana Dashboard","text":"<p>Nessie provides a Grafana Dashboard which can be used to gain insight into different metrics.  Additional docs can be found in the Nessie source code repository.</p>"},{"location":"try/helm/","title":"Nessie Helm Chart","text":"<p>The easiest way to get started with Nessie is to use the Helm chart.</p> <p>Add the Nessie Helm repo: <pre><code>helm repo add nessie-helm https://charts.projectnessie.org\nhelm repo update\n</code></pre></p> <p>Install the Helm chart: <pre><code>helm install -n nessie-ns nessie nessie-helm/nessie\n</code></pre></p> <p>Additional docs (incl. configuration settings) can be found here. </p>"},{"location":"try/releases/","title":"Releases","text":"<p>See Nessie Server upgrade notes for supported upgrade paths.</p>"},{"location":"try/releases/#0482-release-february-08-2023","title":"0.48.2 Release (February 08, 2023)","text":"<p>See Release information on GitHub.</p> <ul> <li>Fix dependencies in :nessie-compatibility-common (#6055)</li> <li>fix website link in README (#6056)</li> <li>Nit: rename build utility function to <code>buildForJava11</code> (#6053)</li> <li>Reenable JVM monitoring in native images (#6052)</li> <li>Cleanup InmemoryStore after tests (#6048)</li> <li>Cleanup README.md badges (#6051)</li> <li>CI: Prevent OOM/GCLocker-issue in tests / disable Micrometer JVM-Metrics for tests (#6050)</li> <li>Clear in-memory database-adapter between REST-tests in Quarkus (#6049)</li> </ul>"},{"location":"try/releases/#0481-release-february-06-2023","title":"0.48.1 Release (February 06, 2023)","text":"<p>See Release information on GitHub.</p> <ul> <li>Release-WF: Fix openapi yaml attachment (#6040)</li> </ul>"},{"location":"try/releases/#0480-release-february-06-2023","title":"0.48.0 Release (February 06, 2023)","text":"<p>See Release information on GitHub.</p> <ul> <li>Produce NessieBadRequestException when paging is not available (#6020)</li> <li>Quarkus builds: modernize &amp; simplify (#6019)</li> <li>Expose definitive Nessie API version to tests (#6021)</li> <li>CI: Gradle cache read-only for snapshot publication workflow (#6018)</li> <li>REST v2: return parent commit IDs in <code>CommitMeta.getParentCommitHashes</code> (#6001)</li> <li>REST API v2: get-multiple-namespaces w/ option for direct children (#6010)</li> <li>Quarkus-nit: build script cleanup (#6016)</li> <li>Refactor API v2 reference resolution logic into a utility class (#6012)</li> <li>Quarkus: make <code>QuarkusBuild</code> not caching (#6015)</li> <li>Add missing explicit rename-table test (#6008)</li> <li>Do not memoize CommitMeta.properties, it is derived (#6006)</li> <li>CI: Do not cache Python stuff (#6004)</li> <li>Add support for API v2 to the compatibility test framework (#6000)</li> <li>Add java client-based test for Entry.getContentId() (#5996)</li> <li>UI: Sort properties in commit details view (#5987)</li> <li>Allow retrieval of <code>Content</code> with <code>get-entries</code> for API v2 (#5985)</li> <li>CI: fix helm-testing action refs (#6005)</li> <li>CI: Helm testing (#6003)</li> <li>Revert \u201cMake <code>QuarkusBuild</code> cacheable\u201d (#5997)</li> <li>Nessie client doc improvements (#5992)</li> <li>Add effective-reference to get-entries, diff and modify-namespace responses (#5984)</li> <li>Build: Fix task dependency warnings for code coverage (#5990)</li> <li>Let content-generator use REST API v2 (#5948)</li> <li>REST API v2 : Let \u2018get-content(s)\u2019 return the reference (#5947)</li> <li>Minor convenience methods <code>getElementsArray()</code> to <code>ContentKey</code> + <code>Namespace</code> (#5983)</li> <li>Nit: Prevent java compilation warning (#5978)</li> <li>Re-make Gatling sims debuggable after the move to Gradle (#5972)</li> <li>Gatling Simulations - error out Nessie actions by default (#5971)</li> <li>Helm: Add storage class for RockDB PVC (#5981)</li> <li>Fix <code>MathAbsoluteNegative</code> in <code>NonTransactionalDatabaseAdapter</code> (#5979)</li> <li>Make <code>QuarkusBuild</code> cacheable (#5974)</li> <li>Add <code>@JsonView</code> really everywhere (#5965)</li> <li>Add PVC for RocksDB in Nessie Helm chart (#5952)</li> <li>Let Gatling simulations use Nessie API v2 (#5970)</li> <li>Build: Make <code>QuarkusGenerateCode</code> tasks cacheable (#5973)</li> <li>Nit: <code>var</code> -&gt; <code>val</code> in quarkus builds (#5975)</li> <li>Remove usage of deprecated <code>StreamingUtil</code> (#5954)</li> <li>Nit: typo (#5951)</li> <li>Add <code>@JsonView</code> everywhere (#5953)</li> <li>REST v2: Correct namespace key evaluation for delete + get-multiple namespaces (#5946)</li> <li>Minor: immutables contstructors for <code>Branch</code> + <code>Tag</code> + <code>Detached</code> (#5944)</li> <li>Replace use of unpaged <code>get()</code> when listing references from SQL extensions (#5950)</li> <li>Add utility method <code>CommitResponse.toAddedContentsMap()</code> (#5945)</li> <li>Minor Namespace.isEmpty() optimization (#5943)</li> <li>Use the Smallrye OpenAPI Gradle plugin (#5936)</li> <li>Add <code>.scalafmt.conf</code> for IntelliJ (#5942)</li> <li>Update merge \u201cno hashes\u201d error message (#5938)</li> <li>Separate version catalog for <code>buildSrc/</code> (#5935)</li> <li>Re-add batched access checks &amp; replace <code>j.s.AccessControlException</code> (#5930)</li> <li>Move Jersey test dependencies to where they belong to (#5933)</li> <li>Refactor Service/REST/API testing (#5924)</li> <li>Unify <code>*ApiImplWithAuthorization</code> and \u201cbase\u201d <code>*ApiImpl</code> classes (#5927)</li> <li>REST v2 - fetch HEAD if hashOnRef is not specified (#5921)</li> <li>Prepare protocol independent pagination support for diff, get entries, commit log, get all refs (#5901)</li> <li>Just rename test classes (#5920)</li> <li>DatabaseAdapterExtension: configure database-adapter via a nested test class\u2019 parent context (#5919)</li> <li>Bump Spark to 3.1.3/3.2.3/3.3.1 (#5909)</li> <li>CI/Win: exclude UI tests (#5908)</li> </ul>"},{"location":"try/releases/#0471-release-january-20-2023","title":"0.47.1 Release (January 20, 2023)","text":"<p>See Release information on GitHub.</p> <ul> <li>Fix Jacoco reporting in Nessie Quarkus projects (#5902)</li> <li>Return latest state of deleted reference (#5905)</li> <li>Disable JVM monitoring in native images (#5903)</li> </ul>"},{"location":"try/releases/#0470-release-january-18-2023","title":"0.47.0 Release (January 18, 2023)","text":"<p>See Release information on GitHub.</p> <ul> <li>Use custom CDI extension for injecting Principals (#5883)</li> <li>Update V2 commit-response to include generated content-IDs (#5880)</li> <li>Add content-ID to REST API v2 entries endpoint (#5879)</li> <li>Gatling: properly prefer <code>sim.duration.seconds</code> over <code>sim.commits</code> (#5847)</li> <li>Spark extensions tests - no CID for new content &amp; common-ancestor (#5877)</li> <li>Content generator: no CID for new content, properly use expectedContent+CID for existing (#5876)</li> <li>Deltalake: no CID for new content, properly use expectedContent+CID for existing (#5875)</li> <li>Quarkus &amp; JAX-RS tests - no CID for new content &amp; common-ancestor (#5874)</li> <li>Do not expose junit-jupiter-engine via test artifacts (#5870)</li> <li>Gatling: allow running the Gatling simulations against an external Nessie (#5848)</li> <li>Testing: unify container start retry mechanism (#5844)</li> <li>Testing/benchmarking: fix configuration for persist-bench via system properties (#5843)</li> <li>Add macOS + Windows build check badges to README.md (#5849)</li> <li>Use REST API v2 in Gatling simulations (#5846)</li> <li>Testing: use full Quarkus listen-URL instead of just the port (#5845)</li> <li>GH WF: simplify some steps (#5869)</li> </ul>"},{"location":"try/releases/#0467-release-january-12-2023","title":"0.46.7 Release (January 12, 2023)","text":"<p>See Release information on GitHub.</p> <ul> <li>Expose Nessie API version to custom client builders in tests (#5839)</li> </ul>"},{"location":"try/releases/#0465-release-january-12-2023","title":"0.46.5 Release (January 12, 2023)","text":"<p>See Release information on GitHub.</p> <ul> <li>CI: Fix jobs.if condition for mac+win workflows (#5840)</li> <li>nessie-quarkus-cli/jacoco: use a fresh jacoco data file (#5833)</li> <li>CI: cross-check macOS + Windows (#5705)</li> <li>Validate runtime parameters in service implementations. (#5828)</li> <li>Testcontainers: retry container launch (#5831)</li> <li>Test/CI: Introduce test parallelism constraints for test tasks (#5824)</li> <li>Actually assign <code>main</code> in AbstractContentGeneratorTest (#5830)</li> <li>Exclude compatibility tests from code-coverage (#5826)</li> <li>Disable Deltalog integration tests on Windows (#5825)</li> <li>Disable Deltalog integration tests on macOS (#5822)</li> <li>Disable tests on projects using testcontainers on Windows (#5817)</li> <li>Disable quarkus-jacoco on <code>:nessie-quarkus-cli</code> (#5820)</li> <li>Fix newline when testing under Windows (#5814)</li> <li>model/test: Platform independent line separator (#5815)</li> <li>Testing: add logging for projects using testcontainers (#5813)</li> <li>Testing: allow <code>test.log.level</code> in compatibility tests (#5812)</li> <li>Nit: compatibility-tests: remove wrong comment (#5816)</li> <li>Disable tests on Windows that have strict time requirements (#5807)</li> <li>Disable compatibility tests on Mac (#5805)</li> <li>GC/Tests: Ignore schema-less base-uri-test on Windows (#5804)</li> <li>Prevent using the Minio Extension on non-Linux OS (#5803)</li> <li>Proper Path handling in GC tool CLI (#5799)</li> <li>Make LocalMongoResource a bit more resilient (#5802)</li> <li>Testcontainers: increase number of start attempts from 1 to 5 (#5801)</li> <li>Disable Quarkus dev services for tests (#5800)</li> <li>Proper Path handling in IcebergContentToFiles (#5798)</li> <li>Proper Path handling in TestNessieIcebergViews (#5797)</li> <li>Fix ZIP importer handle leak (#5796)</li> <li>CI: Fix results-upload for PRs (#5795)</li> <li>CI: Remove deprecated <code>::set-output</code> (#5794)</li> <li>Nit: Suppress ClassCanBeStatic warnings (#5793)</li> </ul>"},{"location":"try/releases/#0463-release-january-06-2023","title":"0.46.3 Release (January 06, 2023)","text":"<p>See Release information on GitHub.</p> <ul> <li>Remove grep -v from the HISTORY.rst generation script (#5778)</li> <li>Fix MultiEnvTestFilter to pass inner test classes (#5775)</li> <li>Make OlderNessieServersExtension inject Nessie URIs (#5770)</li> <li>Remove duplicate startHash call in <code>HttpGetCommitLog</code> (#5756)</li> </ul>"},{"location":"try/releases/#0462-release-december-28-2022","title":"0.46.2 Release (December 28, 2022)","text":"<p>See Release information on GitHub.</p> <ul> <li>Add validation annotations to backend service interfaces (#5740)</li> <li>Docs: Update README.md for 0.46.0 release (#5734)</li> </ul>"},{"location":"try/releases/#0460-release-december-20-2022","title":"0.46.0 Release (December 20, 2022)","text":"<p>See Release information on GitHub.</p> <ul> <li>Make generated OpenAPI type names more readable (#5732)</li> <li>Add serialized form tests for <code>CommitMeta</code> v2 (#5731)</li> <li>Add v2 attributes to <code>CommitMeta</code> (#5706)</li> <li>CI: No duplicate checkstyle task runs (#5703)</li> <li>Allow publishing Gradle build scans from CI (#5701)</li> <li>Remove legacy Spark extensions (#5704)</li> <li>Fix flaky TestKeyGenerator (#5702)</li> <li>Support merge/transplant message overrides (#5686)</li> <li>Add common ancestor commit in merge tests (#5696)</li> <li>Add global test timeout for versioned/persist/ (#5690)</li> <li>Add DeleteContent command (#4773)</li> <li>Expose updated reference data in java client APIs (#5670)</li> <li>Fix OpenAPI docs for the required \u201cexpected hash\u201d parameters (#5665)</li> <li>Expose MergeBehavior to java clients (#5682)</li> <li>Expose <code>CommitResponse</code> in java client API (#5673)</li> <li>Migrate <code>FetchOption</code> to the <code>model</code> package (#5667)</li> <li>Add README.md to model (#5668)</li> <li>Use API v2 in GC CLI (#5660)</li> <li>Add pagination params to the Diff API v2 (#5452)</li> <li>Replace deprecated native build parameters (#5662)</li> <li>Move Graal/native registration to nessie-quarkus-common (#5661)</li> <li>Increase gradle memory in integration tests (#5654)</li> <li>Remove unused Jaeger properties (#5647)</li> <li>Validate ID for explicitly created Namespaces (#5644)</li> <li>Gradle: no longer run test classes concurrently (#5653)</li> <li>Nit: remove TODO (#5652)</li> <li>Fix GetReferenceParams description for API v2 (#5639)</li> <li>Import: move repo-setup part to nessie-versioned-transfer (#5640)</li> <li>Export using reference/commit-log scanning (#5635)</li> <li>Switch nessie-client to use OpenTelemetry (#5607)</li> <li>Version-store tests: use proper Put operations (#5614)</li> <li>DatabaseAdapter/identify-heads-and-forks: Allow commit-log scanning (#5638)</li> <li>Version-store tests: Adjust test to currently undetected transplant conflict (#5613)</li> <li>DatabaseAdapterExtension: Allow adapter-configurations on fields (#5637)</li> <li>Export: store exporting Nessie version and show during import (#5636)</li> <li>Adopt REST tests to stricter validations (#5612)</li> <li>PersistVersionStore: expose missing additional-parents (#5633)</li> <li>Export/import: explicit tests for exporter/importer implementations (#5631)</li> <li>DatabaseAdapter/identifyHeadsAndForks: Don\u2019t return <code>NO_ANCESTOR</code> as fork point (#5632)</li> <li>Export/import: remove unused functionality from BatchWriter (#5630)</li> <li>Rely on new <code>NessieVersion</code> in CLI tools (#5629)</li> <li>Allow <code>-</code> as a reference name in v2 REST paths (#5618)</li> <li>Export/import: move file related code to separate package (#5628)</li> <li>Use soft-assertions in jaxrs-tests (#5610)</li> <li>Adopt versioned-tests to not set cid for \u201cnew\u201d <code>Content</code>; minor refactoring for merge/transplant (#5611)</li> <li>Deprecate commit lists in merge-results (#5599)</li> <li>Add Nessie version into nessie-model.jar (#5609)</li> <li>Minor verstion-store commit-log test refactoring (#5604)</li> <li>Minor merge test enhancements (#5603)</li> <li>Add \u201cdiff test\u201d with a key \u201cin between\u201d (#5602)</li> <li>Add a some test cases for \u201creference not found\u201d scenarios (#5601)</li> <li>Factory methods for EntriesResponse.Entry + DiffResponse.Entry + MergeResult.KeyDetails (#5600)</li> <li>Add expected content to v2 REST update namespace (#5598)</li> <li>Switch to OpenTelemetry in Nessie Quarkus server (#5605)</li> <li>Minor code clean-up in client-side Namespace operations (#5594)</li> <li>Fix v2 URL path mapping for getReferenceByName (#5596)</li> <li>Add REST API v2 (#5004)</li> <li>Fix <code>@Parameter</code> annotations in <code>DiffParams</code> (#5589)</li> <li>Build UI against Nessie API v1 from 0.45.0 (#5587)</li> </ul>"},{"location":"try/releases/#0450-release-november-29-2022","title":"0.45.0 Release (November 29, 2022)","text":"<p>See Release information on GitHub.</p> <ul> <li>Fix OpenAPI spec for DiffApi (#5584)</li> <li>Content generator: allow functional key patterns and more (#5575)</li> <li>CI: auto-destruct spawned Nessie Quarkus runner JVM (#5583)</li> <li>Scala/Gradle: keep Scala compiler alive, bump Scala 2.13 to 2.13.10 (#5576)</li> <li>Fix BaseExceptionMapper\u2019s NPE when an Exception\u2019s message is null (#5563)</li> <li>Add RefreshContent command (#5551)</li> <li>Fix erasing repo descriptions (#5557)</li> <li>Perftest: allow passing system properties to launched Nessie (#5556)</li> <li>Transfer: completely abstract <code>DatbaseAdapter</code> from core export/import (#5555)</li> <li>Remove dependency to database-adapter type from <code>ImportResult</code> (#5553)</li> <li>Deprecate <code>VersionStore.getRefLog()</code> (#5554)</li> <li>Nessie export/import: update abstraction for file-typed stuff (#5545)</li> <li>Nessie CLI: rename <code>call()</code> to <code>callWithDatabaseAdapter()</code> (#5540)</li> <li>Nessie import: check export version (#5543)</li> <li>Nessie CLI: Update wording for in-memory warning (#5542)</li> <li>Nessie/Quarkus: use <code>Instance&lt;DatabaseAdapter&gt;</code> (#5541)</li> <li>Update verification code for Nessie CLI erase-erpository (#5539)</li> <li>Add content-info Quarkus CLI command (#5501)</li> <li>Reduce memory pressure during Quarkus CLI integration tests. (#5530)</li> <li>Bump+change Quarkus builder image to Mandrel + 22.3 (#5526)</li> <li>renovate: put python back on weekly schedule (#5519)</li> <li>Docs: Update Spark Python/Java API docs (#5517)</li> <li>Fix latest Nessie and Iceberg versions in side docs (#5499)</li> <li>Refactor Nessie-Jax-RS extension a little bit (#5486)</li> <li>renovate: fix fileMatch regexp (#5489)</li> <li>fix renovate python requirements file pattern (#5481)</li> <li>Proper put-update-operation for namespace-update (#5484)</li> <li>Move tests from o.p.jaxrs to o.p.jaxrs.tests (#5483)</li> <li>Fix a few checkstyle warnings (#5482)</li> <li>Update protobuf plugin to 0.9.1 (#5457)</li> <li>Documentation accommodating new version format of Iceberg and Nessie artifacts (#5371)</li> <li>Pull <code>ProtobufHelperPlugin</code> from <code>gradle-build-plugins</code> (#5456)</li> <li>Refactor some test code to soft-assertions (#5446)</li> <li>Move Merge/Transplant classes to the api.v1.params package (#5435)</li> <li>Move old API classes into the api.v1 package (#5419)</li> <li>Move some tests from db-adapter test code to verstion-store test code (#5445)</li> <li>Support method-level NessieApiVersions annotations (#5436)</li> <li>Introduce multi-version API test framework (#5420)</li> <li>Extract service-side interfaces for RefLog and Namespace services (#5418)</li> <li>Extract common java client builder code (#5411)</li> <li>Extract service-side interfaces for client-facing services (#5412)</li> <li>Remove OpenAPI spec properties from build script. (#5413)</li> <li>Build UI against Nessie API v1 from 0.44.0 (#5408)</li> <li>Refactor TestAuthorizationRules (#5399)</li> <li>Java 11 HttpClient (#5280)</li> <li>Testing/nit: Logging for :nessie-s3minio ITs (#5398)</li> <li>Add non-trivial tests for assign branch/tag operations (#5395)</li> <li>Fix version in the Nessie Helm Chart (#5392)</li> <li>Extract a multi-env test engine into a module. (#5339)</li> <li>Move Nessie Client construction into a JUnit5 extension (#5370)</li> <li>Record next development version (#5387)</li> <li>GH workflows: Add missing <code>cache-read-only: true</code> (#5385)</li> <li>GH create release WF: next version not properly recorded (#5386)</li> </ul>"},{"location":"try/releases/#0440-release-october-18-2022","title":"0.44.0 Release (October 18, 2022)","text":"<p>See Release information on GitHub.</p> <ul> <li>Ninja: fix create-release WF</li> <li>Ninja: fix GH env reference</li> <li>Update README mentioning Iceberg 1.0 (#5384)</li> <li>Add Dan + Vladimir to devs list (#5381)</li> <li>GH release WF: default to \u201cminor\u201d version bump (#5380)</li> <li>GH release WF: Fix wrong task name (#5379)</li> <li>Automatically update release text files (#5377)</li> <li>GH release WF - fix log exclusion + log filter for rel-notes (#5378)</li> <li>Nessie GC: Docs (#5209)</li> <li>Nessie GC: Command line tool (#5227)</li> <li>Nessie GC: Iceberg functionality (#5207)</li> <li>Avoid direct dependency on iceberg-bundled-guava (#5366)</li> <li>quarkus-server tests use dynamic port from env (#5352)</li> <li>Fix missing placeholder for Preconditons.checkState (#5360)</li> <li>fix GH workflows still mentioning maven (#5353)</li> <li>Remove httpClient param from AbstractRest.init (#5354)</li> <li>Update pretty-ms to 8.x (#5341)</li> <li>DynamoDB related test changes (#5338)</li> <li>Split unsquashed merge tests into dedicated test methods (#5328)</li> <li>Update testing-library-react to 13.x (#5334)</li> <li>Bump actions/checkout from v3 to v3.1.0 (#5335)</li> <li>Update material-ui to mui 5.x.x (#5326)</li> <li>nessie-client/test: compress responses for all relevant HTTP methods (#5323)</li> <li>Fix micrometer path replacement patterns (#5321)</li> <li>Renovate: labels for java/javascript/python (#5318)</li> <li>Revert protobuf to 3.21.6 (#5317)</li> <li>Renovate: limit to 2 PRs per hour (#5319)</li> <li>Isolate http-level test from java client-level tests (#5314)</li> <li>Skip newer-java workflow on forks (#5294)</li> <li>Nessie client tests: Replace JDK\u2019s HTTP server w/ Jetty (#5285)</li> <li>Move internal classes of the Nessie HTTP client (#5286)</li> <li>GH/WF: Use <code>temurin</code> instead of \u2018zulu` (#5289)</li> <li>Nessie-client tests: do not compile w/ older Jackson versions (#5287)</li> <li>Test Nessie client with Java 8 (#5284)</li> <li>Integrate Jackson-version tests into Gradle build (#5279)</li> <li>Migrate to Gradle version catalogs (#5167)</li> <li>Unify Postgres container version declaration for tests</li> <li>Migrate from dependabot to renovate (#5166)</li> <li>Testing pre-requisites for Nessie GC: Two S3 testing projects (#5142)</li> <li>Fix iceberg verison on web site (#5222)</li> <li>Java 19 testing (#5221)</li> <li>Automatic patch releases (#5214)</li> <li>Unsupport 0.30.x versions (#5212)</li> <li>WF: Remove Maven part (#5213)</li> <li>Nessie GC: JDBC Live-Set-Repository (#5208)</li> <li>Allow Hadoop Spark config in tests (#5206)</li> <li>Nessie GC: mark &amp; sweep (<code>gc-base</code> module only) (#5144)</li> <li>Slight build scripts change for Java11+ target compat (#5203)</li> <li>Fix test failure caused by #5147 (#5204)</li> <li>No longer write ref-log entries for commit/merge/transplant (#5147)</li> <li>Schedule dependabot for npm + pip less frequently (#5201)</li> </ul>"},{"location":"try/releases/#0430-release-september-15-2022","title":"0.43.0 Release (September 15, 2022)","text":"<p>Rolling upgrades from versions before 0.40.0 are not supported!</p> <ul> <li>Prepare for Nessie GC</li> <li>Nessie export/import functionality</li> <li>Use Graal 22.2-java17 for native images</li> <li>Several test and build improvements</li> </ul>"},{"location":"try/releases/#0420-release-august-26-2022","title":"0.42.0 Release (August 26, 2022)","text":"<p>Rolling upgrades from versions before 0.40.0 are not supported!</p> <ul> <li>Key list creation fixes</li> <li>Pluggable content types</li> </ul>"},{"location":"try/releases/#0410-release-august-5-2022","title":"0.41.0 Release (August 5, 2022)","text":"<p>Rolling upgrades from versions before 0.40.0 are not supported!</p> <ul> <li>Do not persist and expose attached content metadata</li> <li>Fix issue when looking up key in an open-addressing-key-list</li> </ul>"},{"location":"try/releases/#0403-release-august-1-2022","title":"0.40.3 Release (August 1, 2022)","text":"<p>Rolling upgrades from versions before 0.40.0 are not supported!</p> <ul> <li>Remove Quarkus-BOM dependency from non-Quarkus projects</li> </ul>"},{"location":"try/releases/#0402-release-august-1-2022","title":"0.40.2 Release (August 1, 2022)","text":"<p>Rolling upgrades from versions before 0.40.0 are not supported!</p> <ul> <li>Dependency issues fixed</li> </ul>"},{"location":"try/releases/#0401-release-july-25-2022","title":"0.40.1 Release (July 25, 2022)","text":"<p>Rolling upgrades from versions before 0.40.0 are not supported!</p> <ul> <li>Fix key-lists issue resulting in server-errors (<code>ArrayIndexOutOfBoundsException</code>)</li> </ul>"},{"location":"try/releases/#0400-release-july-22-2022","title":"0.40.0 Release (July 22, 2022)","text":"<p>Rolling upgrades from earlier versions are not supported!</p> <ul> <li>Support Spark 3.1 (Scala 2.12), Spark 3.2 (Scala 2.12 + 2.13), Spark 3.3 (Scala 2.12 + 2.13)</li> <li>Support Iceberg 0.14.0</li> <li>Nessie Spark SQL extensions: handle timestamps w/ time-zones</li> <li>Nessie Spark SQL extensions: fix handling of <code>USE</code>d references for <code>CREATE/ASSIGN BRANCH/TAG</code></li> <li>Detailed merge/transplant result to allow inspection of conflicts</li> <li>Merge/transplant optionally allow \u201cforce-keep\u201d &amp; \u201cforce-merge\u201d of conflicting content-keys</li> <li>Iceberg table metadata stored in Nessie</li> <li>Improvements to REST error handling</li> <li>Performance improvements when there are many content-keys</li> <li>Hard limit on content-key length (max 20 elements, total 500 characters)</li> <li>Prevent (accidental) deletion of default branch</li> <li>Improved usage of automatic paging via <code>NessieApi</code></li> <li>Improvements to Nessie server health checks</li> <li>Add rolling-upgrade test suite in regular CI</li> <li>Daily testing against Java 17 + newer</li> <li>Switched to Java 17 in native images</li> <li>Build switched from Maven to Gradle</li> </ul>"},{"location":"try/releases/#0300-release-may-13-2022","title":"0.30.0 Release (May 13, 2022)","text":"<ul> <li>Add commit-ID to KeyListEntry when writing new key-lists</li> <li>Do not process old key-lists when retrieving values</li> <li>Helm: Fix k8s version detection in ingress template</li> <li>Database-adapter: commit optimizations</li> <li>Remove the configurable default for the configurable values for getDefaultMaxKeyListSize</li> <li>Dynamo/Mongo/TX: use bulk/batch requests where possible</li> </ul>"},{"location":"try/releases/#0290-release-may-5-2022","title":"0.29.0 Release (May 5, 2022)","text":"<ul> <li>Spark SQL: Configure ref.hash for NessieCatalog only when explicitly requested</li> <li>Escape all column names in SQL DML+DDL statements</li> <li>Use hashOnRef when fetching Namespaces</li> <li>Helm: Add ingress support for Kubernetes &gt;=1.22</li> <li>Fix CockroachDB transaction-retry behavior</li> </ul>"},{"location":"try/releases/#0280-release-april-26-2022","title":"0.28.0 Release (April 26, 2022)","text":"<ul> <li>Generate unique content IDs for explicitly created namespaces</li> <li>Fix patterns for metrics</li> <li>Various test improvements (CI + build)</li> <li>Various minor code fixes (fixes for errorprone warnings)</li> </ul>"},{"location":"try/releases/#0270-release-april-14-2022","title":"0.27.0 Release (April 14, 2022)","text":"<ul> <li>Support for Namespace properties</li> <li>Make NessieContentGenerator extensible</li> </ul>"},{"location":"try/releases/#0260-release-april-12-2022","title":"0.26.0 Release (April 12, 2022)","text":"<p>Rolling upgrades from an older Nessie release to 0.26.0 or newer are not supported.</p> <ul> <li>Remove global state for Iceberg tables + views</li> <li>Internal optimizations in database adapters, version store and API endpoints</li> <li>Change \u2018marker\u2019 character to indicate <code>.</code> in namespace/table identifiers from ASCII 0 to <code>\\u001D</code></li> <li>Opt-in to force-merge or not merge specific content keys (also for transplant)</li> <li>Squash merged and transplanted commits by default (with opt-out)</li> </ul>"},{"location":"try/releases/#0250-release-april-6-2022","title":"0.25.0 Release (April 6, 2022)","text":"<ul> <li>Nessie Quarkus Server can use Postgres as its backend database</li> <li>Explicitly define behavior of multiple commit-operations in a commit</li> <li>Load correct view metadata for a given ref</li> </ul>"},{"location":"try/releases/#0240-release-march-31-2022","title":"0.24.0 Release (March 31, 2022)","text":"<ul> <li>Prevent explicit creation of empty namespaces</li> <li>Add content-id to <code>BatchAccessChecker.canReadContentKey()</code></li> </ul>"},{"location":"try/releases/#0231-release-march-23-2022","title":"0.23.1 Release (March 23, 2022)","text":"<ul> <li>Support Namespaces</li> <li>CI \u201cperf tests\u201d improvements</li> <li>SQL Extension: Fix Create reference from a hash on non-default reference</li> <li>Enhance authorization checks</li> <li>Support custom annotations on Nessie Helm service</li> </ul>"},{"location":"try/releases/#0230-release-march-23-2022","title":"0.23.0 Release (March 23, 2022)","text":"<p>(not properly released)</p>"},{"location":"try/releases/#0220-release-march-11-2022","title":"0.22.0 Release (March 11, 2022)","text":"<ul> <li>Improve performance of <code>getValues</code></li> <li>Global-log compaction</li> <li>Store-level maintenance CLI</li> <li>Reduce number of tags for micrometer</li> <li>Grafana Dashboard for Nessie service</li> <li>Add new commands to generate-content tool</li> </ul>"},{"location":"try/releases/#0212-release-march-2-2022","title":"0.21.2 Release (March 2, 2022)","text":"<ul> <li>Fix serialization issue</li> </ul>"},{"location":"try/releases/#0211-release-march-2-2022","title":"0.21.1 Release (March 2, 2022)","text":"<ul> <li>(no user visible changes)</li> </ul>"},{"location":"try/releases/#0210-release-march-1-2022","title":"0.21.0 Release (March 1, 2022)","text":"<ul> <li>Add tracing to database-adapter internals</li> <li>Introduce compatibility and upgrade tests</li> <li>Refactor StreamingUtil class</li> <li>Support for Spark 3.1 + 3.2.1 in Nessie SQL extensions</li> <li>Proper usage of commit-id in Spark SQL extensions</li> <li>Add DELETE_DEFAULT_BRANCH access check</li> </ul>"},{"location":"try/releases/#0201-release-february-17-2022","title":"0.20.1 Release (February 17, 2022)","text":"<ul> <li>(no user visible changes)</li> </ul>"},{"location":"try/releases/#0200-release-february-16-2022","title":"0.20.0 Release (February 16, 2022)","text":"<ul> <li>Enable metrics for MongoDB by default</li> <li>Make try-loop-state configurable and add metrics</li> <li>Reorganize routes in UI</li> <li>Improve error reporting in Nessie Java client</li> <li>Various test improvements</li> </ul>"},{"location":"try/releases/#0190-release-february-7-2022","title":"0.19.0 Release (February 7, 2022)","text":"<ul> <li>Reads using \u201cdetached\u201d commit-ids w/o specifying a branch or tag name</li> <li>Bump Nessie client version in Nessie Spark-Extensions</li> <li>Support for Iceberg views (experimental)</li> <li>Diff endpoint supports named-references + commit-on-reference as well</li> <li>Add filtering for ref-log</li> <li>Rework and simplification of the Nessie UI code</li> </ul>"},{"location":"try/releases/#0180-release-january-13-2022","title":"0.18.0 Release (January 13, 2022)","text":"<ul> <li>Add reflog support</li> <li>Uses commit-timestamp \u201cnow\u201d for merged/transplanted commits</li> <li>Add new reflog command to the CLI</li> <li>Add support for Python 3.10</li> <li>Drop support for Python 3.6</li> </ul>"},{"location":"try/releases/#0170-release-december-08-2021","title":"0.17.0 Release (December 08, 2021)","text":"<ul> <li>Rename \u2018query_expression\u2019 query param to \u2018filter\u2019</li> <li>Rename \u2018max\u2019 query param to \u2018maxRecords\u2019</li> <li>Rename \u2018fetchAdditionalInfo\u2019 query param to \u2018fetch\u2019 for better extensibility</li> </ul>"},{"location":"try/releases/#0160-release-december-03-2021","title":"0.16.0 Release (December 03, 2021)","text":"<ul> <li>Mark optional fields as @Nullable / add validation for required fields in param classes</li> <li>Add CEL-filter to get-all-references</li> <li>Fix NPE for unchanged operation for fetching commit log with additional metadata</li> <li>Allow CEL-filtering on optional operations in get-commit-log</li> </ul>"},{"location":"try/releases/#0151-release-december-01-2021","title":"0.15.1 Release (December 01, 2021)","text":"<ul> <li>Fix wrongly placed validation annotation</li> </ul>"},{"location":"try/releases/#0150-release-december-01-2021","title":"0.15.0 Release (December 01, 2021)","text":"<ul> <li>Enhance commit log to optionally return original commit operations</li> <li>Optionally return commits ahead/behind, HEAD commit-meta, commit count,   common ancestor for named references</li> <li>Add missing REST endpoint to retrieve diff between two references</li> <li>Web UI improvements</li> </ul>"},{"location":"try/releases/#0140-release-november-12-2021","title":"0.14.0 Release (November 12, 2021)","text":"<ul> <li>Updated <code>IcebergTable</code> to track more information</li> <li>UI dependencies cleanup</li> <li>OpenAPI/REST API cleanup (breaking change)</li> </ul>"},{"location":"try/releases/#0121-release-november-3-2021","title":"0.12.1 Release (November 3, 2021)","text":"<ul> <li>Test code improvements</li> <li>Swagger examples fixes</li> <li>Web UI improvements</li> <li>Faster local builds w/ <code>./mvnw -Dquickly</code></li> </ul>"},{"location":"try/releases/#0120-release-october-25-2021","title":"0.12.0 Release (October 25, 2021)","text":"<ul> <li>Specialize and document Nessie exceptions</li> <li>Adopt Helm chart with new Nessie server settings</li> <li>Bump to GraalVM 21.3</li> </ul>"},{"location":"try/releases/#0110-release-october-20-2021","title":"0.11.0 Release (October 20, 2021)","text":"<ul> <li>Various doc + site improvements</li> <li>Fix Nessie\u2019s representation of global and on-reference state (Iceberg tables)</li> <li>Fix CLI log -n option</li> <li>Spark SQL extension improvements</li> </ul>"},{"location":"try/releases/#0101-release-october-8-2021","title":"0.10.1 Release (October 8, 2021)","text":"<ul> <li>Spark SQL extension changes</li> <li>Various (Open)API and client (Java, Python) implementation changes to prepare for better   backwards compatibility.</li> <li>JUnit extension based test support against different database/store types and configurations</li> <li>Unified version-store implementations into a part w/ the Nessie logic and a tier implementing   database access (MongoDB, DynamoDB, RocksDB, PostgreSQL).</li> <li>Remove JGit</li> </ul>"},{"location":"try/releases/#092-release-august-26-2021","title":"0.9.2 Release (August 26, 2021)","text":"<ul> <li>Cleanup &amp; fixes to OpenAPI examples, for Swagger UI</li> <li>Update Deltalake client to use version 1.0.0</li> <li>Drop Deltalake support for Spark 2</li> <li>Remove Hive-Metastore bridge</li> <li>Preparations for backwards-compatible Client-API</li> <li>Spark SQL Extensions: Introduce <code>IF NOT EXISTS</code> for <code>CREATE BRANCH</code>/<code>CREATE TAG</code></li> <li>Spark SQL Extensions: Updates to work with Iceberg 0.12.0</li> </ul>"},{"location":"try/releases/#090-release-august-9-2021","title":"0.9.0 Release (August 9, 2021)","text":"<ul> <li>Support for the upcoming Iceberg <code>0.12.0</code> release for both Spark 3.0 + 3.1</li> <li>Add docs for Nessie\u2019s metadata authorization</li> <li>Add SPI for Nessie authorization with Reference implementation</li> <li>Create Helm chart for Nessie</li> </ul>"},{"location":"try/releases/#083-release-july-19-2021","title":"0.8.3 Release (July 19, 2021)","text":"<ul> <li>Fix issue in spark sql extensions</li> <li>Python CLI: Fix ser/de of DeltaLakeTable when listing contents</li> </ul>"},{"location":"try/releases/#082-release-july-15-2021","title":"0.8.2 Release (July 15, 2021)","text":"<ul> <li>Add JAX-RS server implementation based on Glassfish/Jersey/Weld for integration testing   in Iceberg</li> <li>REST-API change: only accept named-references</li> <li>REST-API change: support time-travel on named-references</li> <li>REST-API change: Server-side commit range filtering</li> <li>OpenAPI: more explicit constraints on parameters</li> <li>OpenAPI: include OpenAPI yaml+json files in nessie-model artifact</li> <li>Remove already deprecated methods from ContentsApi</li> <li>Commit-log filtering on all fields of CommitMeta</li> <li>Use \u201cCommon Expression Language\u201d for commit-log and entries filtering</li> <li>Spark-extensions for Iceberg</li> <li>Prepare for multi-tenancy</li> <li>Gatling support + simulations</li> <li>Python CLI: Fix ser/de of DeltaLakeTable when listing contents</li> </ul>"},{"location":"try/releases/#070-release-june-15-2021","title":"0.7.0 Release (June 15, 2021)","text":"<ul> <li>Server-side filtering improvements for entries-listing and log-listing</li> <li>Distinguish between author &amp; committer in the Python CLI</li> <li>Allow setting author when committing via Python CLI</li> <li>Loosen pins for client install on Python cli</li> <li>Fix edge case when merging using in memory + jgit stores</li> <li>Gradle plugin improvements</li> <li>(Development) change to Google Code Style, add spotless plugin</li> <li>(CI) Add OWASP Dependency Check</li> </ul>"},{"location":"try/releases/#061-release-may-25-2021","title":"0.6.1 Release (May 25, 2021)","text":"<ul> <li>Gradle plugin improvements</li> </ul>"},{"location":"try/releases/#060-release-may-12-2021","title":"0.6.0 Release (May 12, 2021)","text":"<ul> <li>TreeApi.createReference() + commitMultipleOperations() return commit information</li> <li>Iceberg GC actions and a process to execute GC algorithm</li> </ul>"},{"location":"try/releases/#051-release-april-9-2021","title":"0.5.1 Release (April 9, 2021)","text":"<ul> <li>Fix Gradle plugin (non-deterministic order of dependencies causing failures)</li> <li>Fix Web-UI</li> </ul>"},{"location":"try/releases/#050-release-april-8-2021","title":"0.5.0 Release (April 8, 2021)","text":"<ul> <li>Iceberg table GC support</li> <li>Consistency fixes under high load</li> <li>Breaking changes to the backend to support richer commit metadata and data types</li> <li>Performance, metrics and tracing improvements</li> <li>Gradle plugin improvement for incremental builds</li> </ul>"},{"location":"try/releases/#040-release-march-8-2020","title":"0.4.0 Release (March 8, 2020)","text":"<ul> <li>rename base package to org.projectnessie</li> <li>NessieClient is now an interface and some easier builders</li> <li>initial implementation of GC algorithm</li> <li>major refactor of tiered classes for better modularity and extensibility</li> <li>observability improvements including better DynamoDB metrics and opentracing support for the client</li> </ul>"},{"location":"try/releases/#030-release-december-30-2020","title":"0.3.0 Release (December 30, 2020)","text":"<ul> <li>118 commits since 0.2.1</li> <li>Replace jax-rs client with one based on HttpURLConnection</li> <li>Update Quarkus to 1.10.5</li> <li>Improvements to Server including better UI routing, validation checks on inputs etc</li> <li>Various improvements to python client and cli. Including python3.9 support</li> </ul>"},{"location":"try/releases/#021-release-october-30-2020","title":"0.2.1 Release (October 30, 2020)","text":"<ul> <li>Fix missing dateutil requirement for pynessie install</li> <li>Address path discovery in Gradle plugin (for testing in external integrations)</li> </ul>"},{"location":"try/releases/#020-release-october-29-2020","title":"0.2.0 Release (October 29, 2020)","text":"<ul> <li>Update Nessie CLI commands to better match <code>git</code> syntax</li> <li>Update REST Apis to be more consistent and better</li> <li>Add support for merge &amp; cherry-pick in DynamoDB storage backend</li> <li>Add WebUI</li> <li>Introduce new DynamoDB optimizations to support faster log and entry retrieval</li> <li>Update to Quarkus 1.9.1</li> <li>Expose the new Store interface for low level storage implementations</li> <li>Introduce Quarkus Gradle runner plugin for easier third-party testing (e.g. Iceberg)</li> <li>Enable swagger-ui by default in Nessie service</li> </ul>"},{"location":"try/releases/#010-release-october-1-2020","title":"0.1.0 Release (October 1, 2020)","text":"<ul> <li>Initial release</li> </ul>"},{"location":"try/server-upgrade/","title":"Nessie Server upgrade notes","text":"<p>The following table lists the upgrade types from one Nessie version to another Nessie version.</p> <p>A check-mark in the Rolling Upgrade column means that it is okay to run Nessie instances running versions in the From column during the limited time of a rolling-upgrade with Nessie versions in the To column.</p> <p>A red cross in the Rolling Upgrade column means that rolling upgrades for the mentioned versions are not supported and must be avoided.</p> Rolling Upgrade Supported From Nessie version To Nessie version 0.40.0 or newer 0.48.2 or newer &lt; 0.40.0 0.40.0 or newer 0.26.0 to 0.29.0 0.27.0 to 0.30.0 0.25.0 or older 0.26.0 or newer 0.18.0 to 0.24.0 0.19.0 to 0.25.0 <p>Older releases than 0.18.0 are not supported.</p> <p>See Releases for release notes.</p>"}]}